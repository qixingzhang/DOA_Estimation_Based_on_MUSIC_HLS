-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage_118 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce0 : OUT STD_LOGIC;
    X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce1 : OUT STD_LOGIC;
    X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce0 : OUT STD_LOGIC;
    X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce1 : OUT STD_LOGIC;
    X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Out_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_ce0 : OUT STD_LOGIC;
    Out_R_we0 : OUT STD_LOGIC;
    Out_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_ce1 : OUT STD_LOGIC;
    Out_R_we1 : OUT STD_LOGIC;
    Out_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_ce0 : OUT STD_LOGIC;
    Out_I_we0 : OUT STD_LOGIC;
    Out_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_ce1 : OUT STD_LOGIC;
    Out_I_we1 : OUT STD_LOGIC;
    Out_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_stage_118 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_148 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_0_reg_170 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln184_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_279_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln184_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_279_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_279_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_279_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_279_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_279_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_279_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_279_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln184_fu_216_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln184_reg_283 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln184_fu_228_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln184_reg_288 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_mid2_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_mid2_reg_293 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_246_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_298 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_298_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_298_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_298_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln194_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_303_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal X_R_load_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_load_reg_319_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_load_reg_319_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_load_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_load_reg_325_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_load_reg_325_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_270_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_reg_331 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_3_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal zext_ln196_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_reg_346 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_reg_346_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_reg_346_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_reg_346_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_reg_346_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal X_R_load_1_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal temp_I_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_load_1_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_152_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_163_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_t_0_phi_fu_174_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln184_1_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln187_fu_242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln187_fu_254_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_lower_fu_258_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_181_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_446 : BOOLEAN;
    signal ap_condition_450 : BOOLEAN;

    component music_faddfsub_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fsub_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fadd_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fmul_32ns_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    music_faddfsub_32bkb_U5 : component music_faddfsub_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_181_p0,
        din1 => grp_fu_181_p1,
        opcode => grp_fu_181_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    music_fsub_32ns_3cud_U6 : component music_fsub_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_185_p0,
        din1 => grp_fu_185_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);

    music_fadd_32ns_3dEe_U7 : component music_fadd_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_189_p0,
        din1 => grp_fu_189_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);

    music_fmul_32ns_3eOg_U8 : component music_fmul_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_193_p0,
        din1 => ap_const_lv32_80000000,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_148 <= add_ln184_reg_283;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_148 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_159 <= j_0_mid2_reg_293;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_159 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    t_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_0_reg_170 <= t_reg_331;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_0_reg_170 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                X_I_load_1_reg_381 <= X_I_q1;
                temp_I_reg_375 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                X_I_load_reg_325 <= X_I_q0;
                X_R_load_reg_319 <= X_R_q0;
                t_reg_331 <= t_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                X_I_load_reg_325_pp0_iter1_reg <= X_I_load_reg_325;
                X_I_load_reg_325_pp0_iter2_reg <= X_I_load_reg_325_pp0_iter1_reg;
                X_R_load_reg_319_pp0_iter1_reg <= X_R_load_reg_319;
                X_R_load_reg_319_pp0_iter2_reg <= X_R_load_reg_319_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                X_R_load_1_reg_358 <= X_R_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln184_reg_283 <= add_ln184_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_298 <= i_fu_246_p3;
                select_ln184_reg_288 <= select_ln184_fu_228_p3;
                    zext_ln194_reg_303(10 downto 0) <= zext_ln194_fu_264_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_298_pp0_iter1_reg <= i_reg_298;
                i_reg_298_pp0_iter2_reg <= i_reg_298_pp0_iter1_reg;
                i_reg_298_pp0_iter3_reg <= i_reg_298_pp0_iter2_reg;
                icmp_ln184_reg_279 <= icmp_ln184_fu_210_p2;
                icmp_ln184_reg_279_pp0_iter1_reg <= icmp_ln184_reg_279;
                icmp_ln184_reg_279_pp0_iter2_reg <= icmp_ln184_reg_279_pp0_iter1_reg;
                icmp_ln184_reg_279_pp0_iter3_reg <= icmp_ln184_reg_279_pp0_iter2_reg;
                icmp_ln184_reg_279_pp0_iter4_reg <= icmp_ln184_reg_279_pp0_iter3_reg;
                icmp_ln184_reg_279_pp0_iter5_reg <= icmp_ln184_reg_279_pp0_iter4_reg;
                icmp_ln184_reg_279_pp0_iter6_reg <= icmp_ln184_reg_279_pp0_iter5_reg;
                icmp_ln184_reg_279_pp0_iter7_reg <= icmp_ln184_reg_279_pp0_iter6_reg;
                icmp_ln184_reg_279_pp0_iter8_reg <= icmp_ln184_reg_279_pp0_iter7_reg;
                    zext_ln194_reg_303_pp0_iter1_reg(10 downto 0) <= zext_ln194_reg_303(10 downto 0);
                    zext_ln194_reg_303_pp0_iter2_reg(10 downto 0) <= zext_ln194_reg_303_pp0_iter1_reg(10 downto 0);
                    zext_ln194_reg_303_pp0_iter3_reg(10 downto 0) <= zext_ln194_reg_303_pp0_iter2_reg(10 downto 0);
                    zext_ln194_reg_303_pp0_iter4_reg(10 downto 0) <= zext_ln194_reg_303_pp0_iter3_reg(10 downto 0);
                    zext_ln194_reg_303_pp0_iter5_reg(10 downto 0) <= zext_ln194_reg_303_pp0_iter4_reg(10 downto 0);
                    zext_ln194_reg_303_pp0_iter6_reg(10 downto 0) <= zext_ln194_reg_303_pp0_iter5_reg(10 downto 0);
                    zext_ln194_reg_303_pp0_iter7_reg(10 downto 0) <= zext_ln194_reg_303_pp0_iter6_reg(10 downto 0);
                    zext_ln194_reg_303_pp0_iter8_reg(10 downto 0) <= zext_ln194_reg_303_pp0_iter7_reg(10 downto 0);
                    zext_ln196_reg_346_pp0_iter5_reg(9 downto 0) <= zext_ln196_reg_346(9 downto 0);
                    zext_ln196_reg_346_pp0_iter6_reg(9 downto 0) <= zext_ln196_reg_346_pp0_iter5_reg(9 downto 0);
                    zext_ln196_reg_346_pp0_iter7_reg(9 downto 0) <= zext_ln196_reg_346_pp0_iter6_reg(9 downto 0);
                    zext_ln196_reg_346_pp0_iter8_reg(9 downto 0) <= zext_ln196_reg_346_pp0_iter7_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_fu_210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_0_mid2_reg_293 <= j_0_mid2_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln184_reg_279_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln184_reg_279_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_198 <= grp_fu_185_p2;
                reg_204 <= grp_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                temp_R_reg_364 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                tmp_1_reg_336 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_reg_341 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_reg_279_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln196_reg_346(9 downto 0) <= zext_ln196_fu_275_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln194_reg_303(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_303_pp0_iter1_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_303_pp0_iter2_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_303_pp0_iter3_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_303_pp0_iter4_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_303_pp0_iter5_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_303_pp0_iter6_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_303_pp0_iter7_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_303_pp0_iter8_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln196_reg_346(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln196_reg_346_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln196_reg_346_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln196_reg_346_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln196_reg_346_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, icmp_ln184_fu_210_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln184_fu_210_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln184_fu_210_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Out_I_address0 <= zext_ln194_reg_303_pp0_iter8_reg(10 - 1 downto 0);
    Out_I_address1 <= zext_ln196_reg_346_pp0_iter8_reg(10 - 1 downto 0);

    Out_I_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            Out_I_ce0 <= ap_const_logic_1;
        else 
            Out_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            Out_I_ce1 <= ap_const_logic_1;
        else 
            Out_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_I_d0 <= reg_198;
    Out_I_d1 <= reg_204;

    Out_I_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter8, icmp_ln184_reg_279_pp0_iter8_reg)
    begin
        if (((icmp_ln184_reg_279_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            Out_I_we0 <= ap_const_logic_1;
        else 
            Out_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter8, icmp_ln184_reg_279_pp0_iter8_reg)
    begin
        if (((icmp_ln184_reg_279_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            Out_I_we1 <= ap_const_logic_1;
        else 
            Out_I_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_address0 <= zext_ln194_reg_303_pp0_iter7_reg(10 - 1 downto 0);
    Out_R_address1 <= zext_ln196_reg_346_pp0_iter7_reg(10 - 1 downto 0);

    Out_R_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_R_ce0 <= ap_const_logic_1;
        else 
            Out_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_R_ce1 <= ap_const_logic_1;
        else 
            Out_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_d0 <= reg_198;
    Out_R_d1 <= reg_204;

    Out_R_we0_assign_proc : process(icmp_ln184_reg_279_pp0_iter7_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln184_reg_279_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_R_we0 <= ap_const_logic_1;
        else 
            Out_R_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_we1_assign_proc : process(icmp_ln184_reg_279_pp0_iter7_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln184_reg_279_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_R_we1 <= ap_const_logic_1;
        else 
            Out_R_we1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_address0 <= zext_ln194_fu_264_p1(10 - 1 downto 0);
    X_I_address1 <= zext_ln196_reg_346(10 - 1 downto 0);

    X_I_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_ce0 <= ap_const_logic_1;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_ce1 <= ap_const_logic_1;
        else 
            X_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_address0 <= zext_ln194_fu_264_p1(10 - 1 downto 0);
    X_R_address1 <= zext_ln196_fu_275_p1(10 - 1 downto 0);

    X_R_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_ce0 <= ap_const_logic_1;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_ce1 <= ap_const_logic_1;
        else 
            X_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln184_fu_216_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_152_p4) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_446_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln184_reg_279_pp0_iter3_reg, ap_block_pp0_stage1_00001)
    begin
                ap_condition_446 <= ((icmp_ln184_reg_279_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_450_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln184_reg_279_pp0_iter2_reg, ap_block_pp0_stage0_00001)
    begin
                ap_condition_450 <= ((icmp_ln184_reg_279_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln184_fu_210_p2)
    begin
        if ((icmp_ln184_fu_210_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_152_p4_assign_proc : process(indvar_flatten_reg_148, icmp_ln184_reg_279, ap_CS_fsm_pp0_stage0, add_ln184_reg_283, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln184_reg_279 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_152_p4 <= add_ln184_reg_283;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_152_p4 <= indvar_flatten_reg_148;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_163_p4_assign_proc : process(j_0_reg_159, icmp_ln184_reg_279, ap_CS_fsm_pp0_stage0, j_0_mid2_reg_293, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln184_reg_279 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_163_p4 <= j_0_mid2_reg_293;
        else 
            ap_phi_mux_j_0_phi_fu_163_p4 <= j_0_reg_159;
        end if; 
    end process;


    ap_phi_mux_t_0_phi_fu_174_p4_assign_proc : process(t_0_reg_170, icmp_ln184_reg_279, ap_CS_fsm_pp0_stage0, t_reg_331, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln184_reg_279 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_t_0_phi_fu_174_p4 <= t_reg_331;
        else 
            ap_phi_mux_t_0_phi_fu_174_p4 <= t_0_reg_170;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_181_opcode_assign_proc : process(ap_enable_reg_pp0_iter3, ap_condition_446, ap_condition_450)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_450)) then 
                grp_fu_181_opcode <= ap_const_lv2_1;
            elsif ((ap_const_boolean_1 = ap_condition_446)) then 
                grp_fu_181_opcode <= ap_const_lv2_0;
            else 
                grp_fu_181_opcode <= "XX";
            end if;
        else 
            grp_fu_181_opcode <= "XX";
        end if; 
    end process;


    grp_fu_181_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, X_R_load_reg_319_pp0_iter2_reg, X_I_load_reg_325_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_181_p0 <= X_I_load_reg_325_pp0_iter2_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_181_p0 <= X_R_load_reg_319_pp0_iter2_reg;
            else 
                grp_fu_181_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_181_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_181_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, tmp_1_reg_336, tmp_3_reg_341, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_181_p1 <= tmp_3_reg_341;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_181_p1 <= tmp_1_reg_336;
            else 
                grp_fu_181_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_181_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_185_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, X_R_load_1_reg_358, ap_enable_reg_pp0_iter5, X_I_load_1_reg_381, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_185_p0 <= X_I_load_1_reg_381;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_185_p0 <= X_R_load_1_reg_358;
        else 
            grp_fu_185_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_185_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, temp_R_reg_364, ap_enable_reg_pp0_iter5, temp_I_reg_375, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_185_p1 <= temp_I_reg_375;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_185_p1 <= temp_R_reg_364;
        else 
            grp_fu_185_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_189_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, X_R_load_1_reg_358, ap_enable_reg_pp0_iter5, X_I_load_1_reg_381, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_189_p0 <= X_I_load_1_reg_381;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_189_p0 <= X_R_load_1_reg_358;
        else 
            grp_fu_189_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_189_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, temp_R_reg_364, ap_enable_reg_pp0_iter5, temp_I_reg_375, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_189_p1 <= temp_I_reg_375;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_189_p1 <= temp_R_reg_364;
        else 
            grp_fu_189_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_193_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, X_R_load_reg_319, X_I_load_reg_325, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_193_p0 <= X_R_load_reg_319;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_193_p0 <= X_I_load_reg_325;
            else 
                grp_fu_193_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_193_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_246_p3 <= (trunc_ln187_fu_242_p1 & j_0_mid2_fu_236_p2);
    i_lower_fu_258_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(zext_ln187_fu_254_p1));
    icmp_ln184_1_fu_222_p2 <= "1" when (ap_phi_mux_t_0_phi_fu_174_p4 = ap_const_lv10_200) else "0";
    icmp_ln184_fu_210_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_152_p4 = ap_const_lv10_200) else "0";
    j_0_mid2_fu_236_p2 <= (icmp_ln184_1_fu_222_p2 or ap_phi_mux_j_0_phi_fu_163_p4);
    select_ln184_fu_228_p3 <= 
        ap_const_lv10_0 when (icmp_ln184_1_fu_222_p2(0) = '1') else 
        ap_phi_mux_t_0_phi_fu_174_p4;
    t_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(select_ln184_reg_288));
    trunc_ln187_fu_242_p1 <= select_ln184_fu_228_p3(9 - 1 downto 0);
    zext_ln187_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_246_p3),11));
    zext_ln194_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_lower_fu_258_p2),64));
    zext_ln196_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_298_pp0_iter3_reg),64));
end behav;
