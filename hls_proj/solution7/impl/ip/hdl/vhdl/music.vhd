-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity music is
generic (
    C_M_AXI_DATA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUSER_WIDTH-1 downto 0);
    P_sm_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_sm_TVALID : OUT STD_LOGIC;
    P_sm_TREADY : IN STD_LOGIC;
    P_sm_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    P_sm_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of music is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "music,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=1769785,HLS_SYN_TPT=none,HLS_SYN_MEM=69,HLS_SYN_DSP=117,HLS_SYN_FF=17973,HLS_SYN_LUT=24605,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_169 : STD_LOGIC_VECTOR (8 downto 0) := "101101001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_re : STD_LOGIC_VECTOR (31 downto 0);
    signal data_im : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sm_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sm_data_1_vld_in : STD_LOGIC;
    signal P_sm_data_1_vld_out : STD_LOGIC;
    signal P_sm_data_1_ack_in : STD_LOGIC;
    signal P_sm_data_1_ack_out : STD_LOGIC;
    signal P_sm_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sm_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sm_data_1_sel_rd : STD_LOGIC := '0';
    signal P_sm_data_1_sel_wr : STD_LOGIC := '0';
    signal P_sm_data_1_sel : STD_LOGIC;
    signal P_sm_data_1_load_A : STD_LOGIC;
    signal P_sm_data_1_load_B : STD_LOGIC;
    signal P_sm_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal P_sm_data_1_state_cmp_full : STD_LOGIC;
    signal P_sm_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal P_sm_user_V_1_vld_in : STD_LOGIC;
    signal P_sm_user_V_1_vld_out : STD_LOGIC;
    signal P_sm_user_V_1_ack_in : STD_LOGIC;
    signal P_sm_user_V_1_ack_out : STD_LOGIC;
    signal P_sm_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal P_sm_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal P_sm_user_V_1_sel_rd : STD_LOGIC := '0';
    signal P_sm_user_V_1_sel_wr : STD_LOGIC := '0';
    signal P_sm_user_V_1_sel : STD_LOGIC;
    signal P_sm_user_V_1_load_A : STD_LOGIC;
    signal P_sm_user_V_1_load_B : STD_LOGIC;
    signal P_sm_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal P_sm_user_V_1_state_cmp_full : STD_LOGIC;
    signal P_sm_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal P_sm_last_V_1_vld_in : STD_LOGIC;
    signal P_sm_last_V_1_vld_out : STD_LOGIC;
    signal P_sm_last_V_1_ack_in : STD_LOGIC;
    signal P_sm_last_V_1_ack_out : STD_LOGIC;
    signal P_sm_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal P_sm_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal P_sm_last_V_1_sel_rd : STD_LOGIC := '0';
    signal P_sm_last_V_1_sel_wr : STD_LOGIC := '0';
    signal P_sm_last_V_1_sel : STD_LOGIC;
    signal P_sm_last_V_1_load_A : STD_LOGIC;
    signal P_sm_last_V_1_load_B : STD_LOGIC;
    signal P_sm_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal P_sm_last_V_1_state_cmp_full : STD_LOGIC;
    signal temp_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_array_ce0 : STD_LOGIC;
    signal temp_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal data_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal data_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal data_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal P_sm_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal data_AWVALID : STD_LOGIC;
    signal data_AWREADY : STD_LOGIC;
    signal data_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_WVALID : STD_LOGIC;
    signal data_WREADY : STD_LOGIC;
    signal data_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ARVALID : STD_LOGIC;
    signal data_ARREADY : STD_LOGIC;
    signal data_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_RVALID : STD_LOGIC;
    signal data_RREADY : STD_LOGIC;
    signal data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_RLAST : STD_LOGIC;
    signal data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BVALID : STD_LOGIC;
    signal data_BREADY : STD_LOGIC;
    signal data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast6_fu_422_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast6_reg_646 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast_fu_436_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast_reg_651 : STD_LOGIC_VECTOR (30 downto 0);
    signal l_fu_446_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_reg_660 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_452_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_reg_665 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln303_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_466_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_674 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln305_1_fu_472_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln305_1_reg_679 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln304_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_486_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_688 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln306_2_fu_518_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln306_2_reg_693 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln305_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_addr_read_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_549_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_712 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln310_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln311_2_fu_587_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln311_2_reg_722 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln312_fu_592_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln312_reg_727 : STD_LOGIC_VECTOR (30 downto 0);
    signal FFT_out_re_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_out_re_load_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_out_im_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_out_im_load_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state17_io : BOOLEAN;
    signal i_fu_623_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_762 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_state24 : BOOLEAN;
    signal icmp_ln382_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln384_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln384_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln385_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln385_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal FFT_Buffer_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FFT_Buffer_re_ce0 : STD_LOGIC;
    signal FFT_Buffer_re_we0 : STD_LOGIC;
    signal FFT_Buffer_re_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_Buffer_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FFT_Buffer_im_ce0 : STD_LOGIC;
    signal FFT_Buffer_im_we0 : STD_LOGIC;
    signal FFT_Buffer_im_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_out_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FFT_out_re_ce0 : STD_LOGIC;
    signal FFT_out_re_we0 : STD_LOGIC;
    signal FFT_out_re_ce1 : STD_LOGIC;
    signal FFT_out_re_we1 : STD_LOGIC;
    signal FFT_out_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FFT_out_im_ce0 : STD_LOGIC;
    signal FFT_out_im_we0 : STD_LOGIC;
    signal FFT_out_im_ce1 : STD_LOGIC;
    signal FFT_out_im_we1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_X_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_streaming_fu_368_X_R_ce0 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_streaming_fu_368_X_R_we0 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_X_R_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_streaming_fu_368_X_R_ce1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_X_R_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_streaming_fu_368_X_R_we1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_X_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_streaming_fu_368_X_I_ce0 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_streaming_fu_368_X_I_we0 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_X_I_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_streaming_fu_368_X_I_ce1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_X_I_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_streaming_fu_368_X_I_we1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_OUT_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_streaming_fu_368_OUT_R_ce0 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_OUT_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_streaming_fu_368_OUT_R_we0 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_OUT_R_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_streaming_fu_368_OUT_R_ce1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_OUT_R_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_streaming_fu_368_OUT_R_we1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_OUT_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_streaming_fu_368_OUT_I_ce0 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_OUT_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_streaming_fu_368_OUT_I_we0 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_OUT_I_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_streaming_fu_368_OUT_I_ce1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_OUT_I_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_streaming_fu_368_OUT_I_we1 : STD_LOGIC;
    signal grp_fft_streaming_fu_368_ap_start : STD_LOGIC;
    signal grp_fft_streaming_fu_368_ap_done : STD_LOGIC;
    signal grp_fft_streaming_fu_368_ap_ready : STD_LOGIC;
    signal grp_fft_streaming_fu_368_ap_idle : STD_LOGIC;
    signal grp_fft_streaming_fu_368_ap_continue : STD_LOGIC;
    signal l_0_reg_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_0_reg_323 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_334 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j24_0_reg_346 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_sync_grp_fft_streaming_fu_368_ap_ready : STD_LOGIC;
    signal ap_sync_grp_fft_streaming_fu_368_ap_done : STD_LOGIC;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal p_06_rec_reg_357 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_streaming_fu_368_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft_streaming_fu_368_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft_streaming_fu_368_ap_done : STD_LOGIC := '0';
    signal zext_ln306_2_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln311_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln383_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_3_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln311_3_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln312_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_412_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_426_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln305_fu_476_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln306_fu_492_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_497_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln306_fu_505_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln306_1_fu_509_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln306_1_fu_514_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln310_fu_539_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln311_fu_561_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_566_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln311_1_fu_574_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln311_1_fu_578_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln311_2_fu_583_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component fft_streaming IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_R_we0 : OUT STD_LOGIC;
        X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce1 : OUT STD_LOGIC;
        X_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_R_we1 : OUT STD_LOGIC;
        X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_we0 : OUT STD_LOGIC;
        X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce1 : OUT STD_LOGIC;
        X_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_we1 : OUT STD_LOGIC;
        OUT_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        OUT_R_ce0 : OUT STD_LOGIC;
        OUT_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_we0 : OUT STD_LOGIC;
        OUT_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        OUT_R_ce1 : OUT STD_LOGIC;
        OUT_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_we1 : OUT STD_LOGIC;
        OUT_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        OUT_I_ce0 : OUT STD_LOGIC;
        OUT_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_we0 : OUT STD_LOGIC;
        OUT_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        OUT_I_ce1 : OUT STD_LOGIC;
        OUT_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_we1 : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component music_temp_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_FFT_Buffer_re IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_FFT_out_re IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        data_re : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_im : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    temp_array_U : component music_temp_array
    generic map (
        DataWidth => 32,
        AddressRange => 361,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_array_address0,
        ce0 => temp_array_ce0,
        q0 => temp_array_q0);

    music_AXILiteS_s_axi_U : component music_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_B0,
        data_re => data_re,
        data_im => data_im);

    music_data_m_axi_U : component music_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_AWVALID,
        AWREADY => m_axi_data_AWREADY,
        AWADDR => m_axi_data_AWADDR,
        AWID => m_axi_data_AWID,
        AWLEN => m_axi_data_AWLEN,
        AWSIZE => m_axi_data_AWSIZE,
        AWBURST => m_axi_data_AWBURST,
        AWLOCK => m_axi_data_AWLOCK,
        AWCACHE => m_axi_data_AWCACHE,
        AWPROT => m_axi_data_AWPROT,
        AWQOS => m_axi_data_AWQOS,
        AWREGION => m_axi_data_AWREGION,
        AWUSER => m_axi_data_AWUSER,
        WVALID => m_axi_data_WVALID,
        WREADY => m_axi_data_WREADY,
        WDATA => m_axi_data_WDATA,
        WSTRB => m_axi_data_WSTRB,
        WLAST => m_axi_data_WLAST,
        WID => m_axi_data_WID,
        WUSER => m_axi_data_WUSER,
        ARVALID => m_axi_data_ARVALID,
        ARREADY => m_axi_data_ARREADY,
        ARADDR => m_axi_data_ARADDR,
        ARID => m_axi_data_ARID,
        ARLEN => m_axi_data_ARLEN,
        ARSIZE => m_axi_data_ARSIZE,
        ARBURST => m_axi_data_ARBURST,
        ARLOCK => m_axi_data_ARLOCK,
        ARCACHE => m_axi_data_ARCACHE,
        ARPROT => m_axi_data_ARPROT,
        ARQOS => m_axi_data_ARQOS,
        ARREGION => m_axi_data_ARREGION,
        ARUSER => m_axi_data_ARUSER,
        RVALID => m_axi_data_RVALID,
        RREADY => m_axi_data_RREADY,
        RDATA => m_axi_data_RDATA,
        RLAST => m_axi_data_RLAST,
        RID => m_axi_data_RID,
        RUSER => m_axi_data_RUSER,
        RRESP => m_axi_data_RRESP,
        BVALID => m_axi_data_BVALID,
        BREADY => m_axi_data_BREADY,
        BRESP => m_axi_data_BRESP,
        BID => m_axi_data_BID,
        BUSER => m_axi_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data_ARVALID,
        I_ARREADY => data_ARREADY,
        I_ARADDR => data_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data_RVALID,
        I_RREADY => data_RREADY,
        I_RDATA => data_RDATA,
        I_RID => data_RID,
        I_RUSER => data_RUSER,
        I_RRESP => data_RRESP,
        I_RLAST => data_RLAST,
        I_AWVALID => data_AWVALID,
        I_AWREADY => data_AWREADY,
        I_AWADDR => data_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => data_WVALID,
        I_WREADY => data_WREADY,
        I_WDATA => data_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => data_BVALID,
        I_BREADY => data_BREADY,
        I_BRESP => data_BRESP,
        I_BID => data_BID,
        I_BUSER => data_BUSER);

    FFT_Buffer_re_U : component music_FFT_Buffer_re
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FFT_Buffer_re_address0,
        ce0 => FFT_Buffer_re_ce0,
        we0 => FFT_Buffer_re_we0,
        d0 => data_addr_read_reg_704,
        q0 => FFT_Buffer_re_q0);

    FFT_Buffer_im_U : component music_FFT_Buffer_re
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FFT_Buffer_im_address0,
        ce0 => FFT_Buffer_im_ce0,
        we0 => FFT_Buffer_im_we0,
        d0 => ap_const_lv32_0,
        q0 => FFT_Buffer_im_q0);

    FFT_out_re_U : component music_FFT_out_re
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FFT_out_re_address0,
        ce0 => FFT_out_re_ce0,
        we0 => FFT_out_re_we0,
        d0 => grp_fft_streaming_fu_368_OUT_R_d0,
        q0 => FFT_out_re_q0,
        address1 => grp_fft_streaming_fu_368_OUT_R_address1,
        ce1 => FFT_out_re_ce1,
        we1 => FFT_out_re_we1,
        d1 => grp_fft_streaming_fu_368_OUT_R_d1);

    FFT_out_im_U : component music_FFT_out_re
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FFT_out_im_address0,
        ce0 => FFT_out_im_ce0,
        we0 => FFT_out_im_we0,
        d0 => grp_fft_streaming_fu_368_OUT_I_d0,
        q0 => FFT_out_im_q0,
        address1 => grp_fft_streaming_fu_368_OUT_I_address1,
        ce1 => FFT_out_im_ce1,
        we1 => FFT_out_im_we1,
        d1 => grp_fft_streaming_fu_368_OUT_I_d1);

    grp_fft_streaming_fu_368 : component fft_streaming
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        X_R_address0 => grp_fft_streaming_fu_368_X_R_address0,
        X_R_ce0 => grp_fft_streaming_fu_368_X_R_ce0,
        X_R_d0 => grp_fft_streaming_fu_368_X_R_d0,
        X_R_q0 => FFT_Buffer_re_q0,
        X_R_we0 => grp_fft_streaming_fu_368_X_R_we0,
        X_R_address1 => grp_fft_streaming_fu_368_X_R_address1,
        X_R_ce1 => grp_fft_streaming_fu_368_X_R_ce1,
        X_R_d1 => grp_fft_streaming_fu_368_X_R_d1,
        X_R_q1 => ap_const_lv32_0,
        X_R_we1 => grp_fft_streaming_fu_368_X_R_we1,
        X_I_address0 => grp_fft_streaming_fu_368_X_I_address0,
        X_I_ce0 => grp_fft_streaming_fu_368_X_I_ce0,
        X_I_d0 => grp_fft_streaming_fu_368_X_I_d0,
        X_I_q0 => FFT_Buffer_im_q0,
        X_I_we0 => grp_fft_streaming_fu_368_X_I_we0,
        X_I_address1 => grp_fft_streaming_fu_368_X_I_address1,
        X_I_ce1 => grp_fft_streaming_fu_368_X_I_ce1,
        X_I_d1 => grp_fft_streaming_fu_368_X_I_d1,
        X_I_q1 => ap_const_lv32_0,
        X_I_we1 => grp_fft_streaming_fu_368_X_I_we1,
        OUT_R_address0 => grp_fft_streaming_fu_368_OUT_R_address0,
        OUT_R_ce0 => grp_fft_streaming_fu_368_OUT_R_ce0,
        OUT_R_d0 => grp_fft_streaming_fu_368_OUT_R_d0,
        OUT_R_q0 => ap_const_lv32_0,
        OUT_R_we0 => grp_fft_streaming_fu_368_OUT_R_we0,
        OUT_R_address1 => grp_fft_streaming_fu_368_OUT_R_address1,
        OUT_R_ce1 => grp_fft_streaming_fu_368_OUT_R_ce1,
        OUT_R_d1 => grp_fft_streaming_fu_368_OUT_R_d1,
        OUT_R_q1 => ap_const_lv32_0,
        OUT_R_we1 => grp_fft_streaming_fu_368_OUT_R_we1,
        OUT_I_address0 => grp_fft_streaming_fu_368_OUT_I_address0,
        OUT_I_ce0 => grp_fft_streaming_fu_368_OUT_I_ce0,
        OUT_I_d0 => grp_fft_streaming_fu_368_OUT_I_d0,
        OUT_I_q0 => ap_const_lv32_0,
        OUT_I_we0 => grp_fft_streaming_fu_368_OUT_I_we0,
        OUT_I_address1 => grp_fft_streaming_fu_368_OUT_I_address1,
        OUT_I_ce1 => grp_fft_streaming_fu_368_OUT_I_ce1,
        OUT_I_d1 => grp_fft_streaming_fu_368_OUT_I_d1,
        OUT_I_q1 => ap_const_lv32_0,
        OUT_I_we1 => grp_fft_streaming_fu_368_OUT_I_we1,
        ap_start => grp_fft_streaming_fu_368_ap_start,
        ap_done => grp_fft_streaming_fu_368_ap_done,
        ap_ready => grp_fft_streaming_fu_368_ap_ready,
        ap_idle => grp_fft_streaming_fu_368_ap_idle,
        ap_continue => grp_fft_streaming_fu_368_ap_continue);





    P_sm_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = P_sm_data_1_ack_out) and (ap_const_logic_1 = P_sm_data_1_vld_out))) then 
                                        P_sm_data_1_sel_rd <= not(P_sm_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    P_sm_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = P_sm_data_1_ack_in) and (ap_const_logic_1 = P_sm_data_1_vld_in))) then 
                                        P_sm_data_1_sel_wr <= not(P_sm_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    P_sm_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = P_sm_data_1_vld_in) and (ap_const_lv2_2 = P_sm_data_1_state)) or ((ap_const_logic_0 = P_sm_data_1_vld_in) and (ap_const_logic_1 = P_sm_data_1_ack_out) and (ap_const_lv2_3 = P_sm_data_1_state)))) then 
                    P_sm_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_1 = P_sm_data_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_logic_1 = P_sm_data_1_vld_in) and (ap_const_lv2_3 = P_sm_data_1_state)))) then 
                    P_sm_data_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = P_sm_data_1_vld_in) and (ap_const_logic_1 = P_sm_data_1_ack_out))) and not(((ap_const_logic_0 = P_sm_TREADY) and (ap_const_logic_1 = P_sm_data_1_vld_in))) and (ap_const_lv2_3 = P_sm_data_1_state)) or ((ap_const_logic_1 = P_sm_data_1_ack_out) and (ap_const_lv2_1 = P_sm_data_1_state)) or ((ap_const_logic_1 = P_sm_data_1_vld_in) and (ap_const_lv2_2 = P_sm_data_1_state)))) then 
                    P_sm_data_1_state <= ap_const_lv2_3;
                else 
                    P_sm_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    P_sm_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = P_sm_last_V_1_ack_out) and (ap_const_logic_1 = P_sm_last_V_1_vld_out))) then 
                                        P_sm_last_V_1_sel_rd <= not(P_sm_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    P_sm_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = P_sm_last_V_1_ack_in) and (ap_const_logic_1 = P_sm_last_V_1_vld_in))) then 
                                        P_sm_last_V_1_sel_wr <= not(P_sm_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    P_sm_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = P_sm_last_V_1_vld_in) and (ap_const_lv2_2 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_last_V_1_vld_in) and (ap_const_logic_1 = P_sm_last_V_1_ack_out) and (ap_const_lv2_3 = P_sm_last_V_1_state)))) then 
                    P_sm_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_1 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_logic_1 = P_sm_last_V_1_vld_in) and (ap_const_lv2_3 = P_sm_last_V_1_state)))) then 
                    P_sm_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = P_sm_last_V_1_vld_in) and (ap_const_logic_1 = P_sm_last_V_1_ack_out))) and not(((ap_const_logic_0 = P_sm_TREADY) and (ap_const_logic_1 = P_sm_last_V_1_vld_in))) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_1 = P_sm_last_V_1_ack_out) and (ap_const_lv2_1 = P_sm_last_V_1_state)) or ((ap_const_logic_1 = P_sm_last_V_1_vld_in) and (ap_const_lv2_2 = P_sm_last_V_1_state)))) then 
                    P_sm_last_V_1_state <= ap_const_lv2_3;
                else 
                    P_sm_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    P_sm_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = P_sm_user_V_1_ack_out) and (ap_const_logic_1 = P_sm_user_V_1_vld_out))) then 
                                        P_sm_user_V_1_sel_rd <= not(P_sm_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    P_sm_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = P_sm_user_V_1_ack_in) and (ap_const_logic_1 = P_sm_user_V_1_vld_in))) then 
                                        P_sm_user_V_1_sel_wr <= not(P_sm_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    P_sm_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                P_sm_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = P_sm_user_V_1_vld_in) and (ap_const_lv2_2 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_user_V_1_vld_in) and (ap_const_logic_1 = P_sm_user_V_1_ack_out) and (ap_const_lv2_3 = P_sm_user_V_1_state)))) then 
                    P_sm_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_1 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_logic_1 = P_sm_user_V_1_vld_in) and (ap_const_lv2_3 = P_sm_user_V_1_state)))) then 
                    P_sm_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = P_sm_user_V_1_vld_in) and (ap_const_logic_1 = P_sm_user_V_1_ack_out))) and not(((ap_const_logic_0 = P_sm_TREADY) and (ap_const_logic_1 = P_sm_user_V_1_vld_in))) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_1 = P_sm_user_V_1_ack_out) and (ap_const_lv2_1 = P_sm_user_V_1_state)) or ((ap_const_logic_1 = P_sm_user_V_1_vld_in) and (ap_const_lv2_2 = P_sm_user_V_1_state)))) then 
                    P_sm_user_V_1_state <= ap_const_lv2_3;
                else 
                    P_sm_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft_streaming_fu_368_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_fft_streaming_fu_368_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_sync_reg_grp_fft_streaming_fu_368_ap_done <= ap_const_logic_0;
                elsif ((grp_fft_streaming_fu_368_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft_streaming_fu_368_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft_streaming_fu_368_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_fft_streaming_fu_368_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_sync_reg_grp_fft_streaming_fu_368_ap_ready <= ap_const_logic_0;
                elsif ((grp_fft_streaming_fu_368_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft_streaming_fu_368_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_streaming_fu_368_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fft_streaming_fu_368_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_fft_streaming_fu_368_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln305_fu_480_p2 = ap_const_lv1_1)))) then 
                    grp_fft_streaming_fu_368_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_streaming_fu_368_ap_ready = ap_const_logic_1)) then 
                    grp_fft_streaming_fu_368_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j24_0_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                j24_0_reg_346 <= j_1_reg_712;
            elsif (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j24_0_reg_346 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln304_fu_460_p2 = ap_const_lv1_0))) then 
                j_0_reg_334 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_0_reg_334 <= j_reg_688;
            end if; 
        end if;
    end process;

    l_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln304_fu_460_p2 = ap_const_lv1_1))) then 
                l_0_reg_312 <= l_reg_660;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l_0_reg_312 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    n_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln310_fu_543_p2 = ap_const_lv1_1))) then 
                n_0_reg_323 <= n_reg_674;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln303_fu_440_p2 = ap_const_lv1_0))) then 
                n_0_reg_323 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_06_rec_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln303_fu_440_p2 = ap_const_lv1_1))) then 
                p_06_rec_reg_357 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_logic_1 = P_sm_data_1_ack_in))) then 
                p_06_rec_reg_357 <= i_reg_762;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                FFT_out_im_load_reg_748 <= FFT_out_im_q0;
                FFT_out_re_load_reg_737 <= FFT_out_re_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = P_sm_data_1_load_A)) then
                P_sm_data_1_payload_A <= temp_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = P_sm_data_1_load_B)) then
                P_sm_data_1_payload_B <= temp_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = P_sm_last_V_1_load_A)) then
                P_sm_last_V_1_payload_A <= icmp_ln385_reg_777;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = P_sm_last_V_1_load_B)) then
                P_sm_last_V_1_payload_B <= icmp_ln385_reg_777;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = P_sm_user_V_1_load_A)) then
                P_sm_user_V_1_payload_A <= icmp_ln384_reg_772;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = P_sm_user_V_1_load_B)) then
                P_sm_user_V_1_payload_B <= icmp_ln384_reg_772;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln305_fu_480_p2 = ap_const_lv1_0))) then
                add_ln306_2_reg_693 <= add_ln306_2_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln310_fu_543_p2 = ap_const_lv1_0))) then
                add_ln311_2_reg_722 <= add_ln311_2_fu_587_p2;
                add_ln312_reg_727 <= add_ln312_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                data_addr_read_reg_704 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_lv2_1 = P_sm_last_V_1_state) or (ap_const_lv2_1 = P_sm_user_V_1_state) or (ap_const_lv2_1 = P_sm_data_1_state) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_data_1_state)))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                i_reg_762 <= i_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_lv2_1 = P_sm_last_V_1_state) or (ap_const_lv2_1 = P_sm_user_V_1_state) or (ap_const_lv2_1 = P_sm_data_1_state) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_data_1_state)))) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln382_fu_617_p2 = ap_const_lv1_0))) then
                icmp_ln384_reg_772 <= icmp_ln384_fu_634_p2;
                icmp_ln385_reg_777 <= icmp_ln385_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_1_reg_712 <= j_1_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_688 <= j_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                l_reg_660 <= l_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_reg_674 <= n_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    p_cast6_reg_646(29 downto 0) <= p_cast6_fu_422_p1(29 downto 0);
                    p_cast_reg_651(29 downto 0) <= p_cast_fu_436_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln303_fu_440_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_665(13 downto 10) <= shl_ln_fu_452_p3(13 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln304_fu_460_p2 = ap_const_lv1_0))) then
                    zext_ln305_1_reg_679(2 downto 0) <= zext_ln305_1_fu_472_p1(2 downto 0);
            end if;
        end if;
    end process;
    p_cast6_reg_646(30) <= '0';
    p_cast_reg_651(30) <= '0';
    shl_ln_reg_665(9 downto 0) <= "0000000000";
    zext_ln305_1_reg_679(16 downto 3) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, P_sm_TREADY, P_sm_data_1_ack_in, P_sm_data_1_state, P_sm_user_V_1_state, P_sm_last_V_1_state, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state26, data_AWREADY, data_WREADY, data_ARREADY, data_RVALID, data_BVALID, ap_CS_fsm_state2, icmp_ln303_fu_440_p2, ap_CS_fsm_state3, icmp_ln304_fu_460_p2, ap_CS_fsm_state4, icmp_ln305_fu_480_p2, ap_CS_fsm_state15, icmp_ln310_fu_543_p2, ap_block_state17_io, ap_CS_fsm_state24, icmp_ln382_fu_617_p2, ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln303_fu_440_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln304_fu_460_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln305_fu_480_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln310_fu_543_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((data_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if ((not(((ap_const_lv2_1 = P_sm_last_V_1_state) or (ap_const_lv2_1 = P_sm_user_V_1_state) or (ap_const_lv2_1 = P_sm_data_1_state) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_data_1_state)))) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln382_fu_617_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_lv2_1 = P_sm_last_V_1_state) or (ap_const_lv2_1 = P_sm_user_V_1_state) or (ap_const_lv2_1 = P_sm_data_1_state) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_data_1_state)))) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln382_fu_617_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_logic_1 = P_sm_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_logic_1 = P_sm_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    FFT_Buffer_im_address0_assign_proc : process(grp_fft_streaming_fu_368_X_I_address0, ap_CS_fsm_state13, ap_CS_fsm_state14, zext_ln306_2_fu_533_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FFT_Buffer_im_address0 <= zext_ln306_2_fu_533_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_Buffer_im_address0 <= grp_fft_streaming_fu_368_X_I_address0;
        else 
            FFT_Buffer_im_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    FFT_Buffer_im_ce0_assign_proc : process(grp_fft_streaming_fu_368_X_I_ce0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FFT_Buffer_im_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_Buffer_im_ce0 <= grp_fft_streaming_fu_368_X_I_ce0;
        else 
            FFT_Buffer_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_Buffer_im_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FFT_Buffer_im_we0 <= ap_const_logic_1;
        else 
            FFT_Buffer_im_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_Buffer_re_address0_assign_proc : process(grp_fft_streaming_fu_368_X_R_address0, ap_CS_fsm_state13, ap_CS_fsm_state14, zext_ln306_2_fu_533_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FFT_Buffer_re_address0 <= zext_ln306_2_fu_533_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_Buffer_re_address0 <= grp_fft_streaming_fu_368_X_R_address0;
        else 
            FFT_Buffer_re_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    FFT_Buffer_re_ce0_assign_proc : process(grp_fft_streaming_fu_368_X_R_ce0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FFT_Buffer_re_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_Buffer_re_ce0 <= grp_fft_streaming_fu_368_X_R_ce0;
        else 
            FFT_Buffer_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_Buffer_re_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FFT_Buffer_re_we0 <= ap_const_logic_1;
        else 
            FFT_Buffer_re_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_out_im_address0_assign_proc : process(ap_CS_fsm_state15, grp_fft_streaming_fu_368_OUT_I_address0, ap_CS_fsm_state14, zext_ln311_fu_555_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FFT_out_im_address0 <= zext_ln311_fu_555_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_im_address0 <= grp_fft_streaming_fu_368_OUT_I_address0;
        else 
            FFT_out_im_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    FFT_out_im_ce0_assign_proc : process(ap_CS_fsm_state15, grp_fft_streaming_fu_368_OUT_I_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FFT_out_im_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_im_ce0 <= grp_fft_streaming_fu_368_OUT_I_ce0;
        else 
            FFT_out_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_out_im_ce1_assign_proc : process(grp_fft_streaming_fu_368_OUT_I_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_im_ce1 <= grp_fft_streaming_fu_368_OUT_I_ce1;
        else 
            FFT_out_im_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_out_im_we0_assign_proc : process(grp_fft_streaming_fu_368_OUT_I_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_im_we0 <= grp_fft_streaming_fu_368_OUT_I_we0;
        else 
            FFT_out_im_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_out_im_we1_assign_proc : process(grp_fft_streaming_fu_368_OUT_I_we1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_im_we1 <= grp_fft_streaming_fu_368_OUT_I_we1;
        else 
            FFT_out_im_we1 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_out_re_address0_assign_proc : process(ap_CS_fsm_state15, grp_fft_streaming_fu_368_OUT_R_address0, ap_CS_fsm_state14, zext_ln311_fu_555_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FFT_out_re_address0 <= zext_ln311_fu_555_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_re_address0 <= grp_fft_streaming_fu_368_OUT_R_address0;
        else 
            FFT_out_re_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    FFT_out_re_ce0_assign_proc : process(ap_CS_fsm_state15, grp_fft_streaming_fu_368_OUT_R_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FFT_out_re_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_re_ce0 <= grp_fft_streaming_fu_368_OUT_R_ce0;
        else 
            FFT_out_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_out_re_ce1_assign_proc : process(grp_fft_streaming_fu_368_OUT_R_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_re_ce1 <= grp_fft_streaming_fu_368_OUT_R_ce1;
        else 
            FFT_out_re_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_out_re_we0_assign_proc : process(grp_fft_streaming_fu_368_OUT_R_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_re_we0 <= grp_fft_streaming_fu_368_OUT_R_we0;
        else 
            FFT_out_re_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_out_re_we1_assign_proc : process(grp_fft_streaming_fu_368_OUT_R_we1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            FFT_out_re_we1 <= grp_fft_streaming_fu_368_OUT_R_we1;
        else 
            FFT_out_re_we1 <= ap_const_logic_0;
        end if; 
    end process;

    P_sm_TDATA <= P_sm_data_1_data_out;

    P_sm_TDATA_blk_n_assign_proc : process(P_sm_data_1_state, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            P_sm_TDATA_blk_n <= P_sm_data_1_state(1);
        else 
            P_sm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    P_sm_TLAST <= P_sm_last_V_1_data_out;
    P_sm_TUSER <= P_sm_user_V_1_data_out;
    P_sm_TVALID <= P_sm_last_V_1_state(0);
    P_sm_data_1_ack_in <= P_sm_data_1_state(1);
    P_sm_data_1_ack_out <= P_sm_TREADY;

    P_sm_data_1_data_out_assign_proc : process(P_sm_data_1_payload_A, P_sm_data_1_payload_B, P_sm_data_1_sel)
    begin
        if ((ap_const_logic_1 = P_sm_data_1_sel)) then 
            P_sm_data_1_data_out <= P_sm_data_1_payload_B;
        else 
            P_sm_data_1_data_out <= P_sm_data_1_payload_A;
        end if; 
    end process;

    P_sm_data_1_load_A <= (not(P_sm_data_1_sel_wr) and P_sm_data_1_state_cmp_full);
    P_sm_data_1_load_B <= (P_sm_data_1_state_cmp_full and P_sm_data_1_sel_wr);
    P_sm_data_1_sel <= P_sm_data_1_sel_rd;
    P_sm_data_1_state_cmp_full <= '0' when (P_sm_data_1_state = ap_const_lv2_1) else '1';

    P_sm_data_1_vld_in_assign_proc : process(P_sm_data_1_ack_in, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_logic_1 = P_sm_data_1_ack_in))) then 
            P_sm_data_1_vld_in <= ap_const_logic_1;
        else 
            P_sm_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    P_sm_data_1_vld_out <= P_sm_data_1_state(0);
    P_sm_last_V_1_ack_in <= P_sm_last_V_1_state(1);
    P_sm_last_V_1_ack_out <= P_sm_TREADY;

    P_sm_last_V_1_data_out_assign_proc : process(P_sm_last_V_1_payload_A, P_sm_last_V_1_payload_B, P_sm_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = P_sm_last_V_1_sel)) then 
            P_sm_last_V_1_data_out <= P_sm_last_V_1_payload_B;
        else 
            P_sm_last_V_1_data_out <= P_sm_last_V_1_payload_A;
        end if; 
    end process;

    P_sm_last_V_1_load_A <= (not(P_sm_last_V_1_sel_wr) and P_sm_last_V_1_state_cmp_full);
    P_sm_last_V_1_load_B <= (P_sm_last_V_1_state_cmp_full and P_sm_last_V_1_sel_wr);
    P_sm_last_V_1_sel <= P_sm_last_V_1_sel_rd;
    P_sm_last_V_1_state_cmp_full <= '0' when (P_sm_last_V_1_state = ap_const_lv2_1) else '1';

    P_sm_last_V_1_vld_in_assign_proc : process(P_sm_data_1_ack_in, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_logic_1 = P_sm_data_1_ack_in))) then 
            P_sm_last_V_1_vld_in <= ap_const_logic_1;
        else 
            P_sm_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    P_sm_last_V_1_vld_out <= P_sm_last_V_1_state(0);
    P_sm_user_V_1_ack_in <= P_sm_user_V_1_state(1);
    P_sm_user_V_1_ack_out <= P_sm_TREADY;

    P_sm_user_V_1_data_out_assign_proc : process(P_sm_user_V_1_payload_A, P_sm_user_V_1_payload_B, P_sm_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = P_sm_user_V_1_sel)) then 
            P_sm_user_V_1_data_out <= P_sm_user_V_1_payload_B;
        else 
            P_sm_user_V_1_data_out <= P_sm_user_V_1_payload_A;
        end if; 
    end process;

    P_sm_user_V_1_load_A <= (not(P_sm_user_V_1_sel_wr) and P_sm_user_V_1_state_cmp_full);
    P_sm_user_V_1_load_B <= (P_sm_user_V_1_state_cmp_full and P_sm_user_V_1_sel_wr);
    P_sm_user_V_1_sel <= P_sm_user_V_1_sel_rd;
    P_sm_user_V_1_state_cmp_full <= '0' when (P_sm_user_V_1_state = ap_const_lv2_1) else '1';

    P_sm_user_V_1_vld_in_assign_proc : process(P_sm_data_1_ack_in, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_logic_1 = P_sm_data_1_ack_in))) then 
            P_sm_user_V_1_vld_in <= ap_const_logic_1;
        else 
            P_sm_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    P_sm_user_V_1_vld_out <= P_sm_user_V_1_state(0);
    add_ln306_1_fu_509_p2 <= std_logic_vector(unsigned(zext_ln305_1_reg_679) + unsigned(zext_ln306_fu_505_p1));
    add_ln306_2_fu_518_p2 <= std_logic_vector(unsigned(zext_ln306_1_fu_514_p1) + unsigned(p_cast_reg_651));
    add_ln306_fu_492_p2 <= std_logic_vector(unsigned(shl_ln_reg_665) + unsigned(zext_ln305_fu_476_p1));
    add_ln311_1_fu_578_p2 <= std_logic_vector(unsigned(zext_ln305_1_reg_679) + unsigned(zext_ln311_1_fu_574_p1));
    add_ln311_2_fu_587_p2 <= std_logic_vector(unsigned(zext_ln311_2_fu_583_p1) + unsigned(p_cast_reg_651));
    add_ln311_fu_561_p2 <= std_logic_vector(unsigned(shl_ln_reg_665) + unsigned(zext_ln310_fu_539_p1));
    add_ln312_fu_592_p2 <= std_logic_vector(unsigned(zext_ln311_2_fu_583_p1) + unsigned(p_cast6_reg_646));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state14_on_subcall_done_assign_proc : process(ap_sync_grp_fft_streaming_fu_368_ap_ready, ap_sync_grp_fft_streaming_fu_368_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((ap_sync_grp_fft_streaming_fu_368_ap_ready and ap_sync_grp_fft_streaming_fu_368_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state17_io_assign_proc : process(data_AWREADY, data_WREADY)
    begin
                ap_block_state17_io <= ((data_WREADY = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state24_assign_proc : process(P_sm_TREADY, P_sm_data_1_state, P_sm_user_V_1_state, P_sm_last_V_1_state)
    begin
                ap_block_state24 <= ((ap_const_lv2_1 = P_sm_last_V_1_state) or (ap_const_lv2_1 = P_sm_user_V_1_state) or (ap_const_lv2_1 = P_sm_data_1_state) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_data_1_state)));
    end process;


    ap_done_assign_proc : process(P_sm_TREADY, P_sm_data_1_state, P_sm_user_V_1_state, P_sm_last_V_1_state, ap_CS_fsm_state24, icmp_ln382_fu_617_p2)
    begin
        if ((not(((ap_const_lv2_1 = P_sm_last_V_1_state) or (ap_const_lv2_1 = P_sm_user_V_1_state) or (ap_const_lv2_1 = P_sm_data_1_state) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_data_1_state)))) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln382_fu_617_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(P_sm_TREADY, P_sm_data_1_state, P_sm_user_V_1_state, P_sm_last_V_1_state, ap_CS_fsm_state24, icmp_ln382_fu_617_p2)
    begin
        if ((not(((ap_const_lv2_1 = P_sm_last_V_1_state) or (ap_const_lv2_1 = P_sm_user_V_1_state) or (ap_const_lv2_1 = P_sm_data_1_state) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_data_1_state)))) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln382_fu_617_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_fft_streaming_fu_368_ap_done <= (grp_fft_streaming_fu_368_ap_done or ap_sync_reg_grp_fft_streaming_fu_368_ap_done);
    ap_sync_grp_fft_streaming_fu_368_ap_ready <= (grp_fft_streaming_fu_368_ap_ready or ap_sync_reg_grp_fft_streaming_fu_368_ap_ready);
    data_ARADDR <= zext_ln306_3_fu_523_p1(32 - 1 downto 0);

    data_ARVALID_assign_proc : process(ap_CS_fsm_state5, data_ARREADY)
    begin
        if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_ARVALID <= ap_const_logic_1;
        else 
            data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_AWADDR_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, data_AWREADY, ap_block_state17_io, zext_ln311_3_fu_597_p1, zext_ln312_fu_607_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            data_AWADDR <= zext_ln312_fu_607_p1(32 - 1 downto 0);
        elsif (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            data_AWADDR <= zext_ln311_3_fu_597_p1(32 - 1 downto 0);
        else 
            data_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_AWVALID_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, data_AWREADY, ap_block_state17_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            data_AWVALID <= ap_const_logic_1;
        else 
            data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_BREADY_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, data_BVALID)
    begin
        if ((((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            data_BREADY <= ap_const_logic_1;
        else 
            data_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_RREADY_assign_proc : process(ap_CS_fsm_state12, data_RVALID)
    begin
        if (((data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            data_RREADY <= ap_const_logic_1;
        else 
            data_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_WDATA_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, FFT_out_re_load_reg_737, FFT_out_im_load_reg_748)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            data_WDATA <= FFT_out_im_load_reg_748;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_WDATA <= FFT_out_re_load_reg_737;
        else 
            data_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_WVALID_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, data_WREADY, ap_block_state17_io)
    begin
        if ((((data_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            data_WVALID <= ap_const_logic_1;
        else 
            data_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_AR_assign_proc : process(m_axi_data_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_blk_n_AR <= m_axi_data_ARREADY;
        else 
            data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_AW_assign_proc : process(m_axi_data_AWREADY, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            data_blk_n_AW <= m_axi_data_AWREADY;
        else 
            data_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_B_assign_proc : process(m_axi_data_BVALID, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            data_blk_n_B <= m_axi_data_BVALID;
        else 
            data_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_R_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_blk_n_R <= m_axi_data_RVALID;
        else 
            data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_W_assign_proc : process(m_axi_data_WREADY, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            data_blk_n_W <= m_axi_data_WREADY;
        else 
            data_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fft_streaming_fu_368_ap_continue_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fft_streaming_fu_368_ap_continue <= ap_const_logic_1;
        else 
            grp_fft_streaming_fu_368_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft_streaming_fu_368_ap_start <= grp_fft_streaming_fu_368_ap_start_reg;
    i_fu_623_p2 <= std_logic_vector(unsigned(p_06_rec_reg_357) + unsigned(ap_const_lv9_1));
    icmp_ln303_fu_440_p2 <= "1" when (l_0_reg_312 = ap_const_lv4_A) else "0";
    icmp_ln304_fu_460_p2 <= "1" when (n_0_reg_323 = ap_const_lv3_4) else "0";
    icmp_ln305_fu_480_p2 <= "1" when (j_0_reg_334 = ap_const_lv11_400) else "0";
    icmp_ln310_fu_543_p2 <= "1" when (j24_0_reg_346 = ap_const_lv11_400) else "0";
    icmp_ln382_fu_617_p2 <= "1" when (p_06_rec_reg_357 = ap_const_lv9_169) else "0";
    icmp_ln384_fu_634_p2 <= "1" when (p_06_rec_reg_357 = ap_const_lv9_0) else "0";
    icmp_ln385_fu_640_p2 <= "1" when (p_06_rec_reg_357 = ap_const_lv9_168) else "0";
    j_1_fu_549_p2 <= std_logic_vector(unsigned(j24_0_reg_346) + unsigned(ap_const_lv11_1));
    j_fu_486_p2 <= std_logic_vector(unsigned(j_0_reg_334) + unsigned(ap_const_lv11_1));
    l_fu_446_p2 <= std_logic_vector(unsigned(l_0_reg_312) + unsigned(ap_const_lv4_1));
    n_fu_466_p2 <= std_logic_vector(unsigned(n_0_reg_323) + unsigned(ap_const_lv3_1));
    p_cast6_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_412_p4),31));
    p_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_426_p4),31));
    shl_ln_fu_452_p3 <= (l_0_reg_312 & ap_const_lv10_0);
    temp_array_address0 <= zext_ln383_fu_629_p1(9 - 1 downto 0);

    temp_array_ce0_assign_proc : process(P_sm_TREADY, P_sm_data_1_state, P_sm_user_V_1_state, P_sm_last_V_1_state, ap_CS_fsm_state24)
    begin
        if ((not(((ap_const_lv2_1 = P_sm_last_V_1_state) or (ap_const_lv2_1 = P_sm_user_V_1_state) or (ap_const_lv2_1 = P_sm_data_1_state) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_last_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_user_V_1_state)) or ((ap_const_logic_0 = P_sm_TREADY) and (ap_const_lv2_3 = P_sm_data_1_state)))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            temp_array_ce0 <= ap_const_logic_1;
        else 
            temp_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_566_p3 <= (add_ln311_fu_561_p2 & ap_const_lv2_0);
    tmp_2_fu_412_p4 <= data_im(31 downto 2);
    tmp_3_fu_426_p4 <= data_re(31 downto 2);
    tmp_fu_497_p3 <= (add_ln306_fu_492_p2 & ap_const_lv2_0);
    zext_ln305_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_323),17));
    zext_ln305_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_334),14));
    zext_ln306_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln306_1_fu_509_p2),31));
    zext_ln306_2_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_334),64));
    zext_ln306_3_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln306_2_reg_693),64));
    zext_ln306_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_497_p3),17));
    zext_ln310_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j24_0_reg_346),14));
    zext_ln311_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_566_p3),17));
    zext_ln311_2_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln311_1_fu_578_p2),31));
    zext_ln311_3_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln311_2_reg_722),64));
    zext_ln311_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j24_0_reg_346),64));
    zext_ln312_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln312_reg_727),64));
    zext_ln383_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_06_rec_reg_357),64));
end behav;
