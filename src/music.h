#ifndef __MUSIC_H__
#define __MUSIC_H__

#include <iostream>
#include <cstring>
#include <cmath>
#include "hls/linear_algebra/hls_qrf.h"

#define FS 16000
#define N_SENSOR 4
#define SEN_DIST 0.25
#define N_SOURCE 2
#define VELOCITY 340
#define N_SAMPLE 10240
#define N_STFT 10
#define N_FREQ 1024
#define PIE 3.141592654
#define PIE_DEG 0.01745329252

#define M 10 			/* Number of Stages = Log2N */
#define SIZE 1024 		/* SIZE OF FFT */
#define SIZE2 SIZE>>1	/* SIZE/2 */

using namespace std;

typedef complex<float> complex_float;
struct QRF_CONFIG : hls::qrf_traits<N_SENSOR, N_SENSOR, complex_float, complex_float>{
	static const int ARCH          = 0; // Select implementation. 0=Basic. 1=Lower latency/thoughput architecture.
	static const int CALC_ROT_II   = 8; // Specify the rotation calculation loop target II of the QRF_ALT architecture(1)
	static const int UPDATE_II     = 8; // Specify the pipelining target for the Q & R update loops
	static const int UNROLL_FACTOR = 8; // Specify the unrolling factor for Q & R update loops of the QRF_ALT architecture(1)
};

// top function
void music(
	float X[N_SAMPLE][N_SENSOR],	// input signal
	complex_float Xj_f[N_FREQ][N_STFT][N_SENSOR],
	float P_sm[361]					// Spatial spectrum
//	float align_out					// Output aligned signal
);

// sort eigenvalues of autocorrelation matrix Rx
void sort_eigval(
		float eigval[N_SENSOR],		// input: eigenvalues
		int sort_index[N_SENSOR]	// output: sorted index
);

// autocorrelation computing
void Autocorrelation(
		complex_float X[N_STFT][N_SENSOR],		// input: frequency domain signal
		complex_float Rx[N_SENSOR][N_SENSOR]	// output: autocorrelation matrix
);

// eigenvalues and eigenmatrix computing
void eig_decompose(
		complex_float Rx[N_SENSOR][N_SENSOR],	// input: autocorrelation matrix
		complex_float U[N_SENSOR][N_SENSOR],	// output: eigenmatrix
		float eigval[N_SENSOR]				// output: eigenvalues
);

// fast fourier transform
void fft(float X_R[N_FREQ], float X_I[N_FREQ]);

void qr_decompose(
		complex_float A[N_SENSOR][N_SENSOR],
		complex_float Q[N_SENSOR][N_SENSOR],
		complex_float R[N_SENSOR][N_SENSOR]
);

unsigned int reverse_bits(unsigned int input);// used in FFT

void bit_reverse(float X_R[N_FREQ], float X_I[N_FREQ]);//  used in FFT

const float p[N_SENSOR] = {-0.375, -0.125, 0.125, 0.375};

const float fc[N_FREQ] =
{
		0,15.625,31.25,46.875,62.5,78.125,93.75,109.375,125,140.625,156.25,171.875,187.5,203.125,218.75,234.375,250,
		265.625,281.25,296.875,312.5,328.125,343.75,359.375,375,390.625,406.25,421.875,437.5,453.125,468.75,484.375,500,
		515.625,531.25,546.875,562.5,578.125,593.75,609.375,625,640.625,656.25,671.875,687.5,703.125,718.75,734.375,750,
		765.625,781.25,796.875,812.5,828.125,843.75,859.375,875,890.625,906.25,921.875,937.5,953.125,968.75,984.375,1000,
		1015.62,1031.25,1046.88,1062.5,1078.12,1093.75,1109.38,1125,1140.62,1156.25,1171.88,1187.5,1203.12,1218.75,1234.38,1250,
		1265.62,1281.25,1296.88,1312.5,1328.12,1343.75,1359.38,1375,1390.62,1406.25,1421.88,1437.5,1453.12,1468.75,1484.38,1500,
		1515.62,1531.25,1546.88,1562.5,1578.12,1593.75,1609.38,1625,1640.62,1656.25,1671.88,1687.5,1703.12,1718.75,1734.38,1750,
		1765.62,1781.25,1796.88,1812.5,1828.12,1843.75,1859.38,1875,1890.62,1906.25,1921.88,1937.5,1953.12,1968.75,1984.38,2000,
		2015.62,2031.25,2046.88,2062.5,2078.12,2093.75,2109.38,2125,2140.62,2156.25,2171.88,2187.5,2203.12,2218.75,2234.38,2250,
		2265.62,2281.25,2296.88,2312.5,2328.12,2343.75,2359.38,2375,2390.62,2406.25,2421.88,2437.5,2453.12,2468.75,2484.38,2500,
		2515.62,2531.25,2546.88,2562.5,2578.12,2593.75,2609.38,2625,2640.62,2656.25,2671.88,2687.5,2703.12,2718.75,2734.38,2750,
		2765.62,2781.25,2796.88,2812.5,2828.12,2843.75,2859.38,2875,2890.62,2906.25,2921.88,2937.5,2953.12,2968.75,2984.38,3000,
		3015.62,3031.25,3046.88,3062.5,3078.12,3093.75,3109.38,3125,3140.62,3156.25,3171.88,3187.5,3203.12,3218.75,3234.38,3250,
		3265.62,3281.25,3296.88,3312.5,3328.12,3343.75,3359.38,3375,3390.62,3406.25,3421.88,3437.5,3453.12,3468.75,3484.38,3500,
		3515.62,3531.25,3546.88,3562.5,3578.12,3593.75,3609.38,3625,3640.62,3656.25,3671.88,3687.5,3703.12,3718.75,3734.38,3750,
		3765.62,3781.25,3796.88,3812.5,3828.12,3843.75,3859.38,3875,3890.62,3906.25,3921.88,3937.5,3953.12,3968.75,3984.38,4000,
		4015.62,4031.25,4046.88,4062.5,4078.12,4093.75,4109.38,4125,4140.62,4156.25,4171.88,4187.5,4203.12,4218.75,4234.38,4250,
		4265.62,4281.25,4296.88,4312.5,4328.12,4343.75,4359.38,4375,4390.62,4406.25,4421.88,4437.5,4453.12,4468.75,4484.38,4500,
		4515.62,4531.25,4546.88,4562.5,4578.12,4593.75,4609.38,4625,4640.62,4656.25,4671.88,4687.5,4703.12,4718.75,4734.38,4750,
		4765.62,4781.25,4796.88,4812.5,4828.12,4843.75,4859.38,4875,4890.62,4906.25,4921.88,4937.5,4953.12,4968.75,4984.38,5000,
		5015.62,5031.25,5046.88,5062.5,5078.12,5093.75,5109.38,5125,5140.62,5156.25,5171.88,5187.5,5203.12,5218.75,5234.38,5250,
		5265.62,5281.25,5296.88,5312.5,5328.12,5343.75,5359.38,5375,5390.62,5406.25,5421.88,5437.5,5453.12,5468.75,5484.38,5500,
		5515.62,5531.25,5546.88,5562.5,5578.12,5593.75,5609.38,5625,5640.62,5656.25,5671.88,5687.5,5703.12,5718.75,5734.38,5750,
		5765.62,5781.25,5796.88,5812.5,5828.12,5843.75,5859.38,5875,5890.62,5906.25,5921.88,5937.5,5953.12,5968.75,5984.38,6000,
		6015.62,6031.25,6046.88,6062.5,6078.12,6093.75,6109.38,6125,6140.62,6156.25,6171.88,6187.5,6203.12,6218.75,6234.38,6250,
		6265.62,6281.25,6296.88,6312.5,6328.12,6343.75,6359.38,6375,6390.62,6406.25,6421.88,6437.5,6453.12,6468.75,6484.38,6500,
		6515.62,6531.25,6546.88,6562.5,6578.12,6593.75,6609.38,6625,6640.62,6656.25,6671.88,6687.5,6703.12,6718.75,6734.38,6750,
		6765.62,6781.25,6796.88,6812.5,6828.12,6843.75,6859.38,6875,6890.62,6906.25,6921.88,6937.5,6953.12,6968.75,6984.38,7000,
		7015.62,7031.25,7046.88,7062.5,7078.12,7093.75,7109.38,7125,7140.62,7156.25,7171.88,7187.5,7203.12,7218.75,7234.38,7250,
		7265.62,7281.25,7296.88,7312.5,7328.12,7343.75,7359.38,7375,7390.62,7406.25,7421.88,7437.5,7453.12,7468.75,7484.38,7500,
		7515.62,7531.25,7546.88,7562.5,7578.12,7593.75,7609.38,7625,7640.62,7656.25,7671.88,7687.5,7703.12,7718.75,7734.38,7750,
		7765.62,7781.25,7796.88,7812.5,7828.12,7843.75,7859.38,7875,7890.62,7906.25,7921.88,7937.5,7953.12,7968.75,7984.38,-8000,
		-7984.38,-7968.75,-7953.12,-7937.5,-7921.88,-7906.25,-7890.62,-7875,-7859.38,-7843.75,-7828.12,-7812.5,-7796.88,-7781.25,-7765.62,-7750,
		-7734.38,-7718.75,-7703.12,-7687.5,-7671.88,-7656.25,-7640.62,-7625,-7609.38,-7593.75,-7578.12,-7562.5,-7546.88,-7531.25,-7515.62,-7500,
		-7484.38,-7468.75,-7453.12,-7437.5,-7421.88,-7406.25,-7390.62,-7375,-7359.38,-7343.75,-7328.12,-7312.5,-7296.88,-7281.25,-7265.62,-7250,
		-7234.38,-7218.75,-7203.12,-7187.5,-7171.88,-7156.25,-7140.62,-7125,-7109.38,-7093.75,-7078.12,-7062.5,-7046.88,-7031.25,-7015.62,-7000,
		-6984.38,-6968.75,-6953.12,-6937.5,-6921.88,-6906.25,-6890.62,-6875,-6859.38,-6843.75,-6828.12,-6812.5,-6796.88,-6781.25,-6765.62,-6750,
		-6734.38,-6718.75,-6703.12,-6687.5,-6671.88,-6656.25,-6640.62,-6625,-6609.38,-6593.75,-6578.12,-6562.5,-6546.88,-6531.25,-6515.62,-6500,
		-6484.38,-6468.75,-6453.12,-6437.5,-6421.88,-6406.25,-6390.62,-6375,-6359.38,-6343.75,-6328.12,-6312.5,-6296.88,-6281.25,-6265.62,-6250,
		-6234.38,-6218.75,-6203.12,-6187.5,-6171.88,-6156.25,-6140.62,-6125,-6109.38,-6093.75,-6078.12,-6062.5,-6046.88,-6031.25,-6015.62,-6000,
		-5984.38,-5968.75,-5953.12,-5937.5,-5921.88,-5906.25,-5890.62,-5875,-5859.38,-5843.75,-5828.12,-5812.5,-5796.88,-5781.25,-5765.62,-5750,
		-5734.38,-5718.75,-5703.12,-5687.5,-5671.88,-5656.25,-5640.62,-5625,-5609.38,-5593.75,-5578.12,-5562.5,-5546.88,-5531.25,-5515.62,-5500,
		-5484.38,-5468.75,-5453.12,-5437.5,-5421.88,-5406.25,-5390.62,-5375,-5359.38,-5343.75,-5328.12,-5312.5,-5296.88,-5281.25,-5265.62,-5250,
		-5234.38,-5218.75,-5203.12,-5187.5,-5171.88,-5156.25,-5140.62,-5125,-5109.38,-5093.75,-5078.12,-5062.5,-5046.88,-5031.25,-5015.62,-5000,
		-4984.38,-4968.75,-4953.12,-4937.5,-4921.88,-4906.25,-4890.62,-4875,-4859.38,-4843.75,-4828.12,-4812.5,-4796.88,-4781.25,-4765.62,-4750,
		-4734.38,-4718.75,-4703.12,-4687.5,-4671.88,-4656.25,-4640.62,-4625,-4609.38,-4593.75,-4578.12,-4562.5,-4546.88,-4531.25,-4515.62,-4500,
		-4484.38,-4468.75,-4453.12,-4437.5,-4421.88,-4406.25,-4390.62,-4375,-4359.38,-4343.75,-4328.12,-4312.5,-4296.88,-4281.25,-4265.62,-4250,
		-4234.38,-4218.75,-4203.12,-4187.5,-4171.88,-4156.25,-4140.62,-4125,-4109.38,-4093.75,-4078.12,-4062.5,-4046.88,-4031.25,-4015.62,-4000,
		-3984.38,-3968.75,-3953.12,-3937.5,-3921.88,-3906.25,-3890.62,-3875,-3859.38,-3843.75,-3828.12,-3812.5,-3796.88,-3781.25,-3765.62,-3750,
		-3734.38,-3718.75,-3703.12,-3687.5,-3671.88,-3656.25,-3640.62,-3625,-3609.38,-3593.75,-3578.12,-3562.5,-3546.88,-3531.25,-3515.62,-3500,
		-3484.38,-3468.75,-3453.12,-3437.5,-3421.88,-3406.25,-3390.62,-3375,-3359.38,-3343.75,-3328.12,-3312.5,-3296.88,-3281.25,-3265.62,-3250,
		-3234.38,-3218.75,-3203.12,-3187.5,-3171.88,-3156.25,-3140.62,-3125,-3109.38,-3093.75,-3078.12,-3062.5,-3046.88,-3031.25,-3015.62,-3000,
		-2984.38,-2968.75,-2953.12,-2937.5,-2921.88,-2906.25,-2890.62,-2875,-2859.38,-2843.75,-2828.12,-2812.5,-2796.88,-2781.25,-2765.62,-2750,
		-2734.38,-2718.75,-2703.12,-2687.5,-2671.88,-2656.25,-2640.62,-2625,-2609.38,-2593.75,-2578.12,-2562.5,-2546.88,-2531.25,-2515.62,-2500,
		-2484.38,-2468.75,-2453.12,-2437.5,-2421.88,-2406.25,-2390.62,-2375,-2359.38,-2343.75,-2328.12,-2312.5,-2296.88,-2281.25,-2265.62,-2250,
		-2234.38,-2218.75,-2203.12,-2187.5,-2171.88,-2156.25,-2140.62,-2125,-2109.38,-2093.75,-2078.12,-2062.5,-2046.88,-2031.25,-2015.62,-2000,
		-1984.38,-1968.75,-1953.12,-1937.5,-1921.88,-1906.25,-1890.62,-1875,-1859.38,-1843.75,-1828.12,-1812.5,-1796.88,-1781.25,-1765.62,-1750,
		-1734.38,-1718.75,-1703.12,-1687.5,-1671.88,-1656.25,-1640.62,-1625,-1609.38,-1593.75,-1578.12,-1562.5,-1546.88,-1531.25,-1515.62,-1500,
		-1484.38,-1468.75,-1453.12,-1437.5,-1421.88,-1406.25,-1390.62,-1375,-1359.38,-1343.75,-1328.12,-1312.5,-1296.88,-1281.25,-1265.62,-1250,
		-1234.38,-1218.75,-1203.12,-1187.5,-1171.88,-1156.25,-1140.62,-1125,-1109.38,-1093.75,-1078.12,-1062.5,-1046.88,-1031.25,-1015.62,-1000,
		-984.375,-968.75,-953.125,-937.5,-921.875,-906.25,-890.625,-875,-859.375,-843.75,-828.125,-812.5,-796.875,-781.25,-765.625,-750,
		-734.375,-718.75,-703.125,-687.5,-671.875,-656.25,-640.625,-625,-609.375,-593.75,-578.125,-562.5,-546.875,-531.25,-515.625,-500,
		-484.375,-468.75,-453.125,-437.5,-421.875,-406.25,-390.625,-375,-359.375,-343.75,-328.125,-312.5,-296.875,-281.25,-265.625,-250,
		-234.375,-218.75,-203.125,-187.5,-171.875,-156.25,-140.625,-125,-109.375,-93.75,-78.125,-62.5,-46.875,-31.25,-15.625
};

const float theta[361] =
{
	-90,-89.5,-89,-88.5,-88,-87.5,-87,-86.5,-86,-85.5,-85,-84.5,-84,-83.5,-83,-82.5,-82,-81.5,-81,-80.5,-80,-79.5,-79,-78.5,-78,-77.5,-77,-76.5,-76,-75.5,-75,-74.5,-74,
	-73.5,-73,-72.5,-72,-71.5,-71,-70.5,-70,-69.5,-69,-68.5,-68,-67.5,-67,-66.5,-66,-65.5,-65,-64.5,-64,-63.5,-63,-62.5,-62,-61.5,-61,-60.5,-60,-59.5,-59,-58.5,-58,
	-57.5,-57,-56.5,-56,-55.5,-55,-54.5,-54,-53.5,-53,-52.5,-52,-51.5,-51,-50.5,-50,-49.5,-49,-48.5,-48,-47.5,-47,-46.5,-46,-45.5,-45,-44.5,-44,-43.5,-43,-42.5,-42,
	-41.5,-41,-40.5,-40,-39.5,-39,-38.5,-38,-37.5,-37,-36.5,-36,-35.5,-35,-34.5,-34,-33.5,-33,-32.5,-32,-31.5,-31,-30.5,-30,-29.5,-29,-28.5,-28,-27.5,-27,-26.5,-26,
	-25.5,-25,-24.5,-24,-23.5,-23,-22.5,-22,-21.5,-21,-20.5,-20,-19.5,-19,-18.5,-18,-17.5,-17,-16.5,-16,-15.5,-15,-14.5,-14,-13.5,-13,-12.5,-12,-11.5,-11,-10.5,-10,
	-9.5,-9,-8.5,-8,-7.5,-7,-6.5,-6,-5.5,-5,-4.5,-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,
	6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,13.5,14,14.5,15,15.5,16,16.5,17,17.5,18,18.5,19,19.5,20,20.5,21,21.5,22,
	22.5,23,23.5,24,24.5,25,25.5,26,26.5,27,27.5,28,28.5,29,29.5,30,30.5,31,31.5,32,32.5,33,33.5,34,34.5,35,35.5,36,36.5,37,37.5,38,
	38.5,39,39.5,40,40.5,41,41.5,42,42.5,43,43.5,44,44.5,45,45.5,46,46.5,47,47.5,48,48.5,49,49.5,50,50.5,51,51.5,52,52.5,53,53.5,54,
	54.5,55,55.5,56,56.5,57,57.5,58,58.5,59,59.5,60,60.5,61,61.5,62,62.5,63,63.5,64,64.5,65,65.5,66,66.5,67,67.5,68,68.5,69,69.5,70,
	70.5,71,71.5,72,72.5,73,73.5,74,74.5,75,75.5,76,76.5,77,77.5,78,78.5,79,79.5,80,80.5,81,81.5,82,82.5,83,83.5,84,84.5,85,85.5,86,
	86.5,87,87.5,88,88.5,89,89.5,90
};

#endif
