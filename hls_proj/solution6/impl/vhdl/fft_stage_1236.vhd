-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage_1236 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_0_ce0 : OUT STD_LOGIC;
    X_R_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_0_ce1 : OUT STD_LOGIC;
    X_R_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_0_ce0 : OUT STD_LOGIC;
    X_I_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_0_ce1 : OUT STD_LOGIC;
    X_I_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Out_R_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_1_ce0 : OUT STD_LOGIC;
    Out_R_1_we0 : OUT STD_LOGIC;
    Out_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_R_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_1_ce1 : OUT STD_LOGIC;
    Out_R_1_we1 : OUT STD_LOGIC;
    Out_R_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_I_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_1_ce0 : OUT STD_LOGIC;
    Out_I_1_we0 : OUT STD_LOGIC;
    Out_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_I_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_1_ce1 : OUT STD_LOGIC;
    Out_I_1_we1 : OUT STD_LOGIC;
    Out_I_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_stage_1236 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_0_reg_144 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln148_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln148_reg_224_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_224_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_fu_195_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_fu_201_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_233_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln156_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_238_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal X_R_0_load_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal X_R_0_load_reg_254_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_0_load_reg_254_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_0_load_reg_254_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_0_load_reg_254_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_0_load_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_0_load_reg_260_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_0_load_reg_260_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_0_load_reg_260_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_0_load_reg_260_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln158_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_276 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_276_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_276_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_276_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_276_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_276_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_276_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_0_load_1_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal X_I_0_load_1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_lower_fu_207_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component music_fsub_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fadd_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fmul_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    music_fsub_32ns_3bkb_U5 : component music_fsub_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_R_0_load_reg_254_pp0_iter5_reg,
        din1 => tmp_s_reg_266,
        ce => ap_const_logic_1,
        dout => grp_fu_155_p2);

    music_fadd_32ns_3cud_U6 : component music_fadd_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_I_0_load_reg_260_pp0_iter5_reg,
        din1 => tmp_63_reg_271,
        ce => ap_const_logic_1,
        dout => grp_fu_159_p2);

    music_fsub_32ns_3bkb_U7 : component music_fsub_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_R_0_load_1_reg_304,
        din1 => temp_R_reg_292,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);

    music_fsub_32ns_3bkb_U8 : component music_fsub_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_I_0_load_1_reg_310,
        din1 => temp_I_reg_298,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    music_fadd_32ns_3cud_U9 : component music_fadd_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_R_0_load_1_reg_304,
        din1 => temp_R_reg_292,
        ce => ap_const_logic_1,
        dout => grp_fu_171_p2);

    music_fadd_32ns_3cud_U10 : component music_fadd_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_I_0_load_1_reg_310,
        din1 => temp_I_reg_298,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    music_fmul_32ns_3dEe_U11 : component music_fmul_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_I_0_load_reg_260,
        din1 => ap_const_lv32_80000000,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);

    music_fmul_32ns_3dEe_U12 : component music_fmul_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_R_0_load_reg_254,
        din1 => ap_const_lv32_80000000,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    t_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln148_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                t_0_reg_144 <= t_fu_195_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_0_reg_144 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln148_reg_224_pp0_iter9_reg = ap_const_lv1_0))) then
                X_I_0_load_1_reg_310 <= X_I_0_q1;
                X_R_0_load_1_reg_304 <= X_R_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln148_reg_224 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                X_I_0_load_reg_260 <= X_I_0_q0;
                X_R_0_load_reg_254 <= X_R_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                X_I_0_load_reg_260_pp0_iter2_reg <= X_I_0_load_reg_260;
                X_I_0_load_reg_260_pp0_iter3_reg <= X_I_0_load_reg_260_pp0_iter2_reg;
                X_I_0_load_reg_260_pp0_iter4_reg <= X_I_0_load_reg_260_pp0_iter3_reg;
                X_I_0_load_reg_260_pp0_iter5_reg <= X_I_0_load_reg_260_pp0_iter4_reg;
                X_R_0_load_reg_254_pp0_iter2_reg <= X_R_0_load_reg_254;
                X_R_0_load_reg_254_pp0_iter3_reg <= X_R_0_load_reg_254_pp0_iter2_reg;
                X_R_0_load_reg_254_pp0_iter4_reg <= X_R_0_load_reg_254_pp0_iter3_reg;
                X_R_0_load_reg_254_pp0_iter5_reg <= X_R_0_load_reg_254_pp0_iter4_reg;
                    i_reg_233_pp0_iter2_reg(9 downto 1) <= i_reg_233_pp0_iter1_reg(9 downto 1);
                    i_reg_233_pp0_iter3_reg(9 downto 1) <= i_reg_233_pp0_iter2_reg(9 downto 1);
                    i_reg_233_pp0_iter4_reg(9 downto 1) <= i_reg_233_pp0_iter3_reg(9 downto 1);
                    i_reg_233_pp0_iter5_reg(9 downto 1) <= i_reg_233_pp0_iter4_reg(9 downto 1);
                    i_reg_233_pp0_iter6_reg(9 downto 1) <= i_reg_233_pp0_iter5_reg(9 downto 1);
                    i_reg_233_pp0_iter7_reg(9 downto 1) <= i_reg_233_pp0_iter6_reg(9 downto 1);
                    i_reg_233_pp0_iter8_reg(9 downto 1) <= i_reg_233_pp0_iter7_reg(9 downto 1);
                icmp_ln148_reg_224_pp0_iter10_reg <= icmp_ln148_reg_224_pp0_iter9_reg;
                icmp_ln148_reg_224_pp0_iter11_reg <= icmp_ln148_reg_224_pp0_iter10_reg;
                icmp_ln148_reg_224_pp0_iter12_reg <= icmp_ln148_reg_224_pp0_iter11_reg;
                icmp_ln148_reg_224_pp0_iter13_reg <= icmp_ln148_reg_224_pp0_iter12_reg;
                icmp_ln148_reg_224_pp0_iter14_reg <= icmp_ln148_reg_224_pp0_iter13_reg;
                icmp_ln148_reg_224_pp0_iter15_reg <= icmp_ln148_reg_224_pp0_iter14_reg;
                icmp_ln148_reg_224_pp0_iter2_reg <= icmp_ln148_reg_224_pp0_iter1_reg;
                icmp_ln148_reg_224_pp0_iter3_reg <= icmp_ln148_reg_224_pp0_iter2_reg;
                icmp_ln148_reg_224_pp0_iter4_reg <= icmp_ln148_reg_224_pp0_iter3_reg;
                icmp_ln148_reg_224_pp0_iter5_reg <= icmp_ln148_reg_224_pp0_iter4_reg;
                icmp_ln148_reg_224_pp0_iter6_reg <= icmp_ln148_reg_224_pp0_iter5_reg;
                icmp_ln148_reg_224_pp0_iter7_reg <= icmp_ln148_reg_224_pp0_iter6_reg;
                icmp_ln148_reg_224_pp0_iter8_reg <= icmp_ln148_reg_224_pp0_iter7_reg;
                icmp_ln148_reg_224_pp0_iter9_reg <= icmp_ln148_reg_224_pp0_iter8_reg;
                    zext_ln156_reg_238_pp0_iter10_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter9_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter11_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter10_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter12_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter11_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter13_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter12_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter14_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter13_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter15_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter14_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter2_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter1_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter3_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter2_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter4_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter3_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter5_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter4_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter6_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter5_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter7_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter6_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter8_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter7_reg(9 downto 1);
                    zext_ln156_reg_238_pp0_iter9_reg(9 downto 1) <= zext_ln156_reg_238_pp0_iter8_reg(9 downto 1);
                    zext_ln158_reg_276_pp0_iter10_reg(9 downto 1) <= zext_ln158_reg_276(9 downto 1);
                    zext_ln158_reg_276_pp0_iter11_reg(9 downto 1) <= zext_ln158_reg_276_pp0_iter10_reg(9 downto 1);
                    zext_ln158_reg_276_pp0_iter12_reg(9 downto 1) <= zext_ln158_reg_276_pp0_iter11_reg(9 downto 1);
                    zext_ln158_reg_276_pp0_iter13_reg(9 downto 1) <= zext_ln158_reg_276_pp0_iter12_reg(9 downto 1);
                    zext_ln158_reg_276_pp0_iter14_reg(9 downto 1) <= zext_ln158_reg_276_pp0_iter13_reg(9 downto 1);
                    zext_ln158_reg_276_pp0_iter15_reg(9 downto 1) <= zext_ln158_reg_276_pp0_iter14_reg(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln148_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_reg_233(9 downto 1) <= i_fu_201_p2(9 downto 1);
                    zext_ln156_reg_238(9 downto 1) <= zext_ln156_fu_213_p1(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_reg_233_pp0_iter1_reg(9 downto 1) <= i_reg_233(9 downto 1);
                icmp_ln148_reg_224 <= icmp_ln148_fu_189_p2;
                icmp_ln148_reg_224_pp0_iter1_reg <= icmp_ln148_reg_224;
                    zext_ln156_reg_238_pp0_iter1_reg(9 downto 1) <= zext_ln156_reg_238(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln148_reg_224_pp0_iter9_reg = ap_const_lv1_0))) then
                temp_I_reg_298 <= grp_fu_159_p2;
                temp_R_reg_292 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln148_reg_224_pp0_iter4_reg = ap_const_lv1_0))) then
                tmp_63_reg_271 <= grp_fu_184_p2;
                tmp_s_reg_266 <= grp_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln148_reg_224_pp0_iter14_reg = ap_const_lv1_0))) then
                tmp_64_reg_316 <= grp_fu_163_p2;
                tmp_65_reg_321 <= grp_fu_167_p2;
                tmp_66_reg_326 <= grp_fu_171_p2;
                tmp_67_reg_331 <= grp_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln148_reg_224_pp0_iter8_reg = ap_const_lv1_0))) then
                    zext_ln158_reg_276(9 downto 1) <= zext_ln158_fu_219_p1(9 downto 1);
            end if;
        end if;
    end process;
    i_reg_233(0) <= '0';
    i_reg_233_pp0_iter1_reg(0) <= '0';
    i_reg_233_pp0_iter2_reg(0) <= '0';
    i_reg_233_pp0_iter3_reg(0) <= '0';
    i_reg_233_pp0_iter4_reg(0) <= '0';
    i_reg_233_pp0_iter5_reg(0) <= '0';
    i_reg_233_pp0_iter6_reg(0) <= '0';
    i_reg_233_pp0_iter7_reg(0) <= '0';
    i_reg_233_pp0_iter8_reg(0) <= '0';
    zext_ln156_reg_238(0) <= '1';
    zext_ln156_reg_238(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter1_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter2_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter3_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter4_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter5_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter6_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter7_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter8_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter9_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter10_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter11_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter12_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter13_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter14_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln156_reg_238_pp0_iter15_reg(0) <= '1';
    zext_ln156_reg_238_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln158_reg_276(0) <= '0';
    zext_ln158_reg_276(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln158_reg_276_pp0_iter10_reg(0) <= '0';
    zext_ln158_reg_276_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln158_reg_276_pp0_iter11_reg(0) <= '0';
    zext_ln158_reg_276_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln158_reg_276_pp0_iter12_reg(0) <= '0';
    zext_ln158_reg_276_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln158_reg_276_pp0_iter13_reg(0) <= '0';
    zext_ln158_reg_276_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln158_reg_276_pp0_iter14_reg(0) <= '0';
    zext_ln158_reg_276_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln158_reg_276_pp0_iter15_reg(0) <= '0';
    zext_ln158_reg_276_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln148_fu_189_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln148_fu_189_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((icmp_ln148_fu_189_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Out_I_1_address0 <= zext_ln156_reg_238_pp0_iter15_reg(10 - 1 downto 0);
    Out_I_1_address1 <= zext_ln158_reg_276_pp0_iter15_reg(10 - 1 downto 0);

    Out_I_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Out_I_1_ce0 <= ap_const_logic_1;
        else 
            Out_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Out_I_1_ce1 <= ap_const_logic_1;
        else 
            Out_I_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_I_1_d0 <= tmp_65_reg_321;
    Out_I_1_d1 <= tmp_67_reg_331;

    Out_I_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln148_reg_224_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln148_reg_224_pp0_iter15_reg = ap_const_lv1_0))) then 
            Out_I_1_we0 <= ap_const_logic_1;
        else 
            Out_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln148_reg_224_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln148_reg_224_pp0_iter15_reg = ap_const_lv1_0))) then 
            Out_I_1_we1 <= ap_const_logic_1;
        else 
            Out_I_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_1_address0 <= zext_ln156_reg_238_pp0_iter15_reg(10 - 1 downto 0);
    Out_R_1_address1 <= zext_ln158_reg_276_pp0_iter15_reg(10 - 1 downto 0);

    Out_R_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Out_R_1_ce0 <= ap_const_logic_1;
        else 
            Out_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Out_R_1_ce1 <= ap_const_logic_1;
        else 
            Out_R_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_1_d0 <= tmp_64_reg_316;
    Out_R_1_d1 <= tmp_66_reg_326;

    Out_R_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln148_reg_224_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln148_reg_224_pp0_iter15_reg = ap_const_lv1_0))) then 
            Out_R_1_we0 <= ap_const_logic_1;
        else 
            Out_R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln148_reg_224_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln148_reg_224_pp0_iter15_reg = ap_const_lv1_0))) then 
            Out_R_1_we1 <= ap_const_logic_1;
        else 
            Out_R_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_0_address0 <= zext_ln156_fu_213_p1(10 - 1 downto 0);
    X_I_0_address1 <= zext_ln158_fu_219_p1(10 - 1 downto 0);

    X_I_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            X_I_0_ce0 <= ap_const_logic_1;
        else 
            X_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_I_0_ce1 <= ap_const_logic_1;
        else 
            X_I_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_0_address0 <= zext_ln156_fu_213_p1(10 - 1 downto 0);
    X_R_0_address1 <= zext_ln158_fu_219_p1(10 - 1 downto 0);

    X_R_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            X_R_0_ce0 <= ap_const_logic_1;
        else 
            X_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_R_0_ce1 <= ap_const_logic_1;
        else 
            X_R_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln148_fu_189_p2)
    begin
        if ((icmp_ln148_fu_189_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_201_p2 <= std_logic_vector(shift_left(unsigned(t_0_reg_144),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    i_lower_fu_207_p2 <= (i_fu_201_p2 or ap_const_lv10_1);
    icmp_ln148_fu_189_p2 <= "1" when (t_0_reg_144 = ap_const_lv10_200) else "0";
    t_fu_195_p2 <= std_logic_vector(unsigned(t_0_reg_144) + unsigned(ap_const_lv10_1));
    zext_ln156_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_lower_fu_207_p2),64));
    zext_ln158_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_233_pp0_iter8_reg),64));
end behav;
