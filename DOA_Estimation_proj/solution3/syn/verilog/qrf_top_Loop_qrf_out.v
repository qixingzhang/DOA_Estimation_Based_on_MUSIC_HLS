// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module qrf_top_Loop_qrf_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        R_M_real_address0,
        R_M_real_ce0,
        R_M_real_we0,
        R_M_real_d0,
        Ri_M_real_address0,
        Ri_M_real_ce0,
        Ri_M_real_q0,
        R_M_imag_address0,
        R_M_imag_ce0,
        R_M_imag_we0,
        R_M_imag_d0,
        Ri_M_imag_address0,
        Ri_M_imag_ce0,
        Ri_M_imag_q0,
        Qi_M_real_address0,
        Qi_M_real_ce0,
        Qi_M_real_q0,
        Qi_M_imag_address0,
        Qi_M_imag_ce0,
        Qi_M_imag_q0,
        Q_M_real_address0,
        Q_M_real_ce0,
        Q_M_real_we0,
        Q_M_real_d0,
        Q_M_imag_address0,
        Q_M_imag_ce0,
        Q_M_imag_we0,
        Q_M_imag_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state5 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] R_M_real_address0;
output   R_M_real_ce0;
output   R_M_real_we0;
output  [31:0] R_M_real_d0;
output  [3:0] Ri_M_real_address0;
output   Ri_M_real_ce0;
input  [31:0] Ri_M_real_q0;
output  [3:0] R_M_imag_address0;
output   R_M_imag_ce0;
output   R_M_imag_we0;
output  [31:0] R_M_imag_d0;
output  [3:0] Ri_M_imag_address0;
output   Ri_M_imag_ce0;
input  [31:0] Ri_M_imag_q0;
output  [3:0] Qi_M_real_address0;
output   Qi_M_real_ce0;
input  [31:0] Qi_M_real_q0;
output  [3:0] Qi_M_imag_address0;
output   Qi_M_imag_ce0;
input  [31:0] Qi_M_imag_q0;
output  [3:0] Q_M_real_address0;
output   Q_M_real_ce0;
output   Q_M_real_we0;
output  [31:0] Q_M_real_d0;
output  [3:0] Q_M_imag_address0;
output   Q_M_imag_ce0;
output   Q_M_imag_we0;
output  [31:0] Q_M_imag_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg R_M_real_ce0;
reg R_M_real_we0;
reg Ri_M_real_ce0;
reg R_M_imag_ce0;
reg R_M_imag_we0;
reg Ri_M_imag_ce0;
reg Qi_M_real_ce0;
reg Qi_M_imag_ce0;
reg Q_M_real_ce0;
reg Q_M_real_we0;
reg Q_M_imag_ce0;
reg Q_M_imag_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] c15_0_i_reg_175;
reg   [2:0] c16_0_i_reg_186;
wire   [0:0] icmp_ln532_fu_197_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] r_fu_203_p2;
reg   [2:0] r_reg_326;
wire   [5:0] zext_ln545_fu_209_p1;
reg   [5:0] zext_ln545_reg_331;
wire   [5:0] zext_ln533_fu_221_p1;
reg   [5:0] zext_ln533_reg_336;
wire   [0:0] icmp_ln533_fu_225_p2;
reg   [0:0] icmp_ln533_reg_342;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] c_fu_231_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] tmp_2_fu_252_p3;
reg   [4:0] tmp_2_reg_361;
wire   [0:0] icmp_ln541_fu_289_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [2:0] c_1_fu_295_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln543_fu_301_p2;
reg   [0:0] icmp_ln543_reg_375;
wire   [63:0] zext_ln545_2_fu_316_p1;
reg   [63:0] zext_ln545_2_reg_379;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
reg   [2:0] r14_0_i_reg_163;
wire    ap_CS_fsm_state8;
reg    ap_block_state1;
wire   [63:0] zext_ln538_1_fu_246_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln538_3_fu_268_p1;
wire    ap_block_pp1_stage0;
wire   [4:0] tmp_fu_213_p3;
wire   [5:0] zext_ln538_fu_237_p1;
wire   [5:0] add_ln538_fu_241_p2;
wire   [5:0] zext_ln538_2_fu_260_p1;
wire   [5:0] add_ln538_1_fu_263_p2;
wire   [31:0] bitcast_ln155_fu_274_p1;
wire   [31:0] xor_ln155_fu_278_p2;
wire   [5:0] zext_ln545_1_fu_307_p1;
wire   [5:0] add_ln545_fu_311_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln532_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln532_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln532_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln533_fu_225_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c15_0_i_reg_175 <= c_fu_231_p2;
    end else if (((icmp_ln532_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c15_0_i_reg_175 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c16_0_i_reg_186 <= 3'd0;
    end else if (((icmp_ln541_fu_289_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c16_0_i_reg_186 <= c_1_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r14_0_i_reg_163 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r14_0_i_reg_163 <= r_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln533_reg_342 <= icmp_ln533_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln543_reg_375 <= icmp_ln543_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_326 <= r_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln533_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_361[4 : 2] <= tmp_2_fu_252_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln532_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln533_reg_336[4 : 2] <= zext_ln533_fu_221_p1[4 : 2];
        zext_ln545_reg_331[2 : 0] <= zext_ln545_fu_209_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln543_fu_301_p2 == 1'd0) & (icmp_ln541_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln545_2_reg_379[5 : 0] <= zext_ln545_2_fu_316_p1[5 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Q_M_imag_ce0 = 1'b1;
    end else begin
        Q_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln533_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Q_M_imag_we0 = 1'b1;
    end else begin
        Q_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Q_M_real_ce0 = 1'b1;
    end else begin
        Q_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln533_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Q_M_real_we0 = 1'b1;
    end else begin
        Q_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Qi_M_imag_ce0 = 1'b1;
    end else begin
        Qi_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Qi_M_real_ce0 = 1'b1;
    end else begin
        Qi_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        R_M_imag_ce0 = 1'b1;
    end else begin
        R_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln543_reg_375 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        R_M_imag_we0 = 1'b1;
    end else begin
        R_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        R_M_real_ce0 = 1'b1;
    end else begin
        R_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln543_reg_375 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        R_M_real_we0 = 1'b1;
    end else begin
        R_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Ri_M_imag_ce0 = 1'b1;
    end else begin
        Ri_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Ri_M_real_ce0 = 1'b1;
    end else begin
        Ri_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln533_fu_225_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln541_fu_289_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln532_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln532_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln532_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln533_fu_225_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln533_fu_225_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln541_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln541_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Q_M_imag_address0 = zext_ln538_3_fu_268_p1;

assign Q_M_imag_d0 = xor_ln155_fu_278_p2;

assign Q_M_real_address0 = zext_ln538_3_fu_268_p1;

assign Q_M_real_d0 = Qi_M_real_q0;

assign Qi_M_imag_address0 = zext_ln538_1_fu_246_p1;

assign Qi_M_real_address0 = zext_ln538_1_fu_246_p1;

assign R_M_imag_address0 = zext_ln545_2_reg_379;

assign R_M_imag_d0 = Ri_M_imag_q0;

assign R_M_real_address0 = zext_ln545_2_reg_379;

assign R_M_real_d0 = Ri_M_real_q0;

assign Ri_M_imag_address0 = zext_ln545_2_fu_316_p1;

assign Ri_M_real_address0 = zext_ln545_2_fu_316_p1;

assign add_ln538_1_fu_263_p2 = (zext_ln545_reg_331 + zext_ln538_2_fu_260_p1);

assign add_ln538_fu_241_p2 = (zext_ln538_fu_237_p1 + zext_ln533_reg_336);

assign add_ln545_fu_311_p2 = (zext_ln533_reg_336 + zext_ln545_1_fu_307_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bitcast_ln155_fu_274_p1 = Qi_M_imag_q0;

assign c_1_fu_295_p2 = (c16_0_i_reg_186 + 3'd1);

assign c_fu_231_p2 = (c15_0_i_reg_175 + 3'd1);

assign icmp_ln532_fu_197_p2 = ((r14_0_i_reg_163 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln533_fu_225_p2 = ((c15_0_i_reg_175 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln541_fu_289_p2 = ((c16_0_i_reg_186 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln543_fu_301_p2 = ((r14_0_i_reg_163 > c16_0_i_reg_186) ? 1'b1 : 1'b0);

assign r_fu_203_p2 = (r14_0_i_reg_163 + 3'd1);

assign tmp_2_fu_252_p3 = {{c15_0_i_reg_175}, {2'd0}};

assign tmp_fu_213_p3 = {{r14_0_i_reg_163}, {2'd0}};

assign xor_ln155_fu_278_p2 = (bitcast_ln155_fu_274_p1 ^ 32'd2147483648);

assign zext_ln533_fu_221_p1 = tmp_fu_213_p3;

assign zext_ln538_1_fu_246_p1 = add_ln538_fu_241_p2;

assign zext_ln538_2_fu_260_p1 = tmp_2_reg_361;

assign zext_ln538_3_fu_268_p1 = add_ln538_1_fu_263_p2;

assign zext_ln538_fu_237_p1 = c15_0_i_reg_175;

assign zext_ln545_1_fu_307_p1 = c16_0_i_reg_186;

assign zext_ln545_2_fu_316_p1 = add_ln545_fu_311_p2;

assign zext_ln545_fu_209_p1 = r14_0_i_reg_163;

always @ (posedge ap_clk) begin
    zext_ln545_reg_331[5:3] <= 3'b000;
    zext_ln533_reg_336[1:0] <= 2'b00;
    zext_ln533_reg_336[5] <= 1'b0;
    tmp_2_reg_361[1:0] <= 2'b00;
    zext_ln545_2_reg_379[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //qrf_top_Loop_qrf_out
