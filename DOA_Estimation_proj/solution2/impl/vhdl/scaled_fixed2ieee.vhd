-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scaled_fixed2ieee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (62 downto 0);
    prescale : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of scaled_fixed2ieee is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_bits_2_V_load_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_bits_2_V_1_load_reg_691 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_2_V_2_load_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_234_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_706 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln169_fu_348_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln169_reg_711 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln423_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_363_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_24_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_415_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_3_fu_479_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shift_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln441_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_17_fu_560_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_phi_mux_i_0_phi_fu_138_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_s_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_reg_157 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln434_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0119_0_reg_168 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln444_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_0_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_0_reg_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_Val2_31_phi_fu_202_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_phi_mux_shift_1_phi_fu_212_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_2_V_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_0_V_fu_382_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_2_V_1_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_2_V_2_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_3_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_0_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln510_fu_421_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_3_1_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_3_2_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_3_3_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_240_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln425_fu_254_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln424_fu_248_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln566_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln566_fu_275_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln566_2_fu_287_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_266_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln566_1_fu_281_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln566_fu_293_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln566_2_fu_308_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln566_3_fu_316_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln566_1_fu_301_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln566_fu_322_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln566_1_fu_326_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal lshr_ln566_fu_330_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal lshr_ln566_1_fu_336_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_342_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln566_fu_352_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_355_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_375_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_26_fu_425_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_26_fu_425_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_25_fu_435_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_fu_501_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sh_assign_fu_501_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1311_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ush_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_fu_544_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_548_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_15_fu_554_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln452_fu_575_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln452_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln453_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_fu_613_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal empty_fu_609_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_exp_V_fu_631_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal significand_V_fu_623_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_26_fu_639_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln512_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component music_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    music_mux_42_32_1_1_U83 : component music_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => out_bits_2_V_load_reg_685,
        din1 => out_bits_2_V_1_load_reg_691,
        din2 => out_bits_2_V_2_load_reg_697,
        din3 => p_Result_24_reg_740,
        din4 => p_Val2_26_fu_425_p5,
        dout => p_Val2_26_fu_425_p6);

    music_mux_42_32_1_1_U84 : component music_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => c_3_1_fu_110,
        din1 => c_3_2_fu_114,
        din2 => c_3_3_fu_118,
        din3 => c_3_fu_106,
        din4 => sh_assign_fu_501_p5,
        dout => sh_assign_fu_501_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
                ap_return_preg(31) <= '0';
                ap_return_preg(32) <= '0';
                ap_return_preg(33) <= '0';
                ap_return_preg(34) <= '0';
                ap_return_preg(35) <= '0';
                ap_return_preg(36) <= '0';
                ap_return_preg(37) <= '0';
                ap_return_preg(38) <= '0';
                ap_return_preg(39) <= '0';
                ap_return_preg(40) <= '0';
                ap_return_preg(41) <= '0';
                ap_return_preg(42) <= '0';
                ap_return_preg(43) <= '0';
                ap_return_preg(44) <= '0';
                ap_return_preg(45) <= '0';
                ap_return_preg(46) <= '0';
                ap_return_preg(47) <= '0';
                ap_return_preg(48) <= '0';
                ap_return_preg(49) <= '0';
                ap_return_preg(50) <= '0';
                ap_return_preg(51) <= '0';
                ap_return_preg(52) <= '0';
                ap_return_preg(53) <= '0';
                ap_return_preg(54) <= '0';
                ap_return_preg(55) <= '0';
                ap_return_preg(56) <= '0';
                ap_return_preg(57) <= '0';
                ap_return_preg(58) <= '0';
                ap_return_preg(59) <= '0';
                ap_return_preg(60) <= '0';
                ap_return_preg(61) <= '0';
                ap_return_preg(62) <= '0';
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln441_fu_473_p2 = ap_const_lv1_1) or (icmp_ln444_fu_569_p2 = ap_const_lv1_0)))) then 
                                        ap_return_preg(62 downto 0) <= bitcast_ln512_fu_649_p1(62 downto 0);
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln434_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_0_reg_157 <= i_2_fu_415_p2;
            elsif (((icmp_ln423_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_157 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i2_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln434_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_0_reg_188 <= ap_const_lv3_0;
            elsif (((icmp_ln444_fu_569_p2 = ap_const_lv1_1) and (icmp_ln441_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_188 <= i_3_fu_479_p2;
            end if; 
        end if;
    end process;

    i_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_134 <= i_reg_706;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_0119_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln434_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0119_0_reg_168 <= in_V;
            elsif (((icmp_ln444_fu_569_p2 = ap_const_lv1_1) and (icmp_ln441_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0119_0_reg_168 <= r_V_17_fu_560_p3;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                if ((ap_phi_mux_i_0_phi_fu_138_p4 = ap_const_lv2_0)) then 
                    p_Val2_s_reg_146 <= out_bits_2_V_fu_94;
                elsif ((not((ap_phi_mux_i_0_phi_fu_138_p4 = ap_const_lv2_0)) and not((ap_phi_mux_i_0_phi_fu_138_p4 = ap_const_lv2_1)))) then 
                    p_Val2_s_reg_146 <= out_bits_2_V_2_fu_102;
                elsif ((ap_phi_mux_i_0_phi_fu_138_p4 = ap_const_lv2_1)) then 
                    p_Val2_s_reg_146 <= out_bits_2_V_1_fu_98;
                end if;
            end if; 
        end if;
    end process;

    shift_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln434_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_0_reg_177 <= ap_const_lv32_0;
            elsif (((icmp_ln444_fu_569_p2 = ap_const_lv1_1) and (icmp_ln441_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                shift_0_reg_177 <= shift_fu_515_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln510_fu_421_p1 = ap_const_lv2_0) and (icmp_ln434_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                c_3_1_fu_110 <= c_0_fu_445_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln510_fu_421_p1 = ap_const_lv2_1) and (icmp_ln434_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                c_3_2_fu_114 <= c_0_fu_445_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln434_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln510_fu_421_p1 = ap_const_lv2_2))) then
                c_3_3_fu_118 <= c_0_fu_445_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln434_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln510_fu_421_p1 = ap_const_lv2_3))) then
                c_3_fu_106 <= c_0_fu_445_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_706 <= i_fu_234_p2;
                out_bits_2_V_1_load_reg_691 <= out_bits_2_V_1_fu_98;
                out_bits_2_V_2_load_reg_697 <= out_bits_2_V_2_fu_102;
                out_bits_2_V_load_reg_685 <= out_bits_2_V_fu_94;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_134 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                out_bits_2_V_1_fu_98 <= out_bits_0_V_fu_382_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_reg_134 = ap_const_lv2_1)) and not((i_0_reg_134 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                out_bits_2_V_2_fu_102 <= out_bits_0_V_fu_382_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_134 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                out_bits_2_V_fu_94 <= out_bits_0_V_fu_382_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Result_24_reg_740 <= p_Result_24_fu_363_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln169_reg_711 <= trunc_ln169_fu_348_p1;
            end if;
        end if;
    end process;
    ap_return_preg(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln423_fu_228_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln441_fu_473_p2, icmp_ln434_fu_409_p2, icmp_ln444_fu_569_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln423_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln434_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln441_fu_473_p2 = ap_const_lv1_1) or (icmp_ln444_fu_569_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln441_fu_473_p2, icmp_ln444_fu_569_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln441_fu_473_p2 = ap_const_lv1_1) or (icmp_ln444_fu_569_p2 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_138_p4 <= i_0_reg_134;

    ap_phi_mux_p_Val2_31_phi_fu_202_p4_assign_proc : process(ap_CS_fsm_state5, icmp_ln441_fu_473_p2, r_V_17_fu_560_p3, p_0119_0_reg_168, icmp_ln444_fu_569_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if (((icmp_ln441_fu_473_p2 = ap_const_lv1_0) and (icmp_ln444_fu_569_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_p_Val2_31_phi_fu_202_p4 <= r_V_17_fu_560_p3;
            elsif ((icmp_ln441_fu_473_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_31_phi_fu_202_p4 <= p_0119_0_reg_168;
            else 
                ap_phi_mux_p_Val2_31_phi_fu_202_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_31_phi_fu_202_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_shift_1_phi_fu_212_p4_assign_proc : process(ap_CS_fsm_state5, shift_fu_515_p2, icmp_ln441_fu_473_p2, icmp_ln444_fu_569_p2, shift_0_reg_177)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if (((icmp_ln441_fu_473_p2 = ap_const_lv1_0) and (icmp_ln444_fu_569_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_shift_1_phi_fu_212_p4 <= shift_fu_515_p2;
            elsif ((icmp_ln441_fu_473_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_shift_1_phi_fu_212_p4 <= shift_0_reg_177;
            else 
                ap_phi_mux_shift_1_phi_fu_212_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_shift_1_phi_fu_212_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln441_fu_473_p2, icmp_ln444_fu_569_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln441_fu_473_p2 = ap_const_lv1_1) or (icmp_ln444_fu_569_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state5, icmp_ln441_fu_473_p2, icmp_ln444_fu_569_p2, bitcast_ln512_fu_649_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln441_fu_473_p2 = ap_const_lv1_1) or (icmp_ln444_fu_569_p2 = ap_const_lv1_0)))) then 
            ap_return <= bitcast_ln512_fu_649_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln512_fu_649_p1 <= p_Result_26_fu_639_p4;
    
    c_0_fu_445_p3_proc : process(p_Result_25_fu_435_p4)
    begin
        c_0_fu_445_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_25_fu_435_p4(i) = '1' then
                c_0_fu_445_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    empty_fu_609_p1 <= newexp_fu_584_p2(11 - 1 downto 0);
    i_2_fu_415_p2 <= std_logic_vector(unsigned(i1_0_reg_157) + unsigned(ap_const_lv3_1));
    i_3_fu_479_p2 <= std_logic_vector(unsigned(i2_0_reg_188) + unsigned(ap_const_lv3_1));
    i_fu_234_p2 <= std_logic_vector(unsigned(i_0_reg_134) + unsigned(ap_const_lv2_1));
    icmp_ln1452_fu_598_p2 <= "1" when (in_V = ap_const_lv63_0) else "0";
    icmp_ln423_fu_228_p2 <= "1" when (i_0_reg_134 = ap_const_lv2_3) else "0";
    icmp_ln434_fu_409_p2 <= "1" when (i1_0_reg_157 = ap_const_lv3_4) else "0";
    icmp_ln441_fu_473_p2 <= "1" when (i2_0_reg_188 = ap_const_lv3_4) else "0";
    icmp_ln444_fu_569_p2 <= "1" when (sh_assign_fu_501_p6 = ap_const_lv32_10) else "0";
    icmp_ln566_fu_260_p2 <= "1" when (unsigned(sub_ln425_fu_254_p2) > unsigned(sub_ln424_fu_248_p2)) else "0";
    isNeg_fu_522_p3 <= sh_assign_fu_501_p6(31 downto 31);
    lshr_ln566_1_fu_336_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv63_7FFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln566_1_fu_326_p1(31-1 downto 0)))));
    lshr_ln566_fu_330_p2 <= std_logic_vector(shift_right(unsigned(select_ln566_1_fu_301_p3),to_integer(unsigned('0' & zext_ln566_fu_322_p1(31-1 downto 0)))));
    newexp_fu_584_p2 <= std_logic_vector(signed(sext_ln452_fu_580_p1) - signed(ap_phi_mux_shift_1_phi_fu_212_p4));
    or_ln453_fu_603_p2 <= (tmp_9_fu_590_p3 or icmp_ln1452_fu_598_p2);
    out_bits_0_V_fu_382_p5 <= (tmp_3_fu_375_p3 & p_Val2_s_reg_146(14 downto 0));
    out_exp_V_fu_631_p3 <= 
        ap_const_lv11_0 when (or_ln453_fu_603_p2(0) = '1') else 
        empty_fu_609_p1;
    p_Result_24_fu_363_p5 <= (tmp_1_fu_355_p3 & ap_const_lv32_0(15 downto 0));
    
    p_Result_25_fu_435_p4_proc : process(p_Val2_26_fu_425_p6)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_25_fu_435_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_26_fu_425_p6;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_25_fu_435_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_25_fu_435_p4_i) := p_Val2_26_fu_425_p6(32-1-p_Result_25_fu_435_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_25_fu_435_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_26_fu_639_p4 <= ((ap_const_lv1_0 & out_exp_V_fu_631_p3) & significand_V_fu_623_p3);
    p_Result_s_fu_342_p2 <= (lshr_ln566_fu_330_p2 and lshr_ln566_1_fu_336_p2);
    p_Val2_26_fu_425_p5 <= i1_0_reg_157(2 - 1 downto 0);
    phitmp2_fu_613_p4 <= ap_phi_mux_p_Val2_31_phi_fu_202_p4(61 downto 10);
    r_V_15_fu_554_p2 <= std_logic_vector(shift_left(unsigned(p_0119_0_reg_168),to_integer(unsigned('0' & zext_ln1287_fu_544_p1(31-1 downto 0)))));
    r_V_17_fu_560_p3 <= 
        r_V_fu_548_p2 when (isNeg_fu_522_p3(0) = '1') else 
        r_V_15_fu_554_p2;
    r_V_fu_548_p2 <= std_logic_vector(shift_right(signed(p_0119_0_reg_168),to_integer(unsigned('0' & zext_ln1287_fu_544_p1(31-1 downto 0)))));
    select_ln566_1_fu_301_p3 <= 
        tmp_fu_266_p4 when (icmp_ln566_fu_260_p2(0) = '1') else 
        in_V;
    select_ln566_2_fu_308_p3 <= 
        sub_ln566_1_fu_281_p2 when (icmp_ln566_fu_260_p2(0) = '1') else 
        sub_ln425_fu_254_p2;
    select_ln566_fu_293_p3 <= 
        sub_ln566_fu_275_p2 when (icmp_ln566_fu_260_p2(0) = '1') else 
        sub_ln566_2_fu_287_p2;
        sext_ln452_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln452_fu_575_p2),32));

    sh_assign_fu_501_p5 <= i2_0_reg_188(2 - 1 downto 0);
    shift_fu_515_p2 <= std_logic_vector(unsigned(sh_assign_fu_501_p6) + unsigned(shift_0_reg_177));
    shl_ln_fu_240_p3 <= (i_0_reg_134 & ap_const_lv4_0);
    significand_V_fu_623_p3 <= 
        ap_const_lv52_0 when (or_ln453_fu_603_p2(0) = '1') else 
        phitmp2_fu_613_p4;
    sub_ln1311_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sh_assign_fu_501_p6));
    sub_ln424_fu_248_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(shl_ln_fu_240_p3));
    sub_ln425_fu_254_p2 <= std_logic_vector(signed(ap_const_lv6_2F) - signed(shl_ln_fu_240_p3));
    sub_ln452_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv12_3FF) - unsigned(prescale));
    sub_ln566_1_fu_281_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(sub_ln425_fu_254_p2));
    sub_ln566_2_fu_287_p2 <= std_logic_vector(unsigned(sub_ln424_fu_248_p2) - unsigned(sub_ln425_fu_254_p2));
    sub_ln566_3_fu_316_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(select_ln566_fu_293_p3));
    sub_ln566_fu_275_p2 <= std_logic_vector(unsigned(sub_ln425_fu_254_p2) - unsigned(sub_ln424_fu_248_p2));
    tmp_1_fu_355_p3 <= (trunc_ln566_fu_352_p1 & ap_const_lv1_1);
    tmp_3_fu_375_p3 <= (trunc_ln169_reg_711 & ap_const_lv1_1);
    tmp_9_fu_590_p3 <= newexp_fu_584_p2(31 downto 31);
    
    tmp_fu_266_p4_proc : process(in_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(63+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(63+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable tmp_fu_266_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(63 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3E(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := in_V;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(63-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(63-1-unsigned(ap_const_lv32_3E(6-1 downto 0)));
            for tmp_fu_266_p4_i in 0 to 63-1 loop
                v0_cpy(tmp_fu_266_p4_i) := in_V(63-1-tmp_fu_266_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(63-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_266_p4 <= resvalue(63-1 downto 0);
    end process;

    trunc_ln169_fu_348_p1 <= p_Result_s_fu_342_p2(16 - 1 downto 0);
    trunc_ln510_fu_421_p1 <= i1_0_reg_157(2 - 1 downto 0);
    trunc_ln566_fu_352_p1 <= in_V(15 - 1 downto 0);
    ush_fu_536_p3 <= 
        sub_ln1311_fu_530_p2 when (isNeg_fu_522_p3(0) = '1') else 
        sh_assign_fu_501_p6;
    zext_ln1287_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_fu_536_p3),63));
    zext_ln566_1_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln566_3_fu_316_p2),63));
    zext_ln566_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln566_2_fu_308_p3),63));
end behav;
