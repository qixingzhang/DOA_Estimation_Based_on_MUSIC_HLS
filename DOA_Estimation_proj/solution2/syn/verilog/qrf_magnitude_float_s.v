// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module qrf_magnitude_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_M_real,
        a_M_imag,
        b_M_real,
        b_M_imag,
        ap_return
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a_M_real;
input  [31:0] a_M_imag;
input  [31:0] b_M_real;
input  [31:0] b_M_imag;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_67_p2;
reg   [31:0] reg_143;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
wire   [31:0] d1_4_fu_169_p1;
reg   [31:0] d1_4_reg_609;
wire   [31:0] d2_4_fu_198_p1;
reg   [31:0] d2_4_reg_621;
wire   [31:0] largest_4_fu_227_p1;
reg   [31:0] largest_4_reg_633;
wire   [31:0] d3_fu_256_p1;
reg   [31:0] d3_reg_646;
wire   [0:0] or_ln179_fu_295_p2;
reg   [0:0] or_ln179_reg_657;
wire   [0:0] or_ln179_1_fu_313_p2;
reg   [0:0] or_ln179_1_reg_664;
wire   [0:0] or_ln179_2_fu_341_p2;
reg   [0:0] or_ln179_2_reg_671;
wire   [0:0] or_ln179_3_fu_369_p2;
reg   [0:0] or_ln179_3_reg_678;
wire   [31:0] d1_3_fu_519_p3;
reg   [31:0] d1_3_reg_685;
wire    ap_CS_fsm_state2;
wire   [31:0] d2_3_fu_532_p3;
reg   [31:0] d2_3_reg_690;
wire   [31:0] d3_3_fu_546_p3;
reg   [31:0] d3_3_reg_695;
wire   [31:0] largest_3_fu_560_p3;
reg   [31:0] largest_3_reg_700;
wire   [0:0] and_ln201_fu_603_p2;
reg   [0:0] and_ln201_reg_710;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_89_p2;
reg   [31:0] x1_reg_714;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_93_p2;
reg   [31:0] x2_reg_720;
wire   [31:0] grp_fu_97_p2;
reg   [31:0] x3_reg_726;
wire   [31:0] grp_fu_76_p2;
reg   [31:0] x1_sqd_reg_732;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_80_p2;
reg   [31:0] x2_sqd_reg_737;
wire   [31:0] grp_fu_84_p2;
reg   [31:0] x3_sqd_reg_742;
wire   [31:0] grp_fu_72_p2;
reg   [31:0] s2_reg_747;
wire   [31:0] grp_fu_138_p2;
reg   [31:0] tmp_i_i_reg_752;
wire    ap_CS_fsm_state27;
reg   [31:0] ap_phi_mux_p_0_phi_fu_60_p4;
reg   [31:0] p_0_reg_56;
wire    ap_CS_fsm_state29;
reg   [31:0] grp_fu_67_p0;
reg   [31:0] grp_fu_67_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
reg   [31:0] grp_fu_76_p0;
reg   [31:0] grp_fu_76_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_101_p0;
reg   [31:0] grp_fu_101_p1;
wire    ap_CS_fsm_state21;
wire   [31:0] p_Val2_s_fu_149_p1;
wire   [30:0] trunc_ln368_fu_153_p1;
wire   [31:0] p_Result_s_fu_161_p3;
wire   [31:0] p_Val2_32_fu_178_p1;
wire   [30:0] trunc_ln368_1_fu_182_p1;
wire   [31:0] p_Result_27_fu_190_p3;
wire   [31:0] p_Val2_33_fu_207_p1;
wire   [30:0] trunc_ln368_2_fu_211_p1;
wire   [31:0] p_Result_28_fu_219_p3;
wire   [31:0] p_Val2_34_fu_236_p1;
wire   [30:0] trunc_ln368_3_fu_240_p1;
wire   [31:0] p_Result_29_fu_248_p3;
wire   [7:0] tmp_1_fu_263_p4;
wire   [22:0] trunc_ln189_fu_157_p1;
wire   [0:0] icmp_ln179_1_fu_289_p2;
wire   [0:0] icmp_ln179_fu_283_p2;
wire   [7:0] tmp_2_fu_273_p4;
wire   [22:0] trunc_ln189_1_fu_186_p1;
wire   [0:0] icmp_ln179_3_fu_307_p2;
wire   [0:0] icmp_ln179_2_fu_301_p2;
wire   [7:0] tmp_4_fu_319_p4;
wire   [22:0] trunc_ln189_2_fu_215_p1;
wire   [0:0] icmp_ln179_5_fu_335_p2;
wire   [0:0] icmp_ln179_4_fu_329_p2;
wire   [7:0] tmp_6_fu_347_p4;
wire   [22:0] trunc_ln189_3_fu_244_p1;
wire   [0:0] icmp_ln179_7_fu_363_p2;
wire   [0:0] icmp_ln179_6_fu_357_p2;
wire   [0:0] and_ln179_fu_375_p2;
wire   [0:0] grp_fu_101_p2;
wire   [0:0] and_ln179_3_fu_385_p2;
wire   [0:0] grp_fu_105_p2;
wire   [0:0] and_ln179_5_fu_395_p2;
wire   [0:0] grp_fu_109_p2;
wire   [0:0] and_ln179_4_fu_389_p2;
wire   [0:0] and_ln179_6_fu_399_p2;
wire   [0:0] and_ln179_7_fu_405_p2;
wire   [0:0] and_ln179_2_fu_379_p2;
wire   [0:0] grp_fu_113_p2;
wire   [0:0] and_ln184_1_fu_423_p2;
wire   [0:0] grp_fu_117_p2;
wire   [0:0] and_ln184_3_fu_433_p2;
wire   [0:0] grp_fu_121_p2;
wire   [0:0] grp_fu_125_p2;
wire   [0:0] grp_fu_129_p2;
wire   [0:0] and_ln189_3_fu_455_p2;
wire   [0:0] grp_fu_133_p2;
wire   [0:0] and_ln189_2_fu_449_p2;
wire   [0:0] and_ln189_4_fu_459_p2;
wire   [0:0] and_ln189_5_fu_465_p2;
wire   [0:0] and_ln189_fu_443_p2;
wire   [0:0] and_ln189_1_fu_471_p2;
wire   [0:0] and_ln179_1_fu_411_p2;
wire   [0:0] and_ln184_2_fu_427_p2;
wire   [0:0] and_ln184_4_fu_437_p2;
wire   [0:0] and_ln184_fu_417_p2;
wire   [0:0] xor_ln179_fu_495_p2;
wire   [0:0] and_ln184_6_fu_507_p2;
wire   [0:0] and_ln184_5_fu_501_p2;
wire   [0:0] and_ln184_7_fu_513_p2;
wire   [31:0] d1_fu_489_p3;
wire   [31:0] d2_fu_526_p3;
wire   [31:0] d3_1_fu_477_p3;
wire   [31:0] d3_2_fu_539_p3;
wire   [31:0] largest_1_fu_483_p3;
wire   [31:0] largest_2_fu_553_p3;
wire   [31:0] bitcast_ln201_fu_568_p1;
wire   [7:0] tmp_14_fu_571_p4;
wire   [22:0] trunc_ln201_fu_581_p1;
wire   [0:0] icmp_ln201_1_fu_591_p2;
wire   [0:0] icmp_ln201_fu_585_p2;
wire   [0:0] or_ln201_fu_597_p2;
reg   [4:0] grp_fu_101_opcode;
reg   [31:0] ap_return_preg;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 ap_return_preg = 32'd0;
end

music_fadd_32ns_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fadd_32ns_3hbi_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_67_p0),
    .din1(grp_fu_67_p1),
    .ce(1'b1),
    .dout(grp_fu_67_p2)
);

music_fadd_32ns_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fadd_32ns_3hbi_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x2_sqd_reg_737),
    .din1(x3_sqd_reg_742),
    .ce(1'b1),
    .dout(grp_fu_72_p2)
);

music_fmul_32ns_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fmul_32ns_3ibs_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_76_p0),
    .din1(grp_fu_76_p1),
    .ce(1'b1),
    .dout(grp_fu_76_p2)
);

music_fmul_32ns_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fmul_32ns_3ibs_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x2_reg_720),
    .din1(x2_reg_720),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

music_fmul_32ns_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fmul_32ns_3ibs_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x3_reg_726),
    .din1(x3_reg_726),
    .ce(1'b1),
    .dout(grp_fu_84_p2)
);

music_fdiv_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fdiv_32ns_3jbC_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d1_3_reg_685),
    .din1(largest_3_reg_700),
    .ce(1'b1),
    .dout(grp_fu_89_p2)
);

music_fdiv_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fdiv_32ns_3jbC_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d2_3_reg_690),
    .din1(largest_3_reg_700),
    .ce(1'b1),
    .dout(grp_fu_93_p2)
);

music_fdiv_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fdiv_32ns_3jbC_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d3_3_reg_695),
    .din1(largest_3_reg_700),
    .ce(1'b1),
    .dout(grp_fu_97_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_101_p0),
    .din1(grp_fu_101_p1),
    .ce(1'b1),
    .opcode(grp_fu_101_opcode),
    .dout(grp_fu_101_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d1_4_fu_169_p1),
    .din1(largest_4_fu_227_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_105_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d1_4_fu_169_p1),
    .din1(d3_fu_256_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_109_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d2_4_fu_198_p1),
    .din1(d1_4_fu_169_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_113_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d2_4_fu_198_p1),
    .din1(largest_4_fu_227_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_117_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d2_4_fu_198_p1),
    .din1(d3_fu_256_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_121_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(largest_4_fu_227_p1),
    .din1(d1_4_fu_169_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_125_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(largest_4_fu_227_p1),
    .din1(d2_4_fu_198_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_129_p2)
);

music_fcmp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3kbM_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(largest_4_fu_227_p1),
    .din1(d3_fu_256_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_133_p2)
);

music_fsqrt_32ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fsqrt_32ns_lbW_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_143),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_return_preg <= ap_phi_mux_p_0_phi_fu_60_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln201_fu_603_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0_reg_56 <= 32'd0;
    end else if (((1'd0 == and_ln201_reg_710) & (1'b1 == ap_CS_fsm_state29))) begin
        p_0_reg_56 <= grp_fu_76_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        and_ln201_reg_710 <= and_ln201_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d1_3_reg_685[30 : 0] <= d1_3_fu_519_p3[30 : 0];
        d2_3_reg_690[30 : 0] <= d2_3_fu_532_p3[30 : 0];
        d3_3_reg_695[30 : 0] <= d3_3_fu_546_p3[30 : 0];
        largest_3_reg_700[30 : 0] <= largest_3_fu_560_p3[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        d1_4_reg_609[30 : 0] <= d1_4_fu_169_p1[30 : 0];
        d2_4_reg_621[30 : 0] <= d2_4_fu_198_p1[30 : 0];
        d3_reg_646[30 : 0] <= d3_fu_256_p1[30 : 0];
        largest_4_reg_633[30 : 0] <= largest_4_fu_227_p1[30 : 0];
        or_ln179_1_reg_664 <= or_ln179_1_fu_313_p2;
        or_ln179_2_reg_671 <= or_ln179_2_fu_341_p2;
        or_ln179_3_reg_678 <= or_ln179_3_fu_369_p2;
        or_ln179_reg_657 <= or_ln179_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_143 <= grp_fu_67_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        s2_reg_747 <= grp_fu_72_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_i_i_reg_752 <= grp_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        x1_reg_714 <= grp_fu_89_p2;
        x2_reg_720 <= grp_fu_93_p2;
        x3_reg_726 <= grp_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        x1_sqd_reg_732 <= grp_fu_76_p2;
        x2_sqd_reg_737 <= grp_fu_80_p2;
        x3_sqd_reg_742 <= grp_fu_84_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln201_reg_710) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_phi_mux_p_0_phi_fu_60_p4 = grp_fu_76_p2;
    end else begin
        ap_phi_mux_p_0_phi_fu_60_p4 = p_0_reg_56;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_return = ap_phi_mux_p_0_phi_fu_60_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_101_opcode = 5'd1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_101_opcode = 5'd2;
    end else begin
        grp_fu_101_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_101_p0 = largest_3_fu_560_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_101_p0 = d1_4_fu_169_p1;
    end else begin
        grp_fu_101_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_101_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_101_p1 = d2_4_fu_198_p1;
    end else begin
        grp_fu_101_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_67_p0 = reg_143;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_67_p0 = x1_sqd_reg_732;
    end else begin
        grp_fu_67_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_67_p1 = s2_reg_747;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_67_p1 = 32'd1065353216;
    end else begin
        grp_fu_67_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_76_p0 = largest_3_reg_700;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_76_p0 = x1_reg_714;
    end else begin
        grp_fu_76_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_76_p1 = tmp_i_i_reg_752;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_76_p1 = x1_reg_714;
    end else begin
        grp_fu_76_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'd1 == and_ln201_fu_603_p2) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln179_1_fu_411_p2 = (and_ln179_7_fu_405_p2 & and_ln179_2_fu_379_p2);

assign and_ln179_2_fu_379_p2 = (grp_fu_101_p2 & and_ln179_fu_375_p2);

assign and_ln179_3_fu_385_p2 = (or_ln179_reg_657 & or_ln179_2_reg_671);

assign and_ln179_4_fu_389_p2 = (grp_fu_105_p2 & and_ln179_3_fu_385_p2);

assign and_ln179_5_fu_395_p2 = (or_ln179_reg_657 & or_ln179_3_reg_678);

assign and_ln179_6_fu_399_p2 = (grp_fu_109_p2 & and_ln179_5_fu_395_p2);

assign and_ln179_7_fu_405_p2 = (and_ln179_6_fu_399_p2 & and_ln179_4_fu_389_p2);

assign and_ln179_fu_375_p2 = (or_ln179_reg_657 & or_ln179_1_reg_664);

assign and_ln184_1_fu_423_p2 = (or_ln179_2_reg_671 & or_ln179_1_reg_664);

assign and_ln184_2_fu_427_p2 = (grp_fu_117_p2 & and_ln184_1_fu_423_p2);

assign and_ln184_3_fu_433_p2 = (or_ln179_3_reg_678 & or_ln179_1_reg_664);

assign and_ln184_4_fu_437_p2 = (grp_fu_121_p2 & and_ln184_3_fu_433_p2);

assign and_ln184_5_fu_501_p2 = (and_ln184_4_fu_437_p2 & and_ln184_2_fu_427_p2);

assign and_ln184_6_fu_507_p2 = (xor_ln179_fu_495_p2 & and_ln184_fu_417_p2);

assign and_ln184_7_fu_513_p2 = (and_ln184_6_fu_507_p2 & and_ln184_5_fu_501_p2);

assign and_ln184_fu_417_p2 = (grp_fu_113_p2 & and_ln179_fu_375_p2);

assign and_ln189_1_fu_471_p2 = (and_ln189_fu_443_p2 & and_ln189_5_fu_465_p2);

assign and_ln189_2_fu_449_p2 = (grp_fu_129_p2 & and_ln184_1_fu_423_p2);

assign and_ln189_3_fu_455_p2 = (or_ln179_3_reg_678 & or_ln179_2_reg_671);

assign and_ln189_4_fu_459_p2 = (grp_fu_133_p2 & and_ln189_3_fu_455_p2);

assign and_ln189_5_fu_465_p2 = (and_ln189_4_fu_459_p2 & and_ln189_2_fu_449_p2);

assign and_ln189_fu_443_p2 = (grp_fu_125_p2 & and_ln179_3_fu_385_p2);

assign and_ln201_fu_603_p2 = (or_ln201_fu_597_p2 & grp_fu_101_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign bitcast_ln201_fu_568_p1 = largest_3_reg_700;

assign d1_3_fu_519_p3 = ((and_ln184_7_fu_513_p2[0:0] === 1'b1) ? d1_4_reg_609 : d1_fu_489_p3);

assign d1_4_fu_169_p1 = p_Result_s_fu_161_p3;

assign d1_fu_489_p3 = ((and_ln179_1_fu_411_p2[0:0] === 1'b1) ? d2_4_reg_621 : d1_4_reg_609);

assign d2_3_fu_532_p3 = ((and_ln184_7_fu_513_p2[0:0] === 1'b1) ? largest_4_reg_633 : d2_fu_526_p3);

assign d2_4_fu_198_p1 = p_Result_27_fu_190_p3;

assign d2_fu_526_p3 = ((and_ln179_1_fu_411_p2[0:0] === 1'b1) ? largest_4_reg_633 : d2_4_reg_621);

assign d3_1_fu_477_p3 = ((and_ln189_1_fu_471_p2[0:0] === 1'b1) ? d3_reg_646 : largest_4_reg_633);

assign d3_2_fu_539_p3 = ((and_ln179_1_fu_411_p2[0:0] === 1'b1) ? d3_reg_646 : d3_1_fu_477_p3);

assign d3_3_fu_546_p3 = ((and_ln184_7_fu_513_p2[0:0] === 1'b1) ? d3_reg_646 : d3_2_fu_539_p3);

assign d3_fu_256_p1 = p_Result_29_fu_248_p3;

assign icmp_ln179_1_fu_289_p2 = ((trunc_ln189_fu_157_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln179_2_fu_301_p2 = ((tmp_2_fu_273_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln179_3_fu_307_p2 = ((trunc_ln189_1_fu_186_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln179_4_fu_329_p2 = ((tmp_4_fu_319_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln179_5_fu_335_p2 = ((trunc_ln189_2_fu_215_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln179_6_fu_357_p2 = ((tmp_6_fu_347_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln179_7_fu_363_p2 = ((trunc_ln189_3_fu_244_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln179_fu_283_p2 = ((tmp_1_fu_263_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln201_1_fu_591_p2 = ((trunc_ln201_fu_581_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln201_fu_585_p2 = ((tmp_14_fu_571_p4 != 8'd255) ? 1'b1 : 1'b0);

assign largest_1_fu_483_p3 = ((and_ln189_1_fu_471_p2[0:0] === 1'b1) ? largest_4_reg_633 : d3_reg_646);

assign largest_2_fu_553_p3 = ((and_ln179_1_fu_411_p2[0:0] === 1'b1) ? d1_4_reg_609 : largest_1_fu_483_p3);

assign largest_3_fu_560_p3 = ((and_ln184_7_fu_513_p2[0:0] === 1'b1) ? d2_4_reg_621 : largest_2_fu_553_p3);

assign largest_4_fu_227_p1 = p_Result_28_fu_219_p3;

assign or_ln179_1_fu_313_p2 = (icmp_ln179_3_fu_307_p2 | icmp_ln179_2_fu_301_p2);

assign or_ln179_2_fu_341_p2 = (icmp_ln179_5_fu_335_p2 | icmp_ln179_4_fu_329_p2);

assign or_ln179_3_fu_369_p2 = (icmp_ln179_7_fu_363_p2 | icmp_ln179_6_fu_357_p2);

assign or_ln179_fu_295_p2 = (icmp_ln179_fu_283_p2 | icmp_ln179_1_fu_289_p2);

assign or_ln201_fu_597_p2 = (icmp_ln201_fu_585_p2 | icmp_ln201_1_fu_591_p2);

assign p_Result_27_fu_190_p3 = {{1'd0}, {trunc_ln368_1_fu_182_p1}};

assign p_Result_28_fu_219_p3 = {{1'd0}, {trunc_ln368_2_fu_211_p1}};

assign p_Result_29_fu_248_p3 = {{1'd0}, {trunc_ln368_3_fu_240_p1}};

assign p_Result_s_fu_161_p3 = {{1'd0}, {trunc_ln368_fu_153_p1}};

assign p_Val2_32_fu_178_p1 = a_M_imag;

assign p_Val2_33_fu_207_p1 = b_M_real;

assign p_Val2_34_fu_236_p1 = b_M_imag;

assign p_Val2_s_fu_149_p1 = a_M_real;

assign tmp_14_fu_571_p4 = {{bitcast_ln201_fu_568_p1[30:23]}};

assign tmp_1_fu_263_p4 = {{p_Val2_s_fu_149_p1[30:23]}};

assign tmp_2_fu_273_p4 = {{p_Val2_32_fu_178_p1[30:23]}};

assign tmp_4_fu_319_p4 = {{p_Val2_33_fu_207_p1[30:23]}};

assign tmp_6_fu_347_p4 = {{p_Val2_34_fu_236_p1[30:23]}};

assign trunc_ln189_1_fu_186_p1 = p_Val2_32_fu_178_p1[22:0];

assign trunc_ln189_2_fu_215_p1 = p_Val2_33_fu_207_p1[22:0];

assign trunc_ln189_3_fu_244_p1 = p_Val2_34_fu_236_p1[22:0];

assign trunc_ln189_fu_157_p1 = p_Val2_s_fu_149_p1[22:0];

assign trunc_ln201_fu_581_p1 = bitcast_ln201_fu_568_p1[22:0];

assign trunc_ln368_1_fu_182_p1 = p_Val2_32_fu_178_p1[30:0];

assign trunc_ln368_2_fu_211_p1 = p_Val2_33_fu_207_p1[30:0];

assign trunc_ln368_3_fu_240_p1 = p_Val2_34_fu_236_p1[30:0];

assign trunc_ln368_fu_153_p1 = p_Val2_s_fu_149_p1[30:0];

assign xor_ln179_fu_495_p2 = (1'd1 ^ and_ln179_1_fu_411_p2);

always @ (posedge ap_clk) begin
    d1_4_reg_609[31] <= 1'b0;
    d2_4_reg_621[31] <= 1'b0;
    largest_4_reg_633[31] <= 1'b0;
    d3_reg_646[31] <= 1'b0;
    d1_3_reg_685[31] <= 1'b0;
    d2_3_reg_690[31] <= 1'b0;
    d3_3_reg_695[31] <= 1'b0;
    largest_3_reg_700[31] <= 1'b0;
end

endmodule //qrf_magnitude_float_s
