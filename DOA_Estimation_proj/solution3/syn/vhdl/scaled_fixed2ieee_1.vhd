-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scaled_fixed2ieee_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (28 downto 0);
    prescale : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of scaled_fixed2ieee_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_272_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_474 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln307_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln307_reg_479 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln306_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln313_fu_302_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln313_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln313_reg_494 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_498 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_load_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal isNeg_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1311_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1311_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_V_fu_370_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln1287_fu_374_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln1452_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln316_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_bits_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_bits_V_ce0 : STD_LOGIC;
    signal out_bits_V_we0 : STD_LOGIC;
    signal out_bits_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_bits_V_ce1 : STD_LOGIC;
    signal out_bits_V_we1 : STD_LOGIC;
    signal out_bits_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_reg_147 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_0107_0_reg_158 : STD_LOGIC_VECTOR (28 downto 0);
    signal shift_0_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_0_reg_180 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_s_reg_191 : STD_LOGIC_VECTOR (27 downto 0);
    signal shift_1_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln314_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_210_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_220_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln566_fu_241_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_245_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_283_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ush_fu_342_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1287_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1310_fu_363_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sub_ln324_fu_388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln324_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp1_fu_420_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_fu_416_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_exp_V_fu_438_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal significand_V_fu_430_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_22_fu_446_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln348_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component scaled_fixed2ieeebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scaled_fixed2ieeecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    out_bits_V_U : component scaled_fixed2ieeebkb
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_bits_V_address0,
        ce0 => out_bits_V_ce0,
        we0 => out_bits_V_we0,
        d0 => out_bits_V_d0,
        q0 => out_bits_V_q0,
        address1 => out_bits_V_address1,
        ce1 => out_bits_V_ce1,
        we1 => out_bits_V_we1,
        d1 => out_bits_V_d1);

    c_U : component scaled_fixed2ieeecud
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                                        ap_return_preg(30 downto 0) <= bitcast_ln348_fu_456_p1(30 downto 0);
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i1_0_reg_147 <= i_reg_474;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i1_0_reg_147 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i2_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_0_reg_180 <= ap_const_lv2_0;
            elsif (((icmp_ln316_fu_378_p2 = ap_const_lv1_1) and (icmp_ln313_reg_494 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i2_0_reg_180 <= i_1_reg_498;
            end if; 
        end if;
    end process;

    p_0107_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0107_0_reg_158 <= in_V;
            elsif (((icmp_ln316_fu_378_p2 = ap_const_lv1_1) and (icmp_ln313_reg_494 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0107_0_reg_158 <= r_V_fu_370_p1;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_378_p2 = ap_const_lv1_0) and (icmp_ln313_reg_494 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_Val2_s_reg_191 <= trunc_ln1287_fu_374_p1;
            elsif (((icmp_ln313_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_reg_191 <= trunc_ln313_fu_302_p1;
            end if; 
        end if;
    end process;

    shift_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                shift_0_reg_168 <= ap_const_lv32_0;
            elsif (((icmp_ln316_fu_378_p2 = ap_const_lv1_1) and (icmp_ln313_reg_494 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                shift_0_reg_168 <= shift_fu_337_p2;
            end if; 
        end if;
    end process;

    shift_1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_378_p2 = ap_const_lv1_0) and (icmp_ln313_reg_494 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                shift_1_reg_200 <= shift_fu_337_p2;
            elsif (((icmp_ln313_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_1_reg_200 <= shift_0_reg_168;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                c_load_reg_508 <= c_q0;
                isNeg_reg_515 <= c_q0(31 downto 31);
                sub_ln1311_reg_521 <= sub_ln1311_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_498 <= i_1_fu_312_p2;
                icmp_ln313_reg_494 <= icmp_ln313_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_474 <= i_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln313_reg_494 = ap_const_lv1_1) or (icmp_ln316_fu_378_p2 = ap_const_lv1_0)))) then
                icmp_ln1452_reg_545 <= icmp_ln1452_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln307_reg_479(1 downto 0) <= zext_ln307_fu_278_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln307_reg_479(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    ap_return_preg(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln306_fu_266_p2, ap_CS_fsm_state4, icmp_ln313_fu_306_p2, icmp_ln313_reg_494, ap_CS_fsm_state6, icmp_ln316_fu_378_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln306_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln313_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln313_reg_494 = ap_const_lv1_1) or (icmp_ln316_fu_378_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state7, bitcast_ln348_fu_456_p1, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return <= bitcast_ln348_fu_456_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln348_fu_456_p1 <= p_Result_22_fu_446_p4;

    c_address0_assign_proc : process(zext_ln307_reg_479, ap_CS_fsm_state4, ap_CS_fsm_state3, zext_ln314_fu_318_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address0 <= zext_ln314_fu_318_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_address0 <= zext_ln307_reg_479(1 - 1 downto 0);
        else 
            c_address0 <= "X";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    c_d0_proc : process(p_Result_s_fu_283_p4)
    begin
        c_d0 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_s_fu_283_p4(i) = '1' then
                c_d0 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_416_p1 <= newexp_fu_397_p2(8 - 1 downto 0);
    i_1_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(i2_0_reg_180));
    i_fu_272_p2 <= std_logic_vector(unsigned(i1_0_reg_147) + unsigned(ap_const_lv2_1));
    icmp_ln1452_fu_383_p2 <= "1" when (in_V = ap_const_lv29_0) else "0";
    icmp_ln306_fu_266_p2 <= "1" when (i1_0_reg_147 = ap_const_lv2_2) else "0";
    icmp_ln313_fu_306_p2 <= "1" when (i2_0_reg_180 = ap_const_lv2_2) else "0";
    icmp_ln316_fu_378_p2 <= "1" when (c_load_reg_508 = ap_const_lv32_10) else "0";
    lshr_ln1287_fu_351_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1287_fu_347_p1),to_integer(unsigned('0' & ush_fu_342_p3(31-1 downto 0)))));
    newexp_fu_397_p2 <= std_logic_vector(signed(sext_ln324_fu_393_p1) - signed(shift_1_reg_200));
    or_ln330_fu_411_p2 <= (tmp_fu_403_p3 or icmp_ln1452_reg_545);

    out_bits_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln307_fu_278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_bits_V_address0 <= zext_ln307_fu_278_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            out_bits_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            out_bits_V_address0 <= "X";
        end if; 
    end process;

    out_bits_V_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    out_bits_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            out_bits_V_ce0 <= ap_const_logic_1;
        else 
            out_bits_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_bits_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            out_bits_V_ce1 <= ap_const_logic_1;
        else 
            out_bits_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_bits_V_d0 <= (tmp_3_fu_220_p3 & ap_const_lv32_0(14 downto 0));
    out_bits_V_d1 <= (tmp_4_fu_245_p3 & ap_const_lv32_0(17 downto 0));

    out_bits_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            out_bits_V_we0 <= ap_const_logic_1;
        else 
            out_bits_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_bits_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            out_bits_V_we1 <= ap_const_logic_1;
        else 
            out_bits_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    out_exp_V_fu_438_p3 <= 
        ap_const_lv8_0 when (or_ln330_fu_411_p2(0) = '1') else 
        empty_fu_416_p1;
    p_Result_1_fu_210_p4 <= in_V(28 downto 13);
    p_Result_22_fu_446_p4 <= ((ap_const_lv1_0 & out_exp_V_fu_438_p3) & significand_V_fu_430_p3);
    
    p_Result_s_fu_283_p4_proc : process(out_bits_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_s_fu_283_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := out_bits_V_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_s_fu_283_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_s_fu_283_p4_i) := out_bits_V_q0(32-1-p_Result_s_fu_283_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_283_p4 <= resvalue(32-1 downto 0);
    end process;

    phitmp1_fu_420_p4 <= p_Val2_s_reg_191(27 downto 5);
    r_V_fu_370_p1 <= select_ln1310_fu_363_p3(29 - 1 downto 0);
    select_ln1310_fu_363_p3 <= 
        lshr_ln1287_fu_351_p2 when (isNeg_reg_515(0) = '1') else 
        shl_ln1253_fu_357_p2;
        sext_ln324_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln324_fu_388_p2),32));

    shift_fu_337_p2 <= std_logic_vector(unsigned(c_load_reg_508) + unsigned(shift_0_reg_168));
    shl_ln1253_fu_357_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1287_fu_347_p1),to_integer(unsigned('0' & ush_fu_342_p3(31-1 downto 0)))));
    significand_V_fu_430_p3 <= 
        ap_const_lv23_0 when (or_ln330_fu_411_p2(0) = '1') else 
        phitmp1_fu_420_p4;
    sub_ln1311_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(c_q0));
    sub_ln324_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv9_7F) - unsigned(prescale));
    tmp_3_fu_220_p3 <= (p_Result_1_fu_210_p4 & ap_const_lv1_1);
    tmp_4_fu_245_p3 <= (trunc_ln566_fu_241_p1 & ap_const_lv1_1);
    tmp_fu_403_p3 <= newexp_fu_397_p2(31 downto 31);
    trunc_ln1287_fu_374_p1 <= select_ln1310_fu_363_p3(28 - 1 downto 0);
    trunc_ln313_fu_302_p1 <= p_0107_0_reg_158(28 - 1 downto 0);
    trunc_ln566_fu_241_p1 <= in_V(13 - 1 downto 0);
    ush_fu_342_p3 <= 
        sub_ln1311_reg_521 when (isNeg_reg_515(0) = '1') else 
        c_load_reg_508;
    zext_ln1287_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0107_0_reg_158),32));
    zext_ln307_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_147),64));
    zext_ln314_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_180),64));
end behav;
