-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qrf_top_Loop_qrf_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    R_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    R_M_real_ce0 : OUT STD_LOGIC;
    R_M_real_we0 : OUT STD_LOGIC;
    R_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Ri_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Ri_M_real_ce0 : OUT STD_LOGIC;
    Ri_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    R_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    R_M_imag_ce0 : OUT STD_LOGIC;
    R_M_imag_we0 : OUT STD_LOGIC;
    R_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Ri_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Ri_M_imag_ce0 : OUT STD_LOGIC;
    Ri_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Qi_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Qi_M_real_ce0 : OUT STD_LOGIC;
    Qi_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Qi_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Qi_M_imag_ce0 : OUT STD_LOGIC;
    Qi_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Q_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Q_M_real_ce0 : OUT STD_LOGIC;
    Q_M_real_we0 : OUT STD_LOGIC;
    Q_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Q_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Q_M_imag_ce0 : OUT STD_LOGIC;
    Q_M_imag_we0 : OUT STD_LOGIC;
    Q_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of qrf_top_Loop_qrf_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c15_0_i_reg_175 : STD_LOGIC_VECTOR (2 downto 0);
    signal c16_0_i_reg_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln532_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_203_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_326 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln545_fu_209_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln545_reg_331 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln533_fu_221_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln533_reg_336 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln533_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln533_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal c_fu_231_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_2_fu_252_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_361 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln541_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal c_1_fu_295_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln543_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln543_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln545_2_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_2_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal r14_0_i_reg_163 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln538_1_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln538_3_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_fu_213_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln538_fu_237_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln538_fu_241_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln538_2_fu_260_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln538_1_fu_263_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln155_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln155_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln545_1_fu_307_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln545_fu_311_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln532_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln532_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln532_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c15_0_i_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln533_fu_225_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c15_0_i_reg_175 <= c_fu_231_p2;
            elsif (((icmp_ln532_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c15_0_i_reg_175 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c16_0_i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c16_0_i_reg_186 <= ap_const_lv3_0;
            elsif (((icmp_ln541_fu_289_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c16_0_i_reg_186 <= c_1_fu_295_p2;
            end if; 
        end if;
    end process;

    r14_0_i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r14_0_i_reg_163 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                r14_0_i_reg_163 <= r_reg_326;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln533_reg_342 <= icmp_ln533_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln541_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln543_reg_375 <= icmp_ln543_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_326 <= r_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln533_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    tmp_2_reg_361(4 downto 2) <= tmp_2_fu_252_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln532_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln533_reg_336(4 downto 2) <= zext_ln533_fu_221_p1(4 downto 2);
                    zext_ln545_reg_331(2 downto 0) <= zext_ln545_fu_209_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln543_fu_301_p2 = ap_const_lv1_0) and (icmp_ln541_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    zext_ln545_2_reg_379(5 downto 0) <= zext_ln545_2_fu_316_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln545_reg_331(5 downto 3) <= "000";
    zext_ln533_reg_336(1 downto 0) <= "00";
    zext_ln533_reg_336(5) <= '0';
    tmp_2_reg_361(1 downto 0) <= "00";
    zext_ln545_2_reg_379(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln532_fu_197_p2, ap_CS_fsm_state2, icmp_ln533_fu_225_p2, ap_enable_reg_pp0_iter0, icmp_ln541_fu_289_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln532_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln533_fu_225_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln533_fu_225_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln541_fu_289_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln541_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Q_M_imag_address0 <= zext_ln538_3_fu_268_p1(4 - 1 downto 0);

    Q_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Q_M_imag_ce0 <= ap_const_logic_1;
        else 
            Q_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_M_imag_d0 <= xor_ln155_fu_278_p2;

    Q_M_imag_we0_assign_proc : process(icmp_ln533_reg_342, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln533_reg_342 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Q_M_imag_we0 <= ap_const_logic_1;
        else 
            Q_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_M_real_address0 <= zext_ln538_3_fu_268_p1(4 - 1 downto 0);

    Q_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Q_M_real_ce0 <= ap_const_logic_1;
        else 
            Q_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_M_real_d0 <= Qi_M_real_q0;

    Q_M_real_we0_assign_proc : process(icmp_ln533_reg_342, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln533_reg_342 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Q_M_real_we0 <= ap_const_logic_1;
        else 
            Q_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Qi_M_imag_address0 <= zext_ln538_1_fu_246_p1(4 - 1 downto 0);

    Qi_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Qi_M_imag_ce0 <= ap_const_logic_1;
        else 
            Qi_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Qi_M_real_address0 <= zext_ln538_1_fu_246_p1(4 - 1 downto 0);

    Qi_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Qi_M_real_ce0 <= ap_const_logic_1;
        else 
            Qi_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_M_imag_address0 <= zext_ln545_2_reg_379(4 - 1 downto 0);

    R_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            R_M_imag_ce0 <= ap_const_logic_1;
        else 
            R_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_M_imag_d0 <= Ri_M_imag_q0;

    R_M_imag_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln543_reg_375, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln543_reg_375 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            R_M_imag_we0 <= ap_const_logic_1;
        else 
            R_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    R_M_real_address0 <= zext_ln545_2_reg_379(4 - 1 downto 0);

    R_M_real_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            R_M_real_ce0 <= ap_const_logic_1;
        else 
            R_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_M_real_d0 <= Ri_M_real_q0;

    R_M_real_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln543_reg_375, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln543_reg_375 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            R_M_real_we0 <= ap_const_logic_1;
        else 
            R_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Ri_M_imag_address0 <= zext_ln545_2_fu_316_p1(4 - 1 downto 0);

    Ri_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            Ri_M_imag_ce0 <= ap_const_logic_1;
        else 
            Ri_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Ri_M_real_address0 <= zext_ln545_2_fu_316_p1(4 - 1 downto 0);

    Ri_M_real_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            Ri_M_real_ce0 <= ap_const_logic_1;
        else 
            Ri_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln538_1_fu_263_p2 <= std_logic_vector(unsigned(zext_ln545_reg_331) + unsigned(zext_ln538_2_fu_260_p1));
    add_ln538_fu_241_p2 <= std_logic_vector(unsigned(zext_ln538_fu_237_p1) + unsigned(zext_ln533_reg_336));
    add_ln545_fu_311_p2 <= std_logic_vector(unsigned(zext_ln533_reg_336) + unsigned(zext_ln545_1_fu_307_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln533_fu_225_p2)
    begin
        if ((icmp_ln533_fu_225_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln541_fu_289_p2)
    begin
        if ((icmp_ln541_fu_289_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln532_fu_197_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln532_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln532_fu_197_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln532_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln155_fu_274_p1 <= Qi_M_imag_q0;
    c_1_fu_295_p2 <= std_logic_vector(unsigned(c16_0_i_reg_186) + unsigned(ap_const_lv3_1));
    c_fu_231_p2 <= std_logic_vector(unsigned(c15_0_i_reg_175) + unsigned(ap_const_lv3_1));
    icmp_ln532_fu_197_p2 <= "1" when (r14_0_i_reg_163 = ap_const_lv3_4) else "0";
    icmp_ln533_fu_225_p2 <= "1" when (c15_0_i_reg_175 = ap_const_lv3_4) else "0";
    icmp_ln541_fu_289_p2 <= "1" when (c16_0_i_reg_186 = ap_const_lv3_4) else "0";
    icmp_ln543_fu_301_p2 <= "1" when (unsigned(r14_0_i_reg_163) > unsigned(c16_0_i_reg_186)) else "0";
    r_fu_203_p2 <= std_logic_vector(unsigned(r14_0_i_reg_163) + unsigned(ap_const_lv3_1));
    tmp_2_fu_252_p3 <= (c15_0_i_reg_175 & ap_const_lv2_0);
    tmp_fu_213_p3 <= (r14_0_i_reg_163 & ap_const_lv2_0);
    xor_ln155_fu_278_p2 <= (bitcast_ln155_fu_274_p1 xor ap_const_lv32_80000000);
    zext_ln533_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_213_p3),6));
    zext_ln538_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln538_fu_241_p2),64));
    zext_ln538_2_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_361),6));
    zext_ln538_3_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln538_1_fu_263_p2),64));
    zext_ln538_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c15_0_i_reg_175),6));
    zext_ln545_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c16_0_i_reg_186),6));
    zext_ln545_2_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln545_fu_311_p2),64));
    zext_ln545_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r14_0_i_reg_163),6));
end behav;
