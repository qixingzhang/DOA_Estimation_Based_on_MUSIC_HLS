-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qrf_magnitude_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
    a_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    b_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
    b_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of qrf_magnitude_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (48 downto 0) := "0000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (48 downto 0) := "0000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (48 downto 0) := "0000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (48 downto 0) := "0000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (48 downto 0) := "0000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (48 downto 0) := "0000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (48 downto 0) := "0001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (48 downto 0) := "0010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (48 downto 0) := "0100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (48 downto 0) := "1000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_67_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal d1_4_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_4_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal d2_4_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d2_4_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal largest_4_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal largest_4_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal d3_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d3_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln179_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_1_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_2_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_2_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_3_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_3_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_1_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln189_1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_1_reg_683 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_7_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_7_reg_689 : STD_LOGIC_VECTOR (0 downto 0);
    signal d1_3_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_3_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal d2_3_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d2_3_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal d3_3_fu_539_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d3_3_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal largest_3_fu_551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal largest_3_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln201_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln201_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_89_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_97_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x3_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_sqd_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_sqd_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x3_sqd_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_72_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_phi_mux_p_0_phi_fu_60_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_67_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_67_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_76_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal p_Val2_s_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_153_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_s_fu_161_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_32_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_1_fu_182_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_27_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_33_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_2_fu_211_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_28_fu_219_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_34_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_3_fu_240_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_29_fu_248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_263_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_fu_157_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln179_1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_1_fu_186_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln179_3_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_2_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_319_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_2_fu_215_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln179_5_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_4_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_347_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_3_fu_244_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln179_7_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_6_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_3_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_5_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_4_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_6_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_7_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_2_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_3_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_2_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_4_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_5_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_2_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_4_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln179_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_6_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln184_5_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d1_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d2_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d3_1_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d3_2_fu_533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal largest_1_fu_506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal largest_2_fu_545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln201_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_561_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln201_fu_571_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln201_1_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln201_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_101_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (48 downto 0);

    component music_fadd_32ns_3ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fmul_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fdiv_32ns_3ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fcmp_32ns_3pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component music_fsqrt_32ns_qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    music_fadd_32ns_3ocq_U52 : component music_fadd_32ns_3ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_67_p0,
        din1 => grp_fu_67_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_67_p2);

    music_fadd_32ns_3ocq_U53 : component music_fadd_32ns_3ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x2_sqd_reg_749,
        din1 => x3_sqd_reg_754,
        ce => ap_const_logic_1,
        dout => grp_fu_72_p2);

    music_fmul_32ns_3jbC_U54 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_76_p0,
        din1 => grp_fu_76_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_76_p2);

    music_fmul_32ns_3jbC_U55 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x2_reg_732,
        din1 => x2_reg_732,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p2);

    music_fmul_32ns_3jbC_U56 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x3_reg_738,
        din1 => x3_reg_738,
        ce => ap_const_logic_1,
        dout => grp_fu_84_p2);

    music_fdiv_32ns_3ncg_U57 : component music_fdiv_32ns_3ncg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d1_3_reg_697,
        din1 => largest_3_reg_712,
        ce => ap_const_logic_1,
        dout => grp_fu_89_p2);

    music_fdiv_32ns_3ncg_U58 : component music_fdiv_32ns_3ncg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d2_3_reg_702,
        din1 => largest_3_reg_712,
        ce => ap_const_logic_1,
        dout => grp_fu_93_p2);

    music_fdiv_32ns_3ncg_U59 : component music_fdiv_32ns_3ncg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d3_3_reg_707,
        din1 => largest_3_reg_712,
        ce => ap_const_logic_1,
        dout => grp_fu_97_p2);

    music_fcmp_32ns_3pcA_U60 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_101_p0,
        din1 => grp_fu_101_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_101_opcode,
        dout => grp_fu_101_p2);

    music_fcmp_32ns_3pcA_U61 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d1_4_fu_169_p1,
        din1 => largest_4_fu_227_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_105_p2);

    music_fcmp_32ns_3pcA_U62 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d1_4_fu_169_p1,
        din1 => d3_fu_256_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_109_p2);

    music_fcmp_32ns_3pcA_U63 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d2_4_fu_198_p1,
        din1 => d1_4_fu_169_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_113_p2);

    music_fcmp_32ns_3pcA_U64 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d2_4_fu_198_p1,
        din1 => largest_4_fu_227_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_117_p2);

    music_fcmp_32ns_3pcA_U65 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d2_4_fu_198_p1,
        din1 => d3_fu_256_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_121_p2);

    music_fcmp_32ns_3pcA_U66 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => largest_4_fu_227_p1,
        din1 => d1_4_fu_169_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_125_p2);

    music_fcmp_32ns_3pcA_U67 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => largest_4_fu_227_p1,
        din1 => d2_4_fu_198_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_129_p2);

    music_fcmp_32ns_3pcA_U68 : component music_fcmp_32ns_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => largest_4_fu_227_p1,
        din1 => d3_fu_256_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_133_p2);

    music_fsqrt_32ns_qcK_U69 : component music_fsqrt_32ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_143,
        ce => ap_const_logic_1,
        dout => grp_fu_138_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    ap_return_preg <= ap_phi_mux_p_0_phi_fu_60_p4;
                end if; 
            end if;
        end if;
    end process;


    p_0_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln201_fu_593_p2))) then 
                p_0_reg_56 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = and_ln201_reg_722))) then 
                p_0_reg_56 <= grp_fu_76_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln179_1_reg_675 <= and_ln179_1_fu_411_p2;
                and_ln184_7_reg_689 <= and_ln184_7_fu_495_p2;
                and_ln189_1_reg_683 <= and_ln189_1_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln201_reg_722 <= and_ln201_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    d1_3_reg_697(30 downto 0) <= d1_3_fu_516_p3(30 downto 0);
                    d2_3_reg_702(30 downto 0) <= d2_3_fu_527_p3(30 downto 0);
                    d3_3_reg_707(30 downto 0) <= d3_3_fu_539_p3(30 downto 0);
                    largest_3_reg_712(30 downto 0) <= largest_3_fu_551_p3(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    d1_4_reg_599(30 downto 0) <= d1_4_fu_169_p1(30 downto 0);
                    d2_4_reg_611(30 downto 0) <= d2_4_fu_198_p1(30 downto 0);
                    d3_reg_636(30 downto 0) <= d3_fu_256_p1(30 downto 0);
                    largest_4_reg_623(30 downto 0) <= largest_4_fu_227_p1(30 downto 0);
                or_ln179_1_reg_654 <= or_ln179_1_fu_313_p2;
                or_ln179_2_reg_661 <= or_ln179_2_fu_341_p2;
                or_ln179_3_reg_668 <= or_ln179_3_fu_369_p2;
                or_ln179_reg_647 <= or_ln179_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_143 <= grp_fu_67_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                s2_reg_759 <= grp_fu_72_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                tmp_i_i_reg_764 <= grp_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                x1_reg_726 <= grp_fu_89_p2;
                x2_reg_732 <= grp_fu_93_p2;
                x3_reg_738 <= grp_fu_97_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                x1_sqd_reg_744 <= grp_fu_76_p2;
                x2_sqd_reg_749 <= grp_fu_80_p2;
                x3_sqd_reg_754 <= grp_fu_84_p2;
            end if;
        end if;
    end process;
    d1_4_reg_599(31) <= '0';
    d2_4_reg_611(31) <= '0';
    largest_4_reg_623(31) <= '0';
    d3_reg_636(31) <= '0';
    d1_3_reg_697(31) <= '0';
    d2_3_reg_702(31) <= '0';
    d3_3_reg_707(31) <= '0';
    largest_3_reg_712(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, and_ln201_fu_593_p2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln201_fu_593_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln179_1_fu_411_p2 <= (and_ln179_7_fu_405_p2 and and_ln179_2_fu_379_p2);
    and_ln179_2_fu_379_p2 <= (grp_fu_101_p2 and and_ln179_fu_375_p2);
    and_ln179_3_fu_385_p2 <= (or_ln179_reg_647 and or_ln179_2_reg_661);
    and_ln179_4_fu_389_p2 <= (grp_fu_105_p2 and and_ln179_3_fu_385_p2);
    and_ln179_5_fu_395_p2 <= (or_ln179_reg_647 and or_ln179_3_reg_668);
    and_ln179_6_fu_399_p2 <= (grp_fu_109_p2 and and_ln179_5_fu_395_p2);
    and_ln179_7_fu_405_p2 <= (and_ln179_6_fu_399_p2 and and_ln179_4_fu_389_p2);
    and_ln179_fu_375_p2 <= (or_ln179_reg_647 and or_ln179_1_reg_654);
    and_ln184_1_fu_423_p2 <= (or_ln179_2_reg_661 and or_ln179_1_reg_654);
    and_ln184_2_fu_427_p2 <= (grp_fu_117_p2 and and_ln184_1_fu_423_p2);
    and_ln184_3_fu_433_p2 <= (or_ln179_3_reg_668 and or_ln179_1_reg_654);
    and_ln184_4_fu_437_p2 <= (grp_fu_121_p2 and and_ln184_3_fu_433_p2);
    and_ln184_5_fu_483_p2 <= (and_ln184_4_fu_437_p2 and and_ln184_2_fu_427_p2);
    and_ln184_6_fu_489_p2 <= (xor_ln179_fu_477_p2 and and_ln184_fu_417_p2);
    and_ln184_7_fu_495_p2 <= (and_ln184_6_fu_489_p2 and and_ln184_5_fu_483_p2);
    and_ln184_fu_417_p2 <= (grp_fu_113_p2 and and_ln179_fu_375_p2);
    and_ln189_1_fu_471_p2 <= (and_ln189_fu_443_p2 and and_ln189_5_fu_465_p2);
    and_ln189_2_fu_449_p2 <= (grp_fu_129_p2 and and_ln184_1_fu_423_p2);
    and_ln189_3_fu_455_p2 <= (or_ln179_3_reg_668 and or_ln179_2_reg_661);
    and_ln189_4_fu_459_p2 <= (grp_fu_133_p2 and and_ln189_3_fu_455_p2);
    and_ln189_5_fu_465_p2 <= (and_ln189_4_fu_459_p2 and and_ln189_2_fu_449_p2);
    and_ln189_fu_443_p2 <= (grp_fu_125_p2 and and_ln179_3_fu_385_p2);
    and_ln201_fu_593_p2 <= (or_ln201_fu_587_p2 and grp_fu_101_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_60_p4_assign_proc : process(and_ln201_reg_722, grp_fu_76_p2, p_0_reg_56, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = and_ln201_reg_722))) then 
            ap_phi_mux_p_0_phi_fu_60_p4 <= grp_fu_76_p2;
        else 
            ap_phi_mux_p_0_phi_fu_60_p4 <= p_0_reg_56;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_0_phi_fu_60_p4, ap_CS_fsm_state49, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            ap_return <= ap_phi_mux_p_0_phi_fu_60_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln201_fu_558_p1 <= largest_3_reg_712;
    d1_3_fu_516_p3 <= 
        d1_4_reg_599 when (and_ln184_7_reg_689(0) = '1') else 
        d1_fu_511_p3;
    d1_4_fu_169_p1 <= p_Result_s_fu_161_p3;
    d1_fu_511_p3 <= 
        d2_4_reg_611 when (and_ln179_1_reg_675(0) = '1') else 
        d1_4_reg_599;
    d2_3_fu_527_p3 <= 
        largest_4_reg_623 when (and_ln184_7_reg_689(0) = '1') else 
        d2_fu_522_p3;
    d2_4_fu_198_p1 <= p_Result_27_fu_190_p3;
    d2_fu_522_p3 <= 
        largest_4_reg_623 when (and_ln179_1_reg_675(0) = '1') else 
        d2_4_reg_611;
    d3_1_fu_501_p3 <= 
        d3_reg_636 when (and_ln189_1_reg_683(0) = '1') else 
        largest_4_reg_623;
    d3_2_fu_533_p3 <= 
        d3_reg_636 when (and_ln179_1_reg_675(0) = '1') else 
        d3_1_fu_501_p3;
    d3_3_fu_539_p3 <= 
        d3_reg_636 when (and_ln184_7_reg_689(0) = '1') else 
        d3_2_fu_533_p3;
    d3_fu_256_p1 <= p_Result_29_fu_248_p3;

    grp_fu_101_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_101_opcode <= ap_const_lv5_1;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_101_opcode <= ap_const_lv5_2;
        else 
            grp_fu_101_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_101_p0_assign_proc : process(ap_CS_fsm_state1, d1_4_fu_169_p1, ap_CS_fsm_state3, largest_3_fu_551_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_101_p0 <= largest_3_fu_551_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_101_p0 <= d1_4_fu_169_p1;
        else 
            grp_fu_101_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_101_p1_assign_proc : process(ap_CS_fsm_state1, d2_4_fu_198_p1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_101_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_101_p1 <= d2_4_fu_198_p1;
        else 
            grp_fu_101_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_67_p0_assign_proc : process(reg_143, x1_sqd_reg_744, ap_CS_fsm_state24, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_67_p0 <= reg_143;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_67_p0 <= x1_sqd_reg_744;
        else 
            grp_fu_67_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_67_p1_assign_proc : process(s2_reg_759, ap_CS_fsm_state24, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_67_p1 <= s2_reg_759;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_67_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_67_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_76_p0_assign_proc : process(largest_3_reg_712, x1_reg_726, ap_CS_fsm_state20, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_76_p0 <= largest_3_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_76_p0 <= x1_reg_726;
        else 
            grp_fu_76_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_76_p1_assign_proc : process(x1_reg_726, tmp_i_i_reg_764, ap_CS_fsm_state20, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_76_p1 <= tmp_i_i_reg_764;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_76_p1 <= x1_reg_726;
        else 
            grp_fu_76_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln179_1_fu_289_p2 <= "1" when (trunc_ln189_fu_157_p1 = ap_const_lv23_0) else "0";
    icmp_ln179_2_fu_301_p2 <= "0" when (tmp_2_fu_273_p4 = ap_const_lv8_FF) else "1";
    icmp_ln179_3_fu_307_p2 <= "1" when (trunc_ln189_1_fu_186_p1 = ap_const_lv23_0) else "0";
    icmp_ln179_4_fu_329_p2 <= "0" when (tmp_4_fu_319_p4 = ap_const_lv8_FF) else "1";
    icmp_ln179_5_fu_335_p2 <= "1" when (trunc_ln189_2_fu_215_p1 = ap_const_lv23_0) else "0";
    icmp_ln179_6_fu_357_p2 <= "0" when (tmp_6_fu_347_p4 = ap_const_lv8_FF) else "1";
    icmp_ln179_7_fu_363_p2 <= "1" when (trunc_ln189_3_fu_244_p1 = ap_const_lv23_0) else "0";
    icmp_ln179_fu_283_p2 <= "0" when (tmp_1_fu_263_p4 = ap_const_lv8_FF) else "1";
    icmp_ln201_1_fu_581_p2 <= "1" when (trunc_ln201_fu_571_p1 = ap_const_lv23_0) else "0";
    icmp_ln201_fu_575_p2 <= "0" when (tmp_14_fu_561_p4 = ap_const_lv8_FF) else "1";
    largest_1_fu_506_p3 <= 
        largest_4_reg_623 when (and_ln189_1_reg_683(0) = '1') else 
        d3_reg_636;
    largest_2_fu_545_p3 <= 
        d1_4_reg_599 when (and_ln179_1_reg_675(0) = '1') else 
        largest_1_fu_506_p3;
    largest_3_fu_551_p3 <= 
        d2_4_reg_611 when (and_ln184_7_reg_689(0) = '1') else 
        largest_2_fu_545_p3;
    largest_4_fu_227_p1 <= p_Result_28_fu_219_p3;
    or_ln179_1_fu_313_p2 <= (icmp_ln179_3_fu_307_p2 or icmp_ln179_2_fu_301_p2);
    or_ln179_2_fu_341_p2 <= (icmp_ln179_5_fu_335_p2 or icmp_ln179_4_fu_329_p2);
    or_ln179_3_fu_369_p2 <= (icmp_ln179_7_fu_363_p2 or icmp_ln179_6_fu_357_p2);
    or_ln179_fu_295_p2 <= (icmp_ln179_fu_283_p2 or icmp_ln179_1_fu_289_p2);
    or_ln201_fu_587_p2 <= (icmp_ln201_fu_575_p2 or icmp_ln201_1_fu_581_p2);
    p_Result_27_fu_190_p3 <= (ap_const_lv1_0 & trunc_ln368_1_fu_182_p1);
    p_Result_28_fu_219_p3 <= (ap_const_lv1_0 & trunc_ln368_2_fu_211_p1);
    p_Result_29_fu_248_p3 <= (ap_const_lv1_0 & trunc_ln368_3_fu_240_p1);
    p_Result_s_fu_161_p3 <= (ap_const_lv1_0 & trunc_ln368_fu_153_p1);
    p_Val2_32_fu_178_p1 <= a_M_imag;
    p_Val2_33_fu_207_p1 <= b_M_real;
    p_Val2_34_fu_236_p1 <= b_M_imag;
    p_Val2_s_fu_149_p1 <= a_M_real;
    tmp_14_fu_561_p4 <= bitcast_ln201_fu_558_p1(30 downto 23);
    tmp_1_fu_263_p4 <= p_Val2_s_fu_149_p1(30 downto 23);
    tmp_2_fu_273_p4 <= p_Val2_32_fu_178_p1(30 downto 23);
    tmp_4_fu_319_p4 <= p_Val2_33_fu_207_p1(30 downto 23);
    tmp_6_fu_347_p4 <= p_Val2_34_fu_236_p1(30 downto 23);
    trunc_ln189_1_fu_186_p1 <= p_Val2_32_fu_178_p1(23 - 1 downto 0);
    trunc_ln189_2_fu_215_p1 <= p_Val2_33_fu_207_p1(23 - 1 downto 0);
    trunc_ln189_3_fu_244_p1 <= p_Val2_34_fu_236_p1(23 - 1 downto 0);
    trunc_ln189_fu_157_p1 <= p_Val2_s_fu_149_p1(23 - 1 downto 0);
    trunc_ln201_fu_571_p1 <= bitcast_ln201_fu_558_p1(23 - 1 downto 0);
    trunc_ln368_1_fu_182_p1 <= p_Val2_32_fu_178_p1(31 - 1 downto 0);
    trunc_ln368_2_fu_211_p1 <= p_Val2_33_fu_207_p1(31 - 1 downto 0);
    trunc_ln368_3_fu_240_p1 <= p_Val2_34_fu_236_p1(31 - 1 downto 0);
    trunc_ln368_fu_153_p1 <= p_Val2_s_fu_149_p1(31 - 1 downto 0);
    xor_ln179_fu_477_p2 <= (ap_const_lv1_1 xor and_ln179_1_fu_411_p2);
end behav;
