// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _bit_reverse235_HH_
#define _bit_reverse235_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct bit_reverse235 : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > X_R_address0;
    sc_out< sc_logic > X_R_ce0;
    sc_in< sc_lv<32> > X_R_q0;
    sc_out< sc_lv<10> > X_I_address0;
    sc_out< sc_logic > X_I_ce0;
    sc_in< sc_lv<32> > X_I_q0;
    sc_out< sc_lv<10> > OUT_R_address0;
    sc_out< sc_logic > OUT_R_ce0;
    sc_out< sc_logic > OUT_R_we0;
    sc_out< sc_lv<32> > OUT_R_d0;
    sc_out< sc_lv<10> > OUT_I_address0;
    sc_out< sc_logic > OUT_I_ce0;
    sc_out< sc_logic > OUT_I_we0;
    sc_out< sc_lv<32> > OUT_I_d0;


    // Module declarations
    bit_reverse235(sc_module_name name);
    SC_HAS_PROCESS(bit_reverse235);

    ~bit_reverse235();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > trunc_ln108_fu_167_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > zext_ln108_fu_171_p1;
    sc_signal< sc_lv<32> > zext_ln108_reg_253;
    sc_signal< sc_lv<11> > i_15_fu_181_p2;
    sc_signal< sc_lv<11> > i_15_reg_261;
    sc_signal< sc_lv<4> > i_fu_193_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > rev_fu_207_p3;
    sc_signal< sc_lv<1> > icmp_ln110_fu_187_p2;
    sc_signal< sc_lv<10> > zext_ln112_fu_225_p1;
    sc_signal< sc_lv<1> > icmp_ln125_fu_229_p2;
    sc_signal< sc_lv<1> > icmp_ln125_reg_284;
    sc_signal< sc_lv<64> > zext_ln128_fu_234_p1;
    sc_signal< sc_lv<64> > zext_ln128_reg_288;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<11> > input_assign_reg_124;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > reversed_reg_136;
    sc_signal< sc_lv<1> > icmp_ln123_fu_175_p2;
    sc_signal< sc_lv<4> > i_0_i_reg_147;
    sc_signal< sc_lv<10> > p_0_i_reg_158;
    sc_signal< sc_lv<64> > zext_ln127_fu_240_p1;
    sc_signal< sc_lv<31> > trunc_ln111_fu_199_p1;
    sc_signal< sc_lv<1> > trunc_ln110_fu_203_p1;
    sc_signal< sc_lv<9> > input_assign_1_fu_215_p4;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_OUT_I_address0();
    void thread_OUT_I_ce0();
    void thread_OUT_I_d0();
    void thread_OUT_I_we0();
    void thread_OUT_R_address0();
    void thread_OUT_R_ce0();
    void thread_OUT_R_d0();
    void thread_OUT_R_we0();
    void thread_X_I_address0();
    void thread_X_I_ce0();
    void thread_X_R_address0();
    void thread_X_R_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_15_fu_181_p2();
    void thread_i_fu_193_p2();
    void thread_icmp_ln110_fu_187_p2();
    void thread_icmp_ln123_fu_175_p2();
    void thread_icmp_ln125_fu_229_p2();
    void thread_input_assign_1_fu_215_p4();
    void thread_rev_fu_207_p3();
    void thread_trunc_ln108_fu_167_p1();
    void thread_trunc_ln110_fu_203_p1();
    void thread_trunc_ln111_fu_199_p1();
    void thread_zext_ln108_fu_171_p1();
    void thread_zext_ln112_fu_225_p1();
    void thread_zext_ln127_fu_240_p1();
    void thread_zext_ln128_fu_234_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
