-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qrf_givens_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    extra_pass : IN STD_LOGIC_VECTOR (0 downto 0);
    a_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
    a_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    b_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
    b_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of qrf_givens_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_3F800000 : STD_LOGIC_VECTOR (30 downto 0) := "0111111100000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal extra_pass_read_read_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_41_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_41_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln348_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln284_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln348_1_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln306_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_1_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_1_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_qrf_magnitude_float_s_fu_226_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal sqrt_mag_a_mag_b_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_qrf_magnitude_float_s_fu_226_ap_ready : STD_LOGIC;
    signal grp_qrf_magnitude_float_s_fu_226_ap_done : STD_LOGIC;
    signal and_ln284_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln348_2_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln284_2_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_2_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_3_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_3_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln348_4_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln284_4_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_4_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_5_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_5_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_2_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_2_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bitcast_ln348_5_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln284_6_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_6_reg_980 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_7_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_7_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_3_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_3_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal c_tmp_M_real_1_fu_664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i5_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i4_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i4_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_i2_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i4_reg_1024 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_tmp_M_real_1_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal sqrt_mag_a_mag_b_1_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal and_ln306_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln306_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln348_3_fu_796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln306_2_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_2_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_3_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_3_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_M_imag_1_fu_843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_qrf_magnitude_float_s_fu_226_ap_start : STD_LOGIC;
    signal grp_qrf_magnitude_float_s_fu_226_ap_idle : STD_LOGIC;
    signal grp_qrf_magnitude_float_s_fu_226_a_M_real : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_magnitude_float_s_fu_226_a_M_imag : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_M_real_2_phi_fu_78_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_real_2_reg_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_phi_mux_tmp_M_imag_2_phi_fu_89_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_imag_2_reg_85 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_M_real_1_phi_fu_99_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_real_1_reg_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_s_tmp_M_imag_phi_fu_109_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_tmp_M_imag_reg_105 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_c_M_real_write_assi_phi_fu_120_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_M_real_write_assi_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_imag_3_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_c_M_imag_write_assi_phi_fu_132_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_M_imag_write_assi_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_s_M_real_write_assi_phi_fu_143_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_M_real_write_assi_reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_imag_5_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_M_imag_write_assi_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln444_1_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ss_M_real_write_ass_phi_fu_166_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ss_M_real_write_ass_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_cc_M_real_write_ass_phi_fu_176_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cc_M_real_write_ass_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_cc_M_imag_write_ass_phi_fu_186_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cc_M_imag_write_ass_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_r_M_real_write_assi_phi_fu_196_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_M_real_write_assi_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_real_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal and_ln306_1_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_tmp_M_imag_2_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_magnitude_float_s_fu_226_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_317_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_4_fu_381_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_s_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_402_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln284_fu_385_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_s_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_428_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_36_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_449_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln306_fu_432_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln284_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_38_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_6_fu_484_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_31_fu_492_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln284_1_fu_488_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln284_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_39_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_7_fu_540_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_32_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_561_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln284_2_fu_544_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln284_2_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_40_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_8_fu_596_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_33_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_617_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln284_3_fu_600_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln284_3_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_34_fu_649_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_35_fu_656_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln155_2_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln155_1_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln155_4_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln155_2_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln444_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln444_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln306_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_37_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_5_fu_780_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_37_fu_788_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_801_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln306_1_fu_784_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln306_1_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln155_fu_833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln155_fu_837_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component qrf_magnitude_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
        a_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
        b_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
        b_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fadd_32ns_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fsub_32ns_3mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fmul_32ns_3ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fdiv_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fcmp_32ns_3kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_qrf_magnitude_float_s_fu_226 : component qrf_magnitude_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_qrf_magnitude_float_s_fu_226_ap_start,
        ap_done => grp_qrf_magnitude_float_s_fu_226_ap_done,
        ap_idle => grp_qrf_magnitude_float_s_fu_226_ap_idle,
        ap_ready => grp_qrf_magnitude_float_s_fu_226_ap_ready,
        a_M_real => grp_qrf_magnitude_float_s_fu_226_a_M_real,
        a_M_imag => grp_qrf_magnitude_float_s_fu_226_a_M_imag,
        b_M_real => b_M_real,
        b_M_imag => b_M_imag,
        ap_return => grp_qrf_magnitude_float_s_fu_226_ap_return);

    music_fadd_32ns_3hbi_U46 : component music_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_322,
        din1 => reg_327,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p2);

    music_fadd_32ns_3hbi_U47 : component music_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_332,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);

    music_fsub_32ns_3mb6_U48 : component music_fsub_32ns_3mb6
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_337,
        din1 => reg_342,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    music_fadd_32ns_3hbi_U49 : component music_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i5_reg_999,
        din1 => tmp_i_i1_reg_1004,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    music_fsub_32ns_3mb6_U50 : component music_fsub_32ns_3mb6
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_i_i4_reg_1009,
        din1 => tmp_6_i_i4_reg_1014,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    music_fmul_32ns_3ibs_U51 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p0,
        din1 => grp_fu_261_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    music_fmul_32ns_3ibs_U52 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_265_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    music_fmul_32ns_3ibs_U53 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    music_fmul_32ns_3ibs_U54 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_274_p0,
        din1 => grp_fu_274_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    music_fmul_32ns_3ibs_U55 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    music_fmul_32ns_3ibs_U56 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sqrt_mag_a_mag_b_reg_922,
        din1 => b_M_real,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    music_fmul_32ns_3ibs_U57 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_M_imag,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p2);

    music_fmul_32ns_3ibs_U58 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sqrt_mag_a_mag_b_reg_922,
        din1 => b_M_imag,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    music_fmul_32ns_3ibs_U59 : component music_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_M_real,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_296_p2);

    music_fdiv_32ns_3jbC_U60 : component music_fdiv_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_347,
        din1 => reg_352,
        ce => ap_const_logic_1,
        dout => grp_fu_301_p2);

    music_fdiv_32ns_3jbC_U61 : component music_fdiv_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_360,
        din1 => reg_352,
        ce => ap_const_logic_1,
        dout => grp_fu_305_p2);

    music_fdiv_32ns_3jbC_U62 : component music_fdiv_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_i_i2_reg_1019,
        din1 => reg_352,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    music_fdiv_32ns_3jbC_U63 : component music_fdiv_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_i_i4_reg_1024,
        din1 => reg_352,
        ce => ap_const_logic_1,
        dout => grp_fu_313_p2);

    music_fcmp_32ns_3kbM_U64 : component music_fcmp_32ns_3kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_317_p0,
        din1 => ap_const_lv32_0,
        ce => grp_fu_317_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_317_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_0_preg <= ap_phi_mux_c_M_real_write_assi_phi_fu_120_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_1_preg <= ap_phi_mux_c_M_imag_write_assi_phi_fu_132_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_2_preg <= ap_phi_mux_s_M_real_write_assi_phi_fu_143_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_3_preg <= ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_4_preg <= ap_phi_mux_ss_M_real_write_ass_phi_fu_166_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_5_preg <= ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_6_preg <= ap_phi_mux_cc_M_real_write_ass_phi_fu_176_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_7_preg <= ap_phi_mux_cc_M_imag_write_ass_phi_fu_186_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_return_8_preg <= ap_phi_mux_r_M_real_write_assi_phi_fu_196_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_qrf_magnitude_float_s_fu_226_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_qrf_magnitude_float_s_fu_226_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)))) then 
                    grp_qrf_magnitude_float_s_fu_226_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_qrf_magnitude_float_s_fu_226_ap_ready = ap_const_logic_1)) then 
                    grp_qrf_magnitude_float_s_fu_226_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_M_imag_write_assi_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                c_M_imag_write_assi_reg_128 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
                c_M_imag_write_assi_reg_128 <= tmp_M_imag_3_fu_678_p1;
            end if; 
        end if;
    end process;

    c_M_real_write_assi_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                c_M_real_write_assi_reg_116 <= ap_const_lv32_3F800000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
                c_M_real_write_assi_reg_116 <= ap_phi_mux_tmp_M_real_1_phi_fu_99_p4;
            end if; 
        end if;
    end process;

    cc_M_imag_write_ass_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                cc_M_imag_write_ass_reg_183 <= tmp_M_imag_1_fu_843_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
                cc_M_imag_write_ass_reg_183 <= ap_phi_mux_tmp_M_imag_2_phi_fu_89_p4;
            end if; 
        end if;
    end process;

    cc_M_real_write_ass_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                cc_M_real_write_ass_reg_173 <= tmp_M_real_reg_202;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
                cc_M_real_write_ass_reg_173 <= ap_phi_mux_tmp_M_real_1_phi_fu_99_p4;
            end if; 
        end if;
    end process;

    r_M_real_write_assi_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                r_M_real_write_assi_reg_193 <= sqrt_mag_a_mag_b_1_reg_1039;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
                r_M_real_write_assi_reg_193 <= sqrt_mag_a_mag_b_reg_922;
            end if; 
        end if;
    end process;

    s_M_imag_write_assi_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                s_M_imag_write_assi_reg_151 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
                s_M_imag_write_assi_reg_151 <= tmp_M_imag_5_fu_693_p1;
            end if; 
        end if;
    end process;

    s_M_real_write_assi_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                s_M_real_write_assi_reg_139 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
                s_M_real_write_assi_reg_139 <= ap_phi_mux_tmp_M_real_2_phi_fu_78_p4;
            end if; 
        end if;
    end process;

    s_tmp_M_imag_2_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = and_ln306_1_fu_827_p2) and (ap_const_lv1_1 = and_ln306_reg_1048))) then 
                s_tmp_M_imag_2_reg_215 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                s_tmp_M_imag_2_reg_215 <= reg_371;
            end if; 
        end if;
    end process;

    s_tmp_M_imag_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((((ap_const_lv1_0 = and_ln284_2_reg_971) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln284_3_reg_990) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_1_reg_952) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_reg_933) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))))) then 
                s_tmp_M_imag_reg_105 <= complex_M_imag_writ_reg_1034;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln284_3_fu_643_p2) and (ap_const_lv1_1 = and_ln284_2_reg_971) and (ap_const_lv1_1 = and_ln284_1_reg_952) and (ap_const_lv1_1 = and_ln284_reg_933))) then 
                s_tmp_M_imag_reg_105 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ss_M_real_write_ass_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                ss_M_real_write_ass_reg_162 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
                ss_M_real_write_ass_reg_162 <= bitcast_ln444_1_fu_708_p1;
            end if; 
        end if;
    end process;

    tmp_M_imag_2_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((((ap_const_lv1_0 = and_ln284_2_reg_971) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln284_3_reg_990) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_1_reg_952) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_reg_933) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))))) then 
                tmp_M_imag_2_reg_85 <= reg_371;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln284_3_fu_643_p2) and (ap_const_lv1_1 = and_ln284_2_reg_971) and (ap_const_lv1_1 = and_ln284_1_reg_952) and (ap_const_lv1_1 = and_ln284_reg_933))) then 
                tmp_M_imag_2_reg_85 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_M_real_1_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((((ap_const_lv1_0 = and_ln284_2_reg_971) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln284_3_reg_990) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_1_reg_952) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_reg_933) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))))) then 
                tmp_M_real_1_reg_96 <= reg_365;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln284_3_fu_643_p2) and (ap_const_lv1_1 = and_ln284_2_reg_971) and (ap_const_lv1_1 = and_ln284_1_reg_952) and (ap_const_lv1_1 = and_ln284_reg_933))) then 
                tmp_M_real_1_reg_96 <= c_tmp_M_real_1_fu_664_p1;
            end if; 
        end if;
    end process;

    tmp_M_real_2_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((((ap_const_lv1_0 = and_ln284_2_reg_971) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln284_3_reg_990) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_1_reg_952) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_reg_933) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))))) then 
                tmp_M_real_2_reg_74 <= s_tmp_M_real_1_reg_1029;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln284_3_fu_643_p2) and (ap_const_lv1_1 = and_ln284_2_reg_971) and (ap_const_lv1_1 = and_ln284_1_reg_952) and (ap_const_lv1_1 = and_ln284_reg_933))) then 
                tmp_M_real_2_reg_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_M_real_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = and_ln306_1_fu_827_p2) and (ap_const_lv1_1 = and_ln306_reg_1048))) then 
                tmp_M_real_reg_202 <= ap_const_lv32_3F800000;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                tmp_M_real_reg_202 <= reg_365;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                and_ln284_1_reg_952 <= and_ln284_1_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln284_2_reg_971 <= and_ln284_2_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln284_2_reg_971) and (ap_const_lv1_1 = and_ln284_1_reg_952) and (ap_const_lv1_1 = and_ln284_reg_933))) then
                and_ln284_3_reg_990 <= and_ln284_3_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1))) then
                and_ln284_reg_933 <= and_ln284_fu_475_p2;
                sqrt_mag_a_mag_b_reg_922 <= grp_qrf_magnitude_float_s_fu_226_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1))) then
                and_ln306_reg_1048 <= and_ln306_fu_771_p2;
                sqrt_mag_a_mag_b_1_reg_1039 <= grp_qrf_magnitude_float_s_fu_226_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                complex_M_imag_writ_reg_1034 <= grp_fu_313_p2;
                s_tmp_M_real_1_reg_1029 <= grp_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then
                icmp_ln284_1_reg_902 <= icmp_ln284_1_fu_418_p2;
                icmp_ln284_reg_897 <= icmp_ln284_fu_412_p2;
                p_Val2_41_reg_887 <= p_Val2_41_fu_377_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1) and (ap_const_lv1_1 = and_ln284_fu_475_p2))) then
                icmp_ln284_2_reg_942 <= icmp_ln284_2_fu_515_p2;
                icmp_ln284_3_reg_947 <= icmp_ln284_3_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln284_1_fu_531_p2))) then
                icmp_ln284_4_reg_961 <= icmp_ln284_4_fu_571_p2;
                icmp_ln284_5_reg_966 <= icmp_ln284_5_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln284_2_fu_587_p2))) then
                icmp_ln284_6_reg_980 <= icmp_ln284_6_fu_627_p2;
                icmp_ln284_7_reg_985 <= icmp_ln284_7_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_1))) then
                icmp_ln306_1_reg_917 <= icmp_ln306_1_fu_465_p2;
                icmp_ln306_reg_912 <= icmp_ln306_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1) and (ap_const_lv1_1 = and_ln306_fu_771_p2))) then
                icmp_ln306_2_reg_1057 <= icmp_ln306_2_fu_811_p2;
                icmp_ln306_3_reg_1062 <= icmp_ln306_3_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_322 <= grp_fu_261_p2;
                reg_327 <= grp_fu_265_p2;
                reg_332 <= grp_fu_270_p2;
                reg_337 <= grp_fu_274_p2;
                reg_342 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_347 <= grp_fu_240_p2;
                reg_352 <= grp_fu_244_p2;
                reg_360 <= grp_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_365 <= grp_fu_301_p2;
                reg_371 <= grp_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_2_i_i2_reg_1019 <= grp_fu_253_p2;
                tmp_7_i_i4_reg_1024 <= grp_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_5_i_i4_reg_1009 <= grp_fu_292_p2;
                tmp_6_i_i4_reg_1014 <= grp_fu_296_p2;
                tmp_i_i1_reg_1004 <= grp_fu_287_p2;
                tmp_i_i5_reg_999 <= grp_fu_283_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, extra_pass_read_read_fu_68_p2, ap_CS_fsm_state2, grp_qrf_magnitude_float_s_fu_226_ap_done, and_ln284_fu_475_p2, and_ln284_reg_933, and_ln284_1_fu_531_p2, and_ln284_1_reg_952, ap_CS_fsm_state3, and_ln284_2_reg_971, and_ln284_3_fu_643_p2, ap_CS_fsm_state5, ap_CS_fsm_state20, and_ln306_reg_1048, ap_CS_fsm_state21, and_ln306_1_fu_827_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1) and (ap_const_lv1_0 = and_ln284_fu_475_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1) and (ap_const_lv1_1 = and_ln284_fu_475_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = and_ln284_1_fu_531_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln284_3_fu_643_p2) and (ap_const_lv1_1 = and_ln284_2_reg_971) and (ap_const_lv1_1 = and_ln284_1_reg_952) and (ap_const_lv1_1 = and_ln284_reg_933))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = and_ln306_1_fu_827_p2) and (ap_const_lv1_1 = and_ln306_reg_1048))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln284_1_fu_531_p2 <= (or_ln284_1_fu_527_p2 and grp_fu_317_p2);
    and_ln284_2_fu_587_p2 <= (or_ln284_2_fu_583_p2 and grp_fu_317_p2);
    and_ln284_3_fu_643_p2 <= (or_ln284_3_fu_639_p2 and grp_fu_317_p2);
    and_ln284_fu_475_p2 <= (or_ln284_fu_471_p2 and grp_fu_317_p2);
    and_ln306_1_fu_827_p2 <= (or_ln306_1_fu_823_p2 and grp_fu_317_p2);
    and_ln306_fu_771_p2 <= (or_ln306_fu_767_p2 and grp_fu_317_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_M_imag_write_assi_phi_fu_132_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, ap_CS_fsm_state19, tmp_M_imag_3_fu_678_p1, c_M_imag_write_assi_reg_128)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_c_M_imag_write_assi_phi_fu_132_p4 <= tmp_M_imag_3_fu_678_p1;
        else 
            ap_phi_mux_c_M_imag_write_assi_phi_fu_132_p4 <= c_M_imag_write_assi_reg_128;
        end if; 
    end process;


    ap_phi_mux_c_M_real_write_assi_phi_fu_120_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, ap_CS_fsm_state19, ap_phi_mux_tmp_M_real_1_phi_fu_99_p4, c_M_real_write_assi_reg_116)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_c_M_real_write_assi_phi_fu_120_p4 <= ap_phi_mux_tmp_M_real_1_phi_fu_99_p4;
        else 
            ap_phi_mux_c_M_real_write_assi_phi_fu_120_p4 <= c_M_real_write_assi_reg_116;
        end if; 
    end process;


    ap_phi_mux_cc_M_imag_write_ass_phi_fu_186_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, ap_CS_fsm_state19, ap_phi_mux_tmp_M_imag_2_phi_fu_89_p4, cc_M_imag_write_ass_reg_183)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_cc_M_imag_write_ass_phi_fu_186_p4 <= ap_phi_mux_tmp_M_imag_2_phi_fu_89_p4;
        else 
            ap_phi_mux_cc_M_imag_write_ass_phi_fu_186_p4 <= cc_M_imag_write_ass_reg_183;
        end if; 
    end process;


    ap_phi_mux_cc_M_real_write_ass_phi_fu_176_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, ap_CS_fsm_state19, ap_phi_mux_tmp_M_real_1_phi_fu_99_p4, cc_M_real_write_ass_reg_173)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_cc_M_real_write_ass_phi_fu_176_p4 <= ap_phi_mux_tmp_M_real_1_phi_fu_99_p4;
        else 
            ap_phi_mux_cc_M_real_write_ass_phi_fu_176_p4 <= cc_M_real_write_ass_reg_173;
        end if; 
    end process;


    ap_phi_mux_r_M_real_write_assi_phi_fu_196_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, sqrt_mag_a_mag_b_reg_922, ap_CS_fsm_state19, r_M_real_write_assi_reg_193)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_r_M_real_write_assi_phi_fu_196_p4 <= sqrt_mag_a_mag_b_reg_922;
        else 
            ap_phi_mux_r_M_real_write_assi_phi_fu_196_p4 <= r_M_real_write_assi_reg_193;
        end if; 
    end process;


    ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, ap_CS_fsm_state19, tmp_M_imag_5_fu_693_p1, s_M_imag_write_assi_reg_151)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4 <= tmp_M_imag_5_fu_693_p1;
        else 
            ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4 <= s_M_imag_write_assi_reg_151;
        end if; 
    end process;


    ap_phi_mux_s_M_real_write_assi_phi_fu_143_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, ap_phi_mux_tmp_M_real_2_phi_fu_78_p4, ap_CS_fsm_state19, s_M_real_write_assi_reg_139)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_s_M_real_write_assi_phi_fu_143_p4 <= ap_phi_mux_tmp_M_real_2_phi_fu_78_p4;
        else 
            ap_phi_mux_s_M_real_write_assi_phi_fu_143_p4 <= s_M_real_write_assi_reg_139;
        end if; 
    end process;


    ap_phi_mux_s_tmp_M_imag_phi_fu_109_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, and_ln284_reg_933, and_ln284_1_reg_952, and_ln284_2_reg_971, and_ln284_3_reg_990, complex_M_imag_writ_reg_1034, ap_CS_fsm_state19, s_tmp_M_imag_reg_105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((((ap_const_lv1_0 = and_ln284_2_reg_971) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln284_3_reg_990) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_1_reg_952) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_reg_933) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))))) then 
            ap_phi_mux_s_tmp_M_imag_phi_fu_109_p4 <= complex_M_imag_writ_reg_1034;
        else 
            ap_phi_mux_s_tmp_M_imag_phi_fu_109_p4 <= s_tmp_M_imag_reg_105;
        end if; 
    end process;


    ap_phi_mux_ss_M_real_write_ass_phi_fu_166_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, ap_CS_fsm_state19, bitcast_ln444_1_fu_708_p1, ss_M_real_write_ass_reg_162)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_ss_M_real_write_ass_phi_fu_166_p4 <= bitcast_ln444_1_fu_708_p1;
        else 
            ap_phi_mux_ss_M_real_write_ass_phi_fu_166_p4 <= ss_M_real_write_ass_reg_162;
        end if; 
    end process;


    ap_phi_mux_tmp_M_imag_2_phi_fu_89_p4_assign_proc : process(reg_371, extra_pass_read_read_fu_68_p2, and_ln284_reg_933, and_ln284_1_reg_952, and_ln284_2_reg_971, and_ln284_3_reg_990, ap_CS_fsm_state19, tmp_M_imag_2_reg_85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((((ap_const_lv1_0 = and_ln284_2_reg_971) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln284_3_reg_990) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_1_reg_952) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_reg_933) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))))) then 
            ap_phi_mux_tmp_M_imag_2_phi_fu_89_p4 <= reg_371;
        else 
            ap_phi_mux_tmp_M_imag_2_phi_fu_89_p4 <= tmp_M_imag_2_reg_85;
        end if; 
    end process;


    ap_phi_mux_tmp_M_real_1_phi_fu_99_p4_assign_proc : process(reg_365, extra_pass_read_read_fu_68_p2, and_ln284_reg_933, and_ln284_1_reg_952, and_ln284_2_reg_971, and_ln284_3_reg_990, ap_CS_fsm_state19, tmp_M_real_1_reg_96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((((ap_const_lv1_0 = and_ln284_2_reg_971) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln284_3_reg_990) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_1_reg_952) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_reg_933) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))))) then 
            ap_phi_mux_tmp_M_real_1_phi_fu_99_p4 <= reg_365;
        else 
            ap_phi_mux_tmp_M_real_1_phi_fu_99_p4 <= tmp_M_real_1_reg_96;
        end if; 
    end process;


    ap_phi_mux_tmp_M_real_2_phi_fu_78_p4_assign_proc : process(extra_pass_read_read_fu_68_p2, and_ln284_reg_933, and_ln284_1_reg_952, and_ln284_2_reg_971, and_ln284_3_reg_990, s_tmp_M_real_1_reg_1029, tmp_M_real_2_reg_74, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((((ap_const_lv1_0 = and_ln284_2_reg_971) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln284_3_reg_990) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_1_reg_952) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) or ((ap_const_lv1_0 = and_ln284_reg_933) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))))) then 
            ap_phi_mux_tmp_M_real_2_phi_fu_78_p4 <= s_tmp_M_real_1_reg_1029;
        else 
            ap_phi_mux_tmp_M_real_2_phi_fu_78_p4 <= tmp_M_real_2_reg_74;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_c_M_real_write_assi_phi_fu_120_p4, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_0 <= ap_phi_mux_c_M_real_write_assi_phi_fu_120_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_c_M_imag_write_assi_phi_fu_132_p4, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_1 <= ap_phi_mux_c_M_imag_write_assi_phi_fu_132_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_s_M_real_write_assi_phi_fu_143_p4, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_2 <= ap_phi_mux_s_M_real_write_assi_phi_fu_143_p4;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_3 <= ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_ss_M_real_write_ass_phi_fu_166_p4, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_4 <= ap_phi_mux_ss_M_real_write_ass_phi_fu_166_p4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_5 <= ap_phi_mux_s_M_imag_write_assi_phi_fu_155_p4;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_cc_M_real_write_ass_phi_fu_176_p4, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_6 <= ap_phi_mux_cc_M_real_write_ass_phi_fu_176_p4;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_cc_M_imag_write_ass_phi_fu_186_p4, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_7 <= ap_phi_mux_cc_M_imag_write_ass_phi_fu_186_p4;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_CS_fsm_state19, ap_phi_mux_r_M_real_write_assi_phi_fu_196_p4, ap_return_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_return_8 <= ap_phi_mux_r_M_real_write_assi_phi_fu_196_p4;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;

    bitcast_ln155_2_fu_668_p1 <= ap_phi_mux_tmp_M_imag_2_phi_fu_89_p4;
    bitcast_ln155_4_fu_683_p1 <= ap_phi_mux_s_tmp_M_imag_phi_fu_109_p4;
    bitcast_ln155_fu_833_p1 <= s_tmp_M_imag_2_reg_215;
    bitcast_ln348_1_fu_444_p1 <= p_Result_36_fu_436_p3;
    bitcast_ln348_2_fu_500_p1 <= p_Result_31_fu_492_p3;
    bitcast_ln348_3_fu_796_p1 <= p_Result_37_fu_788_p3;
    bitcast_ln348_4_fu_556_p1 <= p_Result_32_fu_548_p3;
    bitcast_ln348_5_fu_612_p1 <= p_Result_33_fu_604_p3;
    bitcast_ln348_fu_397_p1 <= p_Result_s_fu_389_p3;
    bitcast_ln444_1_fu_708_p1 <= xor_ln444_fu_702_p2;
    bitcast_ln444_fu_698_p1 <= ap_phi_mux_tmp_M_real_2_phi_fu_78_p4;
    c_tmp_M_real_1_fu_664_p1 <= p_Result_35_fu_656_p3;
    extra_pass_read_read_fu_68_p2 <= extra_pass;

    grp_fu_261_p0_assign_proc : process(sqrt_mag_a_mag_b_reg_922, ap_CS_fsm_state5, sqrt_mag_a_mag_b_1_reg_1039, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_261_p0 <= sqrt_mag_a_mag_b_1_reg_1039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_261_p0 <= sqrt_mag_a_mag_b_reg_922;
        else 
            grp_fu_261_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_261_p1_assign_proc : process(a_M_real, b_M_real, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_261_p1 <= b_M_real;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_261_p1 <= a_M_real;
        else 
            grp_fu_261_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_265_p0_assign_proc : process(a_M_imag, b_M_imag, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_265_p0 <= b_M_imag;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_265_p0 <= a_M_imag;
        else 
            grp_fu_265_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p0_assign_proc : process(sqrt_mag_a_mag_b_reg_922, ap_CS_fsm_state5, sqrt_mag_a_mag_b_1_reg_1039, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_270_p0 <= sqrt_mag_a_mag_b_1_reg_1039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_270_p0 <= sqrt_mag_a_mag_b_reg_922;
        else 
            grp_fu_270_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p1_assign_proc : process(sqrt_mag_a_mag_b_reg_922, ap_CS_fsm_state5, sqrt_mag_a_mag_b_1_reg_1039, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_270_p1 <= sqrt_mag_a_mag_b_1_reg_1039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_270_p1 <= sqrt_mag_a_mag_b_reg_922;
        else 
            grp_fu_270_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_274_p0_assign_proc : process(sqrt_mag_a_mag_b_reg_922, ap_CS_fsm_state5, sqrt_mag_a_mag_b_1_reg_1039, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_274_p0 <= sqrt_mag_a_mag_b_1_reg_1039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_274_p0 <= sqrt_mag_a_mag_b_reg_922;
        else 
            grp_fu_274_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_274_p1_assign_proc : process(a_M_imag, b_M_imag, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_274_p1 <= b_M_imag;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_274_p1 <= a_M_imag;
        else 
            grp_fu_274_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p0_assign_proc : process(a_M_real, b_M_real, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_278_p0 <= b_M_real;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_278_p0 <= a_M_real;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_317_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_qrf_magnitude_float_s_fu_226_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_qrf_magnitude_float_s_fu_226_ap_done = ap_const_logic_1)))) then 
            grp_fu_317_ce <= ap_const_logic_1;
        else 
            grp_fu_317_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_317_p0_assign_proc : process(ap_CS_fsm_state1, extra_pass_read_read_fu_68_p2, bitcast_ln348_fu_397_p1, bitcast_ln348_1_fu_444_p1, ap_CS_fsm_state2, bitcast_ln348_2_fu_500_p1, ap_CS_fsm_state3, bitcast_ln348_4_fu_556_p1, ap_CS_fsm_state4, bitcast_ln348_5_fu_612_p1, ap_CS_fsm_state20, bitcast_ln348_3_fu_796_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_317_p0 <= bitcast_ln348_3_fu_796_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_317_p0 <= bitcast_ln348_5_fu_612_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_317_p0 <= bitcast_ln348_4_fu_556_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_317_p0 <= bitcast_ln348_2_fu_500_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_1))) then 
            grp_fu_317_p0 <= bitcast_ln348_1_fu_444_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (extra_pass_read_read_fu_68_p2 = ap_const_lv1_0))) then 
            grp_fu_317_p0 <= bitcast_ln348_fu_397_p1;
        else 
            grp_fu_317_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_qrf_magnitude_float_s_fu_226_a_M_imag_assign_proc : process(a_M_imag, ap_CS_fsm_state2, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_qrf_magnitude_float_s_fu_226_a_M_imag <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_qrf_magnitude_float_s_fu_226_a_M_imag <= a_M_imag;
        else 
            grp_qrf_magnitude_float_s_fu_226_a_M_imag <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_qrf_magnitude_float_s_fu_226_a_M_real_assign_proc : process(a_M_real, ap_CS_fsm_state2, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_qrf_magnitude_float_s_fu_226_a_M_real <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_qrf_magnitude_float_s_fu_226_a_M_real <= a_M_real;
        else 
            grp_qrf_magnitude_float_s_fu_226_a_M_real <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_qrf_magnitude_float_s_fu_226_ap_start <= grp_qrf_magnitude_float_s_fu_226_ap_start_reg;
    icmp_ln284_1_fu_418_p2 <= "1" when (trunc_ln284_fu_385_p1 = ap_const_lv23_0) else "0";
    icmp_ln284_2_fu_515_p2 <= "0" when (tmp_21_fu_505_p4 = ap_const_lv8_FF) else "1";
    icmp_ln284_3_fu_521_p2 <= "1" when (trunc_ln284_1_fu_488_p1 = ap_const_lv23_0) else "0";
    icmp_ln284_4_fu_571_p2 <= "0" when (tmp_23_fu_561_p4 = ap_const_lv8_FF) else "1";
    icmp_ln284_5_fu_577_p2 <= "1" when (trunc_ln284_2_fu_544_p1 = ap_const_lv23_0) else "0";
    icmp_ln284_6_fu_627_p2 <= "0" when (tmp_25_fu_617_p4 = ap_const_lv8_FF) else "1";
    icmp_ln284_7_fu_633_p2 <= "1" when (trunc_ln284_3_fu_600_p1 = ap_const_lv23_0) else "0";
    icmp_ln284_fu_412_p2 <= "0" when (tmp_17_fu_402_p4 = ap_const_lv8_FF) else "1";
    icmp_ln306_1_fu_465_p2 <= "1" when (trunc_ln306_fu_432_p1 = ap_const_lv23_0) else "0";
    icmp_ln306_2_fu_811_p2 <= "0" when (tmp_19_fu_801_p4 = ap_const_lv8_FF) else "1";
    icmp_ln306_3_fu_817_p2 <= "1" when (trunc_ln306_1_fu_784_p1 = ap_const_lv23_0) else "0";
    icmp_ln306_fu_459_p2 <= "0" when (tmp_s_fu_449_p4 = ap_const_lv8_FF) else "1";
    or_ln284_1_fu_527_p2 <= (icmp_ln284_3_reg_947 or icmp_ln284_2_reg_942);
    or_ln284_2_fu_583_p2 <= (icmp_ln284_5_reg_966 or icmp_ln284_4_reg_961);
    or_ln284_3_fu_639_p2 <= (icmp_ln284_7_reg_985 or icmp_ln284_6_reg_980);
    or_ln284_fu_471_p2 <= (icmp_ln284_reg_897 or icmp_ln284_1_reg_902);
    or_ln306_1_fu_823_p2 <= (icmp_ln306_3_reg_1062 or icmp_ln306_2_reg_1057);
    or_ln306_fu_767_p2 <= (icmp_ln306_reg_912 or icmp_ln306_1_reg_917);
    p_Result_31_fu_492_p3 <= (ap_const_lv1_0 & trunc_ln368_6_fu_484_p1);
    p_Result_32_fu_548_p3 <= (ap_const_lv1_0 & trunc_ln368_7_fu_540_p1);
    p_Result_33_fu_604_p3 <= (ap_const_lv1_0 & trunc_ln368_8_fu_596_p1);
    p_Result_34_fu_649_p3 <= p_Val2_41_reg_887(31 downto 31);
    p_Result_35_fu_656_p3 <= (p_Result_34_fu_649_p3 & ap_const_lv31_3F800000);
    p_Result_36_fu_436_p3 <= (ap_const_lv1_0 & trunc_ln368_fu_428_p1);
    p_Result_37_fu_788_p3 <= (ap_const_lv1_0 & trunc_ln368_5_fu_780_p1);
    p_Result_s_fu_389_p3 <= (ap_const_lv1_0 & trunc_ln368_4_fu_381_p1);
    p_Val2_37_fu_777_p1 <= b_M_imag;
    p_Val2_38_fu_481_p1 <= a_M_imag;
    p_Val2_39_fu_537_p1 <= b_M_real;
    p_Val2_40_fu_593_p1 <= b_M_imag;
    p_Val2_41_fu_377_p1 <= a_M_real;
    p_Val2_s_fu_424_p1 <= b_M_real;
    tmp_17_fu_402_p4 <= p_Val2_41_fu_377_p1(30 downto 23);
    tmp_19_fu_801_p4 <= p_Val2_37_fu_777_p1(30 downto 23);
    tmp_21_fu_505_p4 <= p_Val2_38_fu_481_p1(30 downto 23);
    tmp_23_fu_561_p4 <= p_Val2_39_fu_537_p1(30 downto 23);
    tmp_25_fu_617_p4 <= p_Val2_40_fu_593_p1(30 downto 23);
    tmp_M_imag_1_fu_843_p1 <= xor_ln155_fu_837_p2;
    tmp_M_imag_3_fu_678_p1 <= xor_ln155_1_fu_672_p2;
    tmp_M_imag_5_fu_693_p1 <= xor_ln155_2_fu_687_p2;
    tmp_s_fu_449_p4 <= p_Val2_s_fu_424_p1(30 downto 23);
    trunc_ln284_1_fu_488_p1 <= p_Val2_38_fu_481_p1(23 - 1 downto 0);
    trunc_ln284_2_fu_544_p1 <= p_Val2_39_fu_537_p1(23 - 1 downto 0);
    trunc_ln284_3_fu_600_p1 <= p_Val2_40_fu_593_p1(23 - 1 downto 0);
    trunc_ln284_fu_385_p1 <= p_Val2_41_fu_377_p1(23 - 1 downto 0);
    trunc_ln306_1_fu_784_p1 <= p_Val2_37_fu_777_p1(23 - 1 downto 0);
    trunc_ln306_fu_432_p1 <= p_Val2_s_fu_424_p1(23 - 1 downto 0);
    trunc_ln368_4_fu_381_p1 <= p_Val2_41_fu_377_p1(31 - 1 downto 0);
    trunc_ln368_5_fu_780_p1 <= p_Val2_37_fu_777_p1(31 - 1 downto 0);
    trunc_ln368_6_fu_484_p1 <= p_Val2_38_fu_481_p1(31 - 1 downto 0);
    trunc_ln368_7_fu_540_p1 <= p_Val2_39_fu_537_p1(31 - 1 downto 0);
    trunc_ln368_8_fu_596_p1 <= p_Val2_40_fu_593_p1(31 - 1 downto 0);
    trunc_ln368_fu_428_p1 <= p_Val2_s_fu_424_p1(31 - 1 downto 0);
    xor_ln155_1_fu_672_p2 <= (bitcast_ln155_2_fu_668_p1 xor ap_const_lv32_80000000);
    xor_ln155_2_fu_687_p2 <= (bitcast_ln155_4_fu_683_p1 xor ap_const_lv32_80000000);
    xor_ln155_fu_837_p2 <= (bitcast_ln155_fu_833_p1 xor ap_const_lv32_80000000);
    xor_ln444_fu_702_p2 <= (bitcast_ln444_fu_698_p1 xor ap_const_lv32_80000000);
end behav;
