-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qrf_basic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_M_real_ce0 : OUT STD_LOGIC;
    A_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_M_imag_ce0 : OUT STD_LOGIC;
    A_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Q_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Q_M_real_ce0 : OUT STD_LOGIC;
    Q_M_real_we0 : OUT STD_LOGIC;
    Q_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Q_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Q_M_imag_ce0 : OUT STD_LOGIC;
    Q_M_imag_we0 : OUT STD_LOGIC;
    Q_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    R_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    R_M_real_ce0 : OUT STD_LOGIC;
    R_M_real_we0 : OUT STD_LOGIC;
    R_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    R_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    R_M_imag_ce0 : OUT STD_LOGIC;
    R_M_imag_we0 : OUT STD_LOGIC;
    R_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of qrf_basic is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Ri_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal Ri_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ri_M_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ri_M_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln459_fu_884_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln459_reg_1433 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln459_1_fu_890_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln460_fu_922_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln460_reg_1449 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln460_1_fu_928_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal r_fu_966_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_1468 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln1067_fu_984_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1067_reg_1473 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln471_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Qi_M_real_addr_1_reg_1479 : STD_LOGIC_VECTOR (3 downto 0);
    signal Qi_M_imag_addr_1_reg_1484 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_fu_1006_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal c_fu_1039_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_1503 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln482_2_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln482_2_reg_1508 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln480_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_1070_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_1527 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln490_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln490_reg_1533 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln486_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln499_fu_1090_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln499_reg_1538 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln521_fu_1096_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln521_reg_1543 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln521_fu_1106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln521_reg_1549 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln498_fu_1112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln498_reg_1554 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln499_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln499_reg_1562 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln498_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln503_fu_1139_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln503_reg_1566 : STD_LOGIC_VECTOR (4 downto 0);
    signal Ri_M_real_addr_2_reg_1572 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_imag_addr_2_reg_1578 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln503_2_fu_1162_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln503_2_reg_1584 : STD_LOGIC_VECTOR (4 downto 0);
    signal Ri_M_real_addr_3_reg_1590 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_imag_addr_3_reg_1595 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_M_imag_4_reg_1600 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_qrf_givens_float_s_fu_556_ap_ready : STD_LOGIC;
    signal grp_qrf_givens_float_s_fu_556_ap_done : STD_LOGIC;
    signal p_r_M_real_4_reg_1606 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_3_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_3_reg_1618 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_1_reg_1624 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_1_reg_1630 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_reg_1636 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_1642 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_fu_1220_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_1651 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln513_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln513_reg_1656 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ri_M_real_addr_5_reg_1660 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_real_addr_6_reg_1665 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_imag_addr_5_reg_1670 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_imag_addr_6_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln521_1_fu_1257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln521_1_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_1271_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_1688 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln521_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln521_reg_1693 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln519_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Qi_M_real_addr_4_reg_1697 : STD_LOGIC_VECTOR (3 downto 0);
    signal Qi_M_real_addr_5_reg_1703 : STD_LOGIC_VECTOR (3 downto 0);
    signal Qi_M_imag_addr_4_reg_1709 : STD_LOGIC_VECTOR (3 downto 0);
    signal Qi_M_imag_addr_5_reg_1715 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_693_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal Qi_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal Qi_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Qi_M_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Qi_M_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_fu_1314_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_1_reg_1761 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal zext_ln545_fu_1320_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln545_reg_1766 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln532_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln533_fu_1332_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln533_reg_1771 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_2_fu_1342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_2_reg_1780 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln538_fu_1364_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln538_reg_1785 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln533_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_3_fu_1406_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_3_reg_1803 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln543_fu_1412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln543_reg_1808 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln541_fu_1400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln545_2_fu_1427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_2_reg_1812 : STD_LOGIC_VECTOR (63 downto 0);
    signal Qi_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Qi_M_real_ce0 : STD_LOGIC;
    signal Qi_M_real_we0 : STD_LOGIC;
    signal Qi_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Qi_M_real_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Qi_M_real_ce1 : STD_LOGIC;
    signal Qi_M_real_we1 : STD_LOGIC;
    signal Qi_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Qi_M_imag_ce0 : STD_LOGIC;
    signal Qi_M_imag_we0 : STD_LOGIC;
    signal Qi_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Qi_M_imag_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Qi_M_imag_ce1 : STD_LOGIC;
    signal Qi_M_imag_we1 : STD_LOGIC;
    signal Ri_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_real_ce0 : STD_LOGIC;
    signal Ri_M_real_we0 : STD_LOGIC;
    signal Ri_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ri_M_real_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_real_ce1 : STD_LOGIC;
    signal Ri_M_real_we1 : STD_LOGIC;
    signal Ri_M_real_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ri_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_imag_ce0 : STD_LOGIC;
    signal Ri_M_imag_we0 : STD_LOGIC;
    signal Ri_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ri_M_imag_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ri_M_imag_ce1 : STD_LOGIC;
    signal Ri_M_imag_we1 : STD_LOGIC;
    signal Ri_M_imag_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_start : STD_LOGIC;
    signal grp_qrf_givens_float_s_fu_556_ap_idle : STD_LOGIC;
    signal grp_qrf_givens_float_s_fu_556_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_qrf_givens_float_s_fu_556_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln459_reg_397 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln459_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln459_1_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln459_1_reg_409 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln460_reg_420 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln460_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln460_1_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln460_1_reg_432 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_0_reg_443 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_reg_455 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln472_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c12_0_reg_466 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_0_reg_477 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_i_0_phi_fu_492_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_reg_488 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_0_reg_500 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal k13_0_reg_511 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal r14_0_reg_522 : STD_LOGIC_VECTOR (2 downto 0);
    signal c15_0_reg_534 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal c16_0_reg_545 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_qrf_givens_float_s_fu_556_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln1027_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_1_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1067_1_fu_994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1067_3_fu_1027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln474_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln503_1_fu_1148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln503_3_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln516_1_fu_1240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln516_2_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln524_1_fu_1291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln524_2_fu_1302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_3_fu_1374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_2_fu_1380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_569_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_672_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_693_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_896_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_934_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_976_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln482_fu_972_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1067_fu_988_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1067_2_fu_1018_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1067_1_fu_1022_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln482_1_fu_1045_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln482_fu_1049_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln499_fu_1086_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln486_fu_1060_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln490_fu_1082_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln521_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln498_2_fu_1116_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1131_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln503_1_fu_1143_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_1154_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln503_2_fu_1166_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln516_fu_1231_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln516_fu_1235_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln516_1_fu_1246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln519_fu_1261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln524_fu_1282_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln524_fu_1286_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln524_1_fu_1297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_1324_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_1352_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln538_1_fu_1360_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln538_fu_1348_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln538_1_fu_1369_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln155_fu_1385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln155_fu_1389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln545_1_fu_1418_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln545_fu_1422_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_565_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_573_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);

    component qrf_givens_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        extra_pass : IN STD_LOGIC_VECTOR (0 downto 0);
        a_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
        a_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
        b_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
        b_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_faddfsub_32ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fadd_32ns_3ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fsub_32ns_3rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fmul_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component qrf_basic_Qi_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Qi_M_real_U : component qrf_basic_Qi_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Qi_M_real_address0,
        ce0 => Qi_M_real_ce0,
        we0 => Qi_M_real_we0,
        d0 => Qi_M_real_d0,
        q0 => Qi_M_real_q0,
        address1 => Qi_M_real_address1,
        ce1 => Qi_M_real_ce1,
        we1 => Qi_M_real_we1,
        d1 => reg_860,
        q1 => Qi_M_real_q1);

    Qi_M_imag_U : component qrf_basic_Qi_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Qi_M_imag_address0,
        ce0 => Qi_M_imag_ce0,
        we0 => Qi_M_imag_we0,
        d0 => Qi_M_imag_d0,
        q0 => Qi_M_imag_q0,
        address1 => Qi_M_imag_address1,
        ce1 => Qi_M_imag_ce1,
        we1 => Qi_M_imag_we1,
        d1 => reg_866,
        q1 => Qi_M_imag_q1);

    Ri_M_real_U : component qrf_basic_Qi_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Ri_M_real_address0,
        ce0 => Ri_M_real_ce0,
        we0 => Ri_M_real_we0,
        d0 => Ri_M_real_d0,
        q0 => Ri_M_real_q0,
        address1 => Ri_M_real_address1,
        ce1 => Ri_M_real_ce1,
        we1 => Ri_M_real_we1,
        d1 => Ri_M_real_d1,
        q1 => Ri_M_real_q1);

    Ri_M_imag_U : component qrf_basic_Qi_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Ri_M_imag_address0,
        ce0 => Ri_M_imag_ce0,
        we0 => Ri_M_imag_we0,
        d0 => Ri_M_imag_d0,
        q0 => Ri_M_imag_q0,
        address1 => Ri_M_imag_address1,
        ce1 => Ri_M_imag_ce1,
        we1 => Ri_M_imag_we1,
        d1 => Ri_M_imag_d1,
        q1 => Ri_M_imag_q1);

    grp_qrf_givens_float_s_fu_556 : component qrf_givens_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_qrf_givens_float_s_fu_556_ap_start,
        ap_done => grp_qrf_givens_float_s_fu_556_ap_done,
        ap_idle => grp_qrf_givens_float_s_fu_556_ap_idle,
        ap_ready => grp_qrf_givens_float_s_fu_556_ap_ready,
        extra_pass => icmp_ln490_reg_1533,
        a_M_real => reg_700,
        a_M_imag => reg_709,
        b_M_real => reg_718,
        b_M_imag => reg_727,
        ap_return_0 => grp_qrf_givens_float_s_fu_556_ap_return_0,
        ap_return_1 => grp_qrf_givens_float_s_fu_556_ap_return_1,
        ap_return_2 => grp_qrf_givens_float_s_fu_556_ap_return_2,
        ap_return_3 => grp_qrf_givens_float_s_fu_556_ap_return_3,
        ap_return_4 => grp_qrf_givens_float_s_fu_556_ap_return_4,
        ap_return_5 => grp_qrf_givens_float_s_fu_556_ap_return_5,
        ap_return_6 => grp_qrf_givens_float_s_fu_556_ap_return_6,
        ap_return_7 => grp_qrf_givens_float_s_fu_556_ap_return_7,
        ap_return_8 => grp_qrf_givens_float_s_fu_556_ap_return_8);

    music_faddfsub_32ibs_U102 : component music_faddfsub_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => grp_fu_565_p1,
        opcode => grp_fu_565_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p2);

    music_fadd_32ns_3ocq_U103 : component music_fadd_32ns_3ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_569_p0,
        din1 => grp_fu_569_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    music_faddfsub_32ibs_U104 : component music_faddfsub_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_573_p0,
        din1 => grp_fu_573_p1,
        opcode => grp_fu_573_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_573_p2);

    music_fadd_32ns_3ocq_U105 : component music_fadd_32ns_3ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_577_p0,
        din1 => grp_fu_577_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_577_p2);

    music_fsub_32ns_3rcU_U106 : component music_fsub_32ns_3rcU
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_776,
        din1 => reg_781,
        ce => ap_const_logic_1,
        dout => grp_fu_581_p2);

    music_fadd_32ns_3ocq_U107 : component music_fadd_32ns_3ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_786,
        din1 => reg_791,
        ce => ap_const_logic_1,
        dout => grp_fu_585_p2);

    music_fsub_32ns_3rcU_U108 : component music_fsub_32ns_3rcU
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_796,
        din1 => reg_801,
        ce => ap_const_logic_1,
        dout => grp_fu_589_p2);

    music_fadd_32ns_3ocq_U109 : component music_fadd_32ns_3ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_806,
        din1 => reg_811,
        ce => ap_const_logic_1,
        dout => grp_fu_593_p2);

    music_fmul_32ns_3jbC_U110 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_1642,
        din1 => grp_fu_597_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_597_p2);

    music_fmul_32ns_3jbC_U111 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_1636,
        din1 => grp_fu_602_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_602_p2);

    music_fmul_32ns_3jbC_U112 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_1636,
        din1 => grp_fu_607_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_607_p2);

    music_fmul_32ns_3jbC_U113 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_1642,
        din1 => grp_fu_612_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_612_p2);

    music_fmul_32ns_3jbC_U114 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_1_reg_1630,
        din1 => grp_fu_617_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_617_p2);

    music_fmul_32ns_3jbC_U115 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_1_reg_1624,
        din1 => grp_fu_622_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_622_p2);

    music_fmul_32ns_3jbC_U116 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_1_reg_1624,
        din1 => grp_fu_627_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_627_p2);

    music_fmul_32ns_3jbC_U117 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_1_reg_1630,
        din1 => grp_fu_632_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_632_p2);

    music_fmul_32ns_3jbC_U118 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_3_reg_1618,
        din1 => grp_fu_637_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);

    music_fmul_32ns_3jbC_U119 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_3_reg_1612,
        din1 => grp_fu_642_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_642_p2);

    music_fmul_32ns_3jbC_U120 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_3_reg_1612,
        din1 => grp_fu_647_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_647_p2);

    music_fmul_32ns_3jbC_U121 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_3_reg_1618,
        din1 => grp_fu_652_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_652_p2);

    music_fmul_32ns_3jbC_U122 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_4_reg_1606,
        din1 => grp_fu_657_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_657_p2);

    music_fmul_32ns_3jbC_U123 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_4_reg_1600,
        din1 => grp_fu_662_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_662_p2);

    music_fmul_32ns_3jbC_U124 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_4_reg_1600,
        din1 => grp_fu_667_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_667_p2);

    music_fmul_32ns_3jbC_U125 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_4_reg_1606,
        din1 => grp_fu_672_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_672_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_qrf_givens_float_s_fu_556_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_qrf_givens_float_s_fu_556_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_qrf_givens_float_s_fu_556_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_qrf_givens_float_s_fu_556_ap_ready = ap_const_logic_1)) then 
                    grp_qrf_givens_float_s_fu_556_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c12_0_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln472_fu_1000_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                c12_0_reg_466 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c12_0_reg_466 <= c_reg_1503;
            end if; 
        end if;
    end process;

    c15_0_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                c15_0_reg_534 <= c_2_reg_1780;
            elsif (((icmp_ln532_fu_1308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                c15_0_reg_534 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c16_0_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln533_fu_1336_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                c16_0_reg_545 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                c16_0_reg_545 <= c_3_reg_1803;
            end if; 
        end if;
    end process;

    c_0_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                c_0_reg_455 <= c_1_fu_1006_p2;
            elsif (((icmp_ln471_fu_960_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                c_0_reg_455 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln519_fu_1265_p2 = ap_const_lv1_1) or (icmp_ln499_reg_1562 = ap_const_lv1_0)))) then 
                i_0_reg_488 <= grp_fu_693_p2;
            elsif (((icmp_ln486_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_reg_488 <= ap_const_lv2_3;
            end if; 
        end if;
    end process;

    j_0_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln471_fu_960_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_0_reg_477 <= ap_const_lv3_0;
            elsif (((icmp_ln498_fu_1120_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                j_0_reg_477 <= j_reg_1527;
            end if; 
        end if;
    end process;

    k13_0_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln511_fu_1214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                k13_0_reg_511 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                k13_0_reg_511 <= k_1_reg_1688;
            end if; 
        end if;
    end process;

    k_0_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                k_0_reg_500 <= k_reg_1651;
            elsif (((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                k_0_reg_500 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln459_1_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln459_fu_910_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln459_1_reg_409 <= add_ln459_1_fu_890_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                phi_ln459_1_reg_409 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln459_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln459_fu_910_p2 = ap_const_lv1_1) and (icmp_ln459_1_fu_916_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln459_reg_397 <= add_ln459_reg_1433;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln459_reg_397 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln460_1_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln460_fu_948_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln460_1_reg_432 <= add_ln460_1_fu_928_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_ln460_1_reg_432 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln460_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln459_1_fu_916_p2 = ap_const_lv1_1) and (icmp_ln459_fu_910_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln460_reg_420 <= ap_const_lv2_0;
            elsif (((icmp_ln460_fu_948_p2 = ap_const_lv1_1) and (icmp_ln460_1_fu_954_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln460_reg_420 <= add_ln460_reg_1449;
            end if; 
        end if;
    end process;

    r14_0_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln486_fu_1064_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                r14_0_reg_522 <= ap_const_lv3_0;
            elsif (((icmp_ln541_fu_1400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                r14_0_reg_522 <= r_1_reg_1761;
            end if; 
        end if;
    end process;

    r_0_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln460_1_fu_954_p2 = ap_const_lv1_1) and (icmp_ln460_fu_948_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                r_0_reg_443 <= ap_const_lv3_0;
            elsif (((icmp_ln480_fu_1033_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                r_0_reg_443 <= r_reg_1468;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln471_fu_960_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                Qi_M_imag_addr_1_reg_1484 <= zext_ln1067_1_fu_994_p1(4 - 1 downto 0);
                Qi_M_real_addr_1_reg_1479 <= zext_ln1067_1_fu_994_p1(4 - 1 downto 0);
                    zext_ln1067_reg_1473(4 downto 2) <= zext_ln1067_fu_984_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln499_reg_1562 = ap_const_lv1_1) and (icmp_ln519_fu_1265_p2 = ap_const_lv1_0) and (icmp_ln521_fu_1277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                Qi_M_imag_addr_4_reg_1709 <= zext_ln524_1_fu_1291_p1(4 - 1 downto 0);
                Qi_M_imag_addr_5_reg_1715 <= zext_ln524_2_fu_1302_p1(4 - 1 downto 0);
                Qi_M_real_addr_4_reg_1697 <= zext_ln524_1_fu_1291_p1(4 - 1 downto 0);
                Qi_M_real_addr_5_reg_1703 <= zext_ln524_2_fu_1302_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln499_fu_1126_p2 = ap_const_lv1_1) and (icmp_ln498_fu_1120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                Ri_M_imag_addr_2_reg_1578 <= zext_ln503_1_fu_1148_p1(4 - 1 downto 0);
                Ri_M_imag_addr_3_reg_1595 <= zext_ln503_3_fu_1171_p1(4 - 1 downto 0);
                Ri_M_real_addr_2_reg_1572 <= zext_ln503_1_fu_1148_p1(4 - 1 downto 0);
                Ri_M_real_addr_3_reg_1590 <= zext_ln503_3_fu_1171_p1(4 - 1 downto 0);
                    zext_ln503_2_reg_1584(3 downto 2) <= zext_ln503_2_fu_1162_p1(3 downto 2);
                    zext_ln503_reg_1566(3 downto 2) <= zext_ln503_fu_1139_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln511_fu_1214_p2 = ap_const_lv1_0) and (icmp_ln513_fu_1226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                Ri_M_imag_addr_5_reg_1670 <= zext_ln516_1_fu_1240_p1(4 - 1 downto 0);
                Ri_M_imag_addr_6_reg_1675 <= zext_ln516_2_fu_1251_p1(4 - 1 downto 0);
                Ri_M_real_addr_5_reg_1660 <= zext_ln516_1_fu_1240_p1(4 - 1 downto 0);
                Ri_M_real_addr_6_reg_1665 <= zext_ln516_2_fu_1251_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln459_reg_1433 <= add_ln459_fu_884_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln460_reg_1449 <= add_ln460_fu_922_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln511_fu_1214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln521_1_reg_1680 <= add_ln521_1_fu_1257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln486_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                add_ln521_reg_1549 <= add_ln521_fu_1106_p2;
                icmp_ln490_reg_1533 <= icmp_ln490_fu_1076_p2;
                sub_ln499_reg_1538 <= sub_ln499_fu_1090_p2;
                    zext_ln521_reg_1543(2 downto 0) <= zext_ln521_fu_1096_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln533_fu_1336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                add_ln538_reg_1785 <= add_ln538_fu_1364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                c_2_reg_1780 <= c_2_fu_1342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                c_3_reg_1803 <= c_3_fu_1406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                c_reg_1503 <= c_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln498_fu_1120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                icmp_ln499_reg_1562 <= icmp_ln499_fu_1126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln511_fu_1214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                icmp_ln513_reg_1656 <= icmp_ln513_fu_1226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln499_reg_1562 = ap_const_lv1_1) and (icmp_ln519_fu_1265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                icmp_ln521_reg_1693 <= icmp_ln521_fu_1277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln541_fu_1400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                icmp_ln543_reg_1808 <= icmp_ln543_fu_1412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_reg_1527 <= j_fu_1070_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln499_reg_1562 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                k_1_reg_1688 <= k_1_fu_1271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                k_reg_1651 <= k_fu_1220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                p_r_M_imag_1_reg_1624 <= grp_qrf_givens_float_s_fu_556_ap_return_3;
                p_r_M_imag_3_reg_1612 <= grp_qrf_givens_float_s_fu_556_ap_return_5;
                p_r_M_imag_4_reg_1600 <= grp_qrf_givens_float_s_fu_556_ap_return_7;
                p_r_M_imag_reg_1636 <= grp_qrf_givens_float_s_fu_556_ap_return_1;
                p_r_M_real_1_reg_1630 <= grp_qrf_givens_float_s_fu_556_ap_return_2;
                p_r_M_real_3_reg_1618 <= grp_qrf_givens_float_s_fu_556_ap_return_4;
                p_r_M_real_4_reg_1606 <= grp_qrf_givens_float_s_fu_556_ap_return_6;
                p_r_M_real_reg_1642 <= grp_qrf_givens_float_s_fu_556_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                r_1_reg_1761 <= r_1_fu_1314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                r_reg_1468 <= r_fu_966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_700 <= Ri_M_real_q0;
                reg_709 <= Ri_M_imag_q0;
                reg_718 <= Ri_M_real_q1;
                reg_727 <= Ri_M_imag_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_736 <= grp_fu_597_p2;
                reg_741 <= grp_fu_602_p2;
                reg_746 <= grp_fu_607_p2;
                reg_751 <= grp_fu_612_p2;
                reg_756 <= grp_fu_617_p2;
                reg_761 <= grp_fu_622_p2;
                reg_766 <= grp_fu_627_p2;
                reg_771 <= grp_fu_632_p2;
                reg_776 <= grp_fu_637_p2;
                reg_781 <= grp_fu_642_p2;
                reg_786 <= grp_fu_647_p2;
                reg_791 <= grp_fu_652_p2;
                reg_796 <= grp_fu_657_p2;
                reg_801 <= grp_fu_662_p2;
                reg_806 <= grp_fu_667_p2;
                reg_811 <= grp_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_816 <= grp_fu_565_p2;
                reg_822 <= grp_fu_569_p2;
                reg_828 <= grp_fu_573_p2;
                reg_834 <= grp_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_840 <= grp_fu_581_p2;
                reg_845 <= grp_fu_585_p2;
                reg_850 <= grp_fu_589_p2;
                reg_855 <= grp_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
                reg_860 <= grp_fu_565_p2;
                reg_866 <= grp_fu_569_p2;
                reg_872 <= grp_fu_573_p2;
                reg_878 <= grp_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln480_fu_1033_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    zext_ln482_2_reg_1508(5 downto 0) <= zext_ln482_2_fu_1054_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    zext_ln498_reg_1554(1 downto 0) <= zext_ln498_fu_1112_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln532_fu_1308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    zext_ln533_reg_1771(4 downto 2) <= zext_ln533_fu_1332_p1(4 downto 2);
                    zext_ln545_reg_1766(2 downto 0) <= zext_ln545_fu_1320_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln541_fu_1400_p2 = ap_const_lv1_0) and (icmp_ln543_fu_1412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    zext_ln545_2_reg_1812(5 downto 0) <= zext_ln545_2_fu_1427_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln1067_reg_1473(1 downto 0) <= "00";
    zext_ln1067_reg_1473(5) <= '0';
    zext_ln482_2_reg_1508(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln521_reg_1543(4 downto 3) <= "00";
    zext_ln498_reg_1554(31 downto 2) <= "000000000000000000000000000000";
    zext_ln503_reg_1566(1 downto 0) <= "00";
    zext_ln503_reg_1566(4) <= '0';
    zext_ln503_2_reg_1584(1 downto 0) <= "00";
    zext_ln503_2_reg_1584(4) <= '0';
    zext_ln545_reg_1766(5 downto 3) <= "000";
    zext_ln533_reg_1771(1 downto 0) <= "00";
    zext_ln533_reg_1771(5) <= '0';
    zext_ln545_2_reg_1812(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln471_fu_960_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln480_fu_1033_p2, ap_CS_fsm_state10, icmp_ln486_fu_1064_p2, ap_CS_fsm_state11, icmp_ln499_fu_1126_p2, icmp_ln499_reg_1562, icmp_ln498_fu_1120_p2, ap_CS_fsm_state14, grp_qrf_givens_float_s_fu_556_ap_done, ap_CS_fsm_state15, icmp_ln513_fu_1226_p2, icmp_ln511_fu_1214_p2, ap_CS_fsm_state31, icmp_ln521_fu_1277_p2, icmp_ln519_fu_1265_p2, ap_CS_fsm_state47, icmp_ln532_fu_1308_p2, ap_CS_fsm_state48, icmp_ln533_fu_1336_p2, ap_CS_fsm_state50, icmp_ln541_fu_1400_p2, icmp_ln459_fu_910_p2, icmp_ln459_1_fu_916_p2, icmp_ln460_fu_948_p2, icmp_ln460_1_fu_954_p2, icmp_ln472_fu_1000_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln459_1_fu_916_p2 = ap_const_lv1_1) and (icmp_ln459_fu_910_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((icmp_ln459_fu_910_p2 = ap_const_lv1_1) and (icmp_ln459_1_fu_916_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln460_1_fu_954_p2 = ap_const_lv1_1) and (icmp_ln460_fu_948_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln460_fu_948_p2 = ap_const_lv1_1) and (icmp_ln460_1_fu_954_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln471_fu_960_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln472_fu_1000_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln480_fu_1033_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln486_fu_1064_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln498_fu_1120_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln498_fu_1120_p2 = ap_const_lv1_0) and (icmp_ln499_fu_1126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln511_fu_1214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                elsif (((icmp_ln513_fu_1226_p2 = ap_const_lv1_1) and (icmp_ln511_fu_1214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln519_fu_1265_p2 = ap_const_lv1_1) or (icmp_ln499_reg_1562 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((icmp_ln521_fu_1277_p2 = ap_const_lv1_1) and (icmp_ln499_reg_1562 = ap_const_lv1_1) and (icmp_ln519_fu_1265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln532_fu_1308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln533_fu_1336_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln541_fu_1400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_M_imag_address0 <= zext_ln482_2_fu_1054_p1(4 - 1 downto 0);

    A_M_imag_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_M_imag_ce0 <= ap_const_logic_1;
        else 
            A_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_M_real_address0 <= zext_ln482_2_fu_1054_p1(4 - 1 downto 0);

    A_M_real_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_M_real_ce0 <= ap_const_logic_1;
        else 
            A_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_M_imag_address0 <= zext_ln538_2_fu_1380_p1(4 - 1 downto 0);

    Q_M_imag_ce0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            Q_M_imag_ce0 <= ap_const_logic_1;
        else 
            Q_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_M_imag_d0 <= xor_ln155_fu_1389_p2;

    Q_M_imag_we0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            Q_M_imag_we0 <= ap_const_logic_1;
        else 
            Q_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_M_real_address0 <= zext_ln538_2_fu_1380_p1(4 - 1 downto 0);

    Q_M_real_ce0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            Q_M_real_ce0 <= ap_const_logic_1;
        else 
            Q_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_M_real_d0 <= Qi_M_real_q1;

    Q_M_real_we0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            Q_M_real_we0 <= ap_const_logic_1;
        else 
            Q_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Qi_M_imag_address0_assign_proc : process(ap_CS_fsm_state3, Qi_M_imag_addr_1_reg_1484, ap_CS_fsm_state7, ap_CS_fsm_state31, Qi_M_imag_addr_5_reg_1715, icmp_ln472_fu_1000_p2, ap_CS_fsm_state46, zext_ln1027_fu_904_p1, zext_ln1067_3_fu_1027_p1, icmp_ln474_fu_1012_p2, zext_ln524_1_fu_1291_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            Qi_M_imag_address0 <= Qi_M_imag_addr_5_reg_1715;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Qi_M_imag_address0 <= zext_ln524_1_fu_1291_p1(4 - 1 downto 0);
        elsif (((icmp_ln474_fu_1012_p2 = ap_const_lv1_1) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Qi_M_imag_address0 <= Qi_M_imag_addr_1_reg_1484;
        elsif (((icmp_ln474_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Qi_M_imag_address0 <= zext_ln1067_3_fu_1027_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Qi_M_imag_address0 <= zext_ln1027_fu_904_p1(4 - 1 downto 0);
        else 
            Qi_M_imag_address0 <= "XXXX";
        end if; 
    end process;


    Qi_M_imag_address1_assign_proc : process(ap_CS_fsm_state31, Qi_M_imag_addr_4_reg_1709, ap_CS_fsm_state48, ap_CS_fsm_state46, zext_ln524_2_fu_1302_p1, zext_ln538_3_fu_1374_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            Qi_M_imag_address1 <= zext_ln538_3_fu_1374_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            Qi_M_imag_address1 <= Qi_M_imag_addr_4_reg_1709;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Qi_M_imag_address1 <= zext_ln524_2_fu_1302_p1(4 - 1 downto 0);
        else 
            Qi_M_imag_address1 <= "XXXX";
        end if; 
    end process;


    Qi_M_imag_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state31, icmp_ln472_fu_1000_p2, ap_CS_fsm_state46, icmp_ln474_fu_1012_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_1) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            Qi_M_imag_ce0 <= ap_const_logic_1;
        else 
            Qi_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Qi_M_imag_ce1_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state48, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            Qi_M_imag_ce1 <= ap_const_logic_1;
        else 
            Qi_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Qi_M_imag_d0_assign_proc : process(reg_878, ap_CS_fsm_state3, ap_CS_fsm_state7, icmp_ln472_fu_1000_p2, ap_CS_fsm_state46, icmp_ln474_fu_1012_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            Qi_M_imag_d0 <= reg_878;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_1) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            Qi_M_imag_d0 <= ap_const_lv32_0;
        else 
            Qi_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Qi_M_imag_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, icmp_ln521_reg_1693, icmp_ln472_fu_1000_p2, ap_CS_fsm_state46, icmp_ln474_fu_1012_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln521_reg_1693 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_1) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            Qi_M_imag_we0 <= ap_const_logic_1;
        else 
            Qi_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Qi_M_imag_we1_assign_proc : process(icmp_ln521_reg_1693, ap_CS_fsm_state46)
    begin
        if (((icmp_ln521_reg_1693 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            Qi_M_imag_we1 <= ap_const_logic_1;
        else 
            Qi_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Qi_M_real_address0_assign_proc : process(ap_CS_fsm_state3, Qi_M_real_addr_1_reg_1479, ap_CS_fsm_state7, ap_CS_fsm_state31, Qi_M_real_addr_5_reg_1703, icmp_ln472_fu_1000_p2, ap_CS_fsm_state46, zext_ln1027_fu_904_p1, zext_ln1067_3_fu_1027_p1, icmp_ln474_fu_1012_p2, zext_ln524_1_fu_1291_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            Qi_M_real_address0 <= Qi_M_real_addr_5_reg_1703;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Qi_M_real_address0 <= zext_ln524_1_fu_1291_p1(4 - 1 downto 0);
        elsif (((icmp_ln474_fu_1012_p2 = ap_const_lv1_1) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Qi_M_real_address0 <= Qi_M_real_addr_1_reg_1479;
        elsif (((icmp_ln474_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Qi_M_real_address0 <= zext_ln1067_3_fu_1027_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Qi_M_real_address0 <= zext_ln1027_fu_904_p1(4 - 1 downto 0);
        else 
            Qi_M_real_address0 <= "XXXX";
        end if; 
    end process;


    Qi_M_real_address1_assign_proc : process(ap_CS_fsm_state31, Qi_M_real_addr_4_reg_1697, ap_CS_fsm_state48, ap_CS_fsm_state46, zext_ln524_2_fu_1302_p1, zext_ln538_3_fu_1374_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            Qi_M_real_address1 <= zext_ln538_3_fu_1374_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            Qi_M_real_address1 <= Qi_M_real_addr_4_reg_1697;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Qi_M_real_address1 <= zext_ln524_2_fu_1302_p1(4 - 1 downto 0);
        else 
            Qi_M_real_address1 <= "XXXX";
        end if; 
    end process;


    Qi_M_real_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state31, icmp_ln472_fu_1000_p2, ap_CS_fsm_state46, icmp_ln474_fu_1012_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_1) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            Qi_M_real_ce0 <= ap_const_logic_1;
        else 
            Qi_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Qi_M_real_ce1_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state48, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            Qi_M_real_ce1 <= ap_const_logic_1;
        else 
            Qi_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Qi_M_real_d0_assign_proc : process(reg_872, ap_CS_fsm_state3, ap_CS_fsm_state7, icmp_ln472_fu_1000_p2, ap_CS_fsm_state46, icmp_ln474_fu_1012_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            Qi_M_real_d0 <= reg_872;
        elsif (((icmp_ln474_fu_1012_p2 = ap_const_lv1_1) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Qi_M_real_d0 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            Qi_M_real_d0 <= ap_const_lv32_0;
        else 
            Qi_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Qi_M_real_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, icmp_ln521_reg_1693, icmp_ln472_fu_1000_p2, ap_CS_fsm_state46, icmp_ln474_fu_1012_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln521_reg_1693 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_1) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln474_fu_1012_p2 = ap_const_lv1_0) and (icmp_ln472_fu_1000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            Qi_M_real_we0 <= ap_const_logic_1;
        else 
            Qi_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Qi_M_real_we1_assign_proc : process(icmp_ln521_reg_1693, ap_CS_fsm_state46)
    begin
        if (((icmp_ln521_reg_1693 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            Qi_M_real_we1 <= ap_const_logic_1;
        else 
            Qi_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;

    R_M_imag_address0 <= zext_ln545_2_reg_1812(4 - 1 downto 0);

    R_M_imag_ce0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            R_M_imag_ce0 <= ap_const_logic_1;
        else 
            R_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_M_imag_d0 <= Ri_M_imag_q0;

    R_M_imag_we0_assign_proc : process(icmp_ln543_reg_1808, ap_CS_fsm_state51)
    begin
        if (((icmp_ln543_reg_1808 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            R_M_imag_we0 <= ap_const_logic_1;
        else 
            R_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    R_M_real_address0 <= zext_ln545_2_reg_1812(4 - 1 downto 0);

    R_M_real_ce0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            R_M_real_ce0 <= ap_const_logic_1;
        else 
            R_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_M_real_d0 <= Ri_M_real_q0;

    R_M_real_we0_assign_proc : process(icmp_ln543_reg_1808, ap_CS_fsm_state51)
    begin
        if (((icmp_ln543_reg_1808 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            R_M_real_we0 <= ap_const_logic_1;
        else 
            R_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Ri_M_imag_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln482_2_reg_1508, ap_CS_fsm_state11, ap_CS_fsm_state15, Ri_M_imag_addr_5_reg_1670, ap_CS_fsm_state50, zext_ln545_2_fu_1427_p1, ap_CS_fsm_state9, ap_CS_fsm_state30, zext_ln1027_1_fu_942_p1, zext_ln503_1_fu_1148_p1, zext_ln516_1_fu_1240_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            Ri_M_imag_address0 <= zext_ln545_2_fu_1427_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Ri_M_imag_address0 <= Ri_M_imag_addr_5_reg_1670;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Ri_M_imag_address0 <= zext_ln516_1_fu_1240_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Ri_M_imag_address0 <= zext_ln503_1_fu_1148_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Ri_M_imag_address0 <= zext_ln482_2_reg_1508(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Ri_M_imag_address0 <= zext_ln1027_1_fu_942_p1(4 - 1 downto 0);
        else 
            Ri_M_imag_address0 <= "XXXX";
        end if; 
    end process;


    Ri_M_imag_address1_assign_proc : process(icmp_ln490_reg_1533, ap_CS_fsm_state11, Ri_M_imag_addr_2_reg_1578, Ri_M_imag_addr_3_reg_1595, ap_CS_fsm_state14, ap_CS_fsm_state15, Ri_M_imag_addr_6_reg_1675, ap_CS_fsm_state30, zext_ln503_3_fu_1171_p1, zext_ln516_2_fu_1251_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Ri_M_imag_address1 <= Ri_M_imag_addr_6_reg_1675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Ri_M_imag_address1 <= zext_ln516_2_fu_1251_p1(4 - 1 downto 0);
        elsif (((icmp_ln490_reg_1533 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            Ri_M_imag_address1 <= Ri_M_imag_addr_3_reg_1595;
        elsif (((icmp_ln490_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            Ri_M_imag_address1 <= Ri_M_imag_addr_2_reg_1578;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Ri_M_imag_address1 <= zext_ln503_3_fu_1171_p1(4 - 1 downto 0);
        else 
            Ri_M_imag_address1 <= "XXXX";
        end if; 
    end process;


    Ri_M_imag_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state50, ap_CS_fsm_state9, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            Ri_M_imag_ce0 <= ap_const_logic_1;
        else 
            Ri_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ri_M_imag_ce1_assign_proc : process(icmp_ln490_reg_1533, ap_CS_fsm_state11, ap_CS_fsm_state14, grp_qrf_givens_float_s_fu_556_ap_done, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (icmp_ln490_reg_1533 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (icmp_ln490_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            Ri_M_imag_ce1 <= ap_const_logic_1;
        else 
            Ri_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Ri_M_imag_d0_assign_proc : process(A_M_imag_q0, reg_822, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Ri_M_imag_d0 <= reg_822;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Ri_M_imag_d0 <= A_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Ri_M_imag_d0 <= ap_const_lv32_0;
        else 
            Ri_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Ri_M_imag_d1_assign_proc : process(reg_834, icmp_ln490_reg_1533, ap_CS_fsm_state14, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Ri_M_imag_d1 <= reg_834;
        elsif ((((icmp_ln490_reg_1533 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((icmp_ln490_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            Ri_M_imag_d1 <= ap_const_lv32_0;
        else 
            Ri_M_imag_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Ri_M_imag_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln513_reg_1656, ap_CS_fsm_state9, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln513_reg_1656 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            Ri_M_imag_we0 <= ap_const_logic_1;
        else 
            Ri_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Ri_M_imag_we1_assign_proc : process(icmp_ln490_reg_1533, ap_CS_fsm_state14, grp_qrf_givens_float_s_fu_556_ap_done, icmp_ln513_reg_1656, ap_CS_fsm_state30)
    begin
        if ((((icmp_ln513_reg_1656 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (icmp_ln490_reg_1533 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (icmp_ln490_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            Ri_M_imag_we1 <= ap_const_logic_1;
        else 
            Ri_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Ri_M_real_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln482_2_reg_1508, ap_CS_fsm_state11, ap_CS_fsm_state15, Ri_M_real_addr_5_reg_1660, ap_CS_fsm_state50, zext_ln545_2_fu_1427_p1, ap_CS_fsm_state9, ap_CS_fsm_state30, zext_ln1027_1_fu_942_p1, zext_ln503_1_fu_1148_p1, zext_ln516_1_fu_1240_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            Ri_M_real_address0 <= zext_ln545_2_fu_1427_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Ri_M_real_address0 <= Ri_M_real_addr_5_reg_1660;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Ri_M_real_address0 <= zext_ln516_1_fu_1240_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Ri_M_real_address0 <= zext_ln503_1_fu_1148_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Ri_M_real_address0 <= zext_ln482_2_reg_1508(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Ri_M_real_address0 <= zext_ln1027_1_fu_942_p1(4 - 1 downto 0);
        else 
            Ri_M_real_address0 <= "XXXX";
        end if; 
    end process;


    Ri_M_real_address1_assign_proc : process(icmp_ln490_reg_1533, ap_CS_fsm_state11, Ri_M_real_addr_2_reg_1572, Ri_M_real_addr_3_reg_1590, ap_CS_fsm_state14, ap_CS_fsm_state15, Ri_M_real_addr_6_reg_1665, ap_CS_fsm_state30, zext_ln503_3_fu_1171_p1, zext_ln516_2_fu_1251_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Ri_M_real_address1 <= Ri_M_real_addr_6_reg_1665;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Ri_M_real_address1 <= zext_ln516_2_fu_1251_p1(4 - 1 downto 0);
        elsif (((icmp_ln490_reg_1533 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            Ri_M_real_address1 <= Ri_M_real_addr_3_reg_1590;
        elsif (((icmp_ln490_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            Ri_M_real_address1 <= Ri_M_real_addr_2_reg_1572;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Ri_M_real_address1 <= zext_ln503_3_fu_1171_p1(4 - 1 downto 0);
        else 
            Ri_M_real_address1 <= "XXXX";
        end if; 
    end process;


    Ri_M_real_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state50, ap_CS_fsm_state9, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            Ri_M_real_ce0 <= ap_const_logic_1;
        else 
            Ri_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ri_M_real_ce1_assign_proc : process(icmp_ln490_reg_1533, ap_CS_fsm_state11, ap_CS_fsm_state14, grp_qrf_givens_float_s_fu_556_ap_done, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (icmp_ln490_reg_1533 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (icmp_ln490_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            Ri_M_real_ce1 <= ap_const_logic_1;
        else 
            Ri_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Ri_M_real_d0_assign_proc : process(A_M_real_q0, reg_816, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Ri_M_real_d0 <= reg_816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Ri_M_real_d0 <= A_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Ri_M_real_d0 <= ap_const_lv32_0;
        else 
            Ri_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Ri_M_real_d1_assign_proc : process(reg_828, icmp_ln490_reg_1533, ap_CS_fsm_state14, grp_qrf_givens_float_s_fu_556_ap_return_8, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Ri_M_real_d1 <= reg_828;
        elsif ((((icmp_ln490_reg_1533 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((icmp_ln490_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            Ri_M_real_d1 <= grp_qrf_givens_float_s_fu_556_ap_return_8;
        else 
            Ri_M_real_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Ri_M_real_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln513_reg_1656, ap_CS_fsm_state9, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln513_reg_1656 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            Ri_M_real_we0 <= ap_const_logic_1;
        else 
            Ri_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Ri_M_real_we1_assign_proc : process(icmp_ln490_reg_1533, ap_CS_fsm_state14, grp_qrf_givens_float_s_fu_556_ap_done, icmp_ln513_reg_1656, ap_CS_fsm_state30)
    begin
        if ((((icmp_ln513_reg_1656 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (icmp_ln490_reg_1533 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_qrf_givens_float_s_fu_556_ap_done = ap_const_logic_1) and (icmp_ln490_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            Ri_M_real_we1 <= ap_const_logic_1;
        else 
            Ri_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1067_1_fu_1022_p2 <= std_logic_vector(unsigned(zext_ln1067_reg_1473) + unsigned(zext_ln1067_2_fu_1018_p1));
    add_ln1067_fu_988_p2 <= std_logic_vector(unsigned(zext_ln482_fu_972_p1) + unsigned(zext_ln1067_fu_984_p1));
    add_ln459_1_fu_890_p2 <= std_logic_vector(unsigned(phi_ln459_1_reg_409) + unsigned(ap_const_lv2_1));
    add_ln459_fu_884_p2 <= std_logic_vector(unsigned(phi_ln459_reg_397) + unsigned(ap_const_lv2_1));
    add_ln460_1_fu_928_p2 <= std_logic_vector(unsigned(phi_ln460_1_reg_432) + unsigned(ap_const_lv2_1));
    add_ln460_fu_922_p2 <= std_logic_vector(unsigned(phi_ln460_reg_420) + unsigned(ap_const_lv2_1));
    add_ln482_fu_1049_p2 <= std_logic_vector(unsigned(zext_ln1067_reg_1473) + unsigned(zext_ln482_1_fu_1045_p1));
    add_ln503_1_fu_1143_p2 <= std_logic_vector(unsigned(zext_ln521_reg_1543) + unsigned(zext_ln503_fu_1139_p1));
    add_ln503_2_fu_1166_p2 <= std_logic_vector(unsigned(zext_ln521_reg_1543) + unsigned(zext_ln503_2_fu_1162_p1));
    add_ln516_1_fu_1246_p2 <= std_logic_vector(unsigned(zext_ln503_2_reg_1584) + unsigned(zext_ln516_fu_1231_p1));
    add_ln516_fu_1235_p2 <= std_logic_vector(unsigned(zext_ln503_reg_1566) + unsigned(zext_ln516_fu_1231_p1));
    add_ln521_1_fu_1257_p2 <= std_logic_vector(unsigned(add_ln521_reg_1549) + unsigned(zext_ln498_reg_1554));
    add_ln521_fu_1106_p2 <= std_logic_vector(unsigned(zext_ln490_fu_1082_p1) + unsigned(xor_ln521_fu_1100_p2));
    add_ln524_1_fu_1297_p2 <= std_logic_vector(unsigned(zext_ln503_2_reg_1584) + unsigned(zext_ln524_fu_1282_p1));
    add_ln524_fu_1286_p2 <= std_logic_vector(unsigned(zext_ln503_reg_1566) + unsigned(zext_ln524_fu_1282_p1));
    add_ln538_1_fu_1369_p2 <= std_logic_vector(unsigned(zext_ln538_fu_1348_p1) + unsigned(zext_ln533_reg_1771));
    add_ln538_fu_1364_p2 <= std_logic_vector(unsigned(zext_ln545_reg_1766) + unsigned(zext_ln538_1_fu_1360_p1));
    add_ln545_fu_1422_p2 <= std_logic_vector(unsigned(zext_ln533_reg_1771) + unsigned(zext_ln545_1_fu_1418_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state47, icmp_ln532_fu_1308_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln532_fu_1308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_492_p4 <= i_0_reg_488;

    ap_ready_assign_proc : process(ap_CS_fsm_state47, icmp_ln532_fu_1308_p2)
    begin
        if (((icmp_ln532_fu_1308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln155_fu_1385_p1 <= Qi_M_imag_q1;
    c_1_fu_1006_p2 <= std_logic_vector(unsigned(c_0_reg_455) + unsigned(ap_const_lv3_1));
    c_2_fu_1342_p2 <= std_logic_vector(unsigned(c15_0_reg_534) + unsigned(ap_const_lv3_1));
    c_3_fu_1406_p2 <= std_logic_vector(unsigned(c16_0_reg_545) + unsigned(ap_const_lv3_1));
    c_fu_1039_p2 <= std_logic_vector(unsigned(c12_0_reg_466) + unsigned(ap_const_lv3_1));

    grp_fu_565_opcode_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_565_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_565_opcode <= ap_const_lv2_0;
        else 
            grp_fu_565_opcode <= "XX";
        end if; 
    end process;


    grp_fu_565_p0_assign_proc : process(reg_736, reg_816, reg_860, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_565_p0 <= reg_860;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_565_p0 <= reg_816;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_565_p0 <= reg_736;
        else 
            grp_fu_565_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_565_p1_assign_proc : process(reg_741, reg_828, reg_872, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_565_p1 <= reg_872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_565_p1 <= reg_828;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_565_p1 <= reg_741;
        else 
            grp_fu_565_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_569_p0_assign_proc : process(reg_746, reg_822, reg_866, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_569_p0 <= reg_866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_569_p0 <= reg_822;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_569_p0 <= reg_746;
        else 
            grp_fu_569_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_569_p1_assign_proc : process(reg_751, reg_834, reg_878, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_569_p1 <= reg_878;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_569_p1 <= reg_834;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_569_p1 <= reg_751;
        else 
            grp_fu_569_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_573_opcode_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_573_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_573_opcode <= ap_const_lv2_0;
        else 
            grp_fu_573_opcode <= "XX";
        end if; 
    end process;


    grp_fu_573_p0_assign_proc : process(reg_756, reg_840, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_573_p0 <= reg_840;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_573_p0 <= reg_756;
        else 
            grp_fu_573_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_573_p1_assign_proc : process(reg_761, reg_850, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_573_p1 <= reg_850;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_573_p1 <= reg_761;
        else 
            grp_fu_573_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_577_p0_assign_proc : process(reg_766, reg_845, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_577_p0 <= reg_845;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_577_p0 <= reg_766;
        else 
            grp_fu_577_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_577_p1_assign_proc : process(reg_771, reg_855, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_577_p1 <= reg_855;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_577_p1 <= reg_771;
        else 
            grp_fu_577_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_597_p1_assign_proc : process(Ri_M_real_q0, ap_CS_fsm_state16, Qi_M_real_q0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_597_p1 <= Qi_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_597_p1 <= Ri_M_real_q0;
        else 
            grp_fu_597_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_602_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_imag_q0, ap_CS_fsm_state32, Qi_M_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_602_p1 <= Qi_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_602_p1 <= Ri_M_imag_q0;
        else 
            grp_fu_602_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_607_p1_assign_proc : process(Ri_M_real_q0, ap_CS_fsm_state16, Qi_M_real_q0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_607_p1 <= Qi_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_607_p1 <= Ri_M_real_q0;
        else 
            grp_fu_607_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_612_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_imag_q0, ap_CS_fsm_state32, Qi_M_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_612_p1 <= Qi_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_612_p1 <= Ri_M_imag_q0;
        else 
            grp_fu_612_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_617_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_real_q1, ap_CS_fsm_state32, Qi_M_real_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_617_p1 <= Qi_M_real_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_617_p1 <= Ri_M_real_q1;
        else 
            grp_fu_617_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_622_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_imag_q1, ap_CS_fsm_state32, Qi_M_imag_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_622_p1 <= Qi_M_imag_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_622_p1 <= Ri_M_imag_q1;
        else 
            grp_fu_622_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_627_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_real_q1, ap_CS_fsm_state32, Qi_M_real_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_627_p1 <= Qi_M_real_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_627_p1 <= Ri_M_real_q1;
        else 
            grp_fu_627_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_632_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_imag_q1, ap_CS_fsm_state32, Qi_M_imag_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_632_p1 <= Qi_M_imag_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_632_p1 <= Ri_M_imag_q1;
        else 
            grp_fu_632_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_637_p1_assign_proc : process(Ri_M_real_q0, ap_CS_fsm_state16, Qi_M_real_q0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_637_p1 <= Qi_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_637_p1 <= Ri_M_real_q0;
        else 
            grp_fu_637_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_642_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_imag_q0, ap_CS_fsm_state32, Qi_M_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_642_p1 <= Qi_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_642_p1 <= Ri_M_imag_q0;
        else 
            grp_fu_642_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_647_p1_assign_proc : process(Ri_M_real_q0, ap_CS_fsm_state16, Qi_M_real_q0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_647_p1 <= Qi_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_647_p1 <= Ri_M_real_q0;
        else 
            grp_fu_647_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_652_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_imag_q0, ap_CS_fsm_state32, Qi_M_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_652_p1 <= Qi_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_652_p1 <= Ri_M_imag_q0;
        else 
            grp_fu_652_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_657_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_real_q1, ap_CS_fsm_state32, Qi_M_real_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_657_p1 <= Qi_M_real_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_657_p1 <= Ri_M_real_q1;
        else 
            grp_fu_657_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_662_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_imag_q1, ap_CS_fsm_state32, Qi_M_imag_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_662_p1 <= Qi_M_imag_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_662_p1 <= Ri_M_imag_q1;
        else 
            grp_fu_662_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_667_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_real_q1, ap_CS_fsm_state32, Qi_M_real_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_667_p1 <= Qi_M_real_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_667_p1 <= Ri_M_real_q1;
        else 
            grp_fu_667_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_672_p1_assign_proc : process(ap_CS_fsm_state16, Ri_M_imag_q1, ap_CS_fsm_state32, Qi_M_imag_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_672_p1 <= Qi_M_imag_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_672_p1 <= Ri_M_imag_q1;
        else 
            grp_fu_672_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_693_p0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state31, ap_phi_mux_i_0_phi_fu_492_p4, i_0_reg_488)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_693_p0 <= i_0_reg_488;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_693_p0 <= ap_phi_mux_i_0_phi_fu_492_p4;
        else 
            grp_fu_693_p0 <= "XX";
        end if; 
    end process;

    grp_fu_693_p2 <= std_logic_vector(unsigned(grp_fu_693_p0) + unsigned(ap_const_lv2_3));
    grp_qrf_givens_float_s_fu_556_ap_start <= grp_qrf_givens_float_s_fu_556_ap_start_reg;
    icmp_ln459_1_fu_916_p2 <= "1" when (phi_ln459_reg_397 = ap_const_lv2_3) else "0";
    icmp_ln459_fu_910_p2 <= "1" when (phi_ln459_1_reg_409 = ap_const_lv2_3) else "0";
    icmp_ln460_1_fu_954_p2 <= "1" when (phi_ln460_reg_420 = ap_const_lv2_3) else "0";
    icmp_ln460_fu_948_p2 <= "1" when (phi_ln460_1_reg_432 = ap_const_lv2_3) else "0";
    icmp_ln471_fu_960_p2 <= "1" when (r_0_reg_443 = ap_const_lv3_4) else "0";
    icmp_ln472_fu_1000_p2 <= "1" when (c_0_reg_455 = ap_const_lv3_4) else "0";
    icmp_ln474_fu_1012_p2 <= "1" when (r_0_reg_443 = c_0_reg_455) else "0";
    icmp_ln480_fu_1033_p2 <= "1" when (c12_0_reg_466 = ap_const_lv3_4) else "0";
    icmp_ln486_fu_1064_p2 <= "1" when (j_0_reg_477 = ap_const_lv3_4) else "0";
    icmp_ln490_fu_1076_p2 <= "1" when (j_0_reg_477 = ap_const_lv3_3) else "0";
    icmp_ln498_fu_1120_p2 <= "1" when (i_0_reg_488 = ap_const_lv2_0) else "0";
    icmp_ln499_fu_1126_p2 <= "1" when (signed(zext_ln498_2_fu_1116_p1) > signed(sub_ln499_reg_1538)) else "0";
    icmp_ln511_fu_1214_p2 <= "1" when (k_0_reg_500 = ap_const_lv3_4) else "0";
    icmp_ln513_fu_1226_p2 <= "1" when (unsigned(k_0_reg_500) < unsigned(j_reg_1527)) else "0";
    icmp_ln519_fu_1265_p2 <= "1" when (k13_0_reg_511 = ap_const_lv3_4) else "0";
    icmp_ln521_fu_1277_p2 <= "1" when (signed(zext_ln519_fu_1261_p1) < signed(add_ln521_1_reg_1680)) else "0";
    icmp_ln532_fu_1308_p2 <= "1" when (r14_0_reg_522 = ap_const_lv3_4) else "0";
    icmp_ln533_fu_1336_p2 <= "1" when (c15_0_reg_534 = ap_const_lv3_4) else "0";
    icmp_ln541_fu_1400_p2 <= "1" when (c16_0_reg_545 = ap_const_lv3_4) else "0";
    icmp_ln543_fu_1412_p2 <= "1" when (unsigned(r14_0_reg_522) > unsigned(c16_0_reg_545)) else "0";
    j_fu_1070_p2 <= std_logic_vector(unsigned(j_0_reg_477) + unsigned(ap_const_lv3_1));
    k_1_fu_1271_p2 <= std_logic_vector(unsigned(k13_0_reg_511) + unsigned(ap_const_lv3_1));
    k_fu_1220_p2 <= std_logic_vector(unsigned(k_0_reg_500) + unsigned(ap_const_lv3_1));
    r_1_fu_1314_p2 <= std_logic_vector(unsigned(r14_0_reg_522) + unsigned(ap_const_lv3_1));
    r_fu_966_p2 <= std_logic_vector(unsigned(r_0_reg_443) + unsigned(ap_const_lv3_1));
    sub_ln499_fu_1090_p2 <= std_logic_vector(unsigned(j_0_reg_477) - unsigned(zext_ln499_fu_1086_p1));
    tmp_10_fu_1154_p3 <= (i_0_reg_488 & ap_const_lv2_0);
    tmp_11_fu_1352_p3 <= (c15_0_reg_534 & ap_const_lv2_0);
    tmp_12_fu_934_p3 <= (phi_ln460_reg_420 & phi_ln460_1_reg_432);
    tmp_5_fu_896_p3 <= (phi_ln459_reg_397 & phi_ln459_1_reg_409);
    tmp_7_fu_976_p3 <= (r_0_reg_443 & ap_const_lv2_0);
    tmp_8_fu_1324_p3 <= (r14_0_reg_522 & ap_const_lv2_0);
    tmp_9_fu_1131_p3 <= (grp_fu_693_p2 & ap_const_lv2_0);
    xor_ln155_fu_1389_p2 <= (bitcast_ln155_fu_1385_p1 xor ap_const_lv32_80000000);
    xor_ln521_fu_1100_p2 <= (zext_ln486_fu_1060_p1 xor ap_const_lv32_FFFFFFFF);
    zext_ln1027_1_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_934_p3),64));
    zext_ln1027_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_896_p3),64));
    zext_ln1067_1_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1067_fu_988_p2),64));
    zext_ln1067_2_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_455),6));
    zext_ln1067_3_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1067_1_fu_1022_p2),64));
    zext_ln1067_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_976_p3),6));
    zext_ln482_1_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c12_0_reg_466),6));
    zext_ln482_2_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln482_fu_1049_p2),64));
    zext_ln482_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_443),6));
    zext_ln486_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_477),32));
    zext_ln490_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln490_fu_1076_p2),32));
    zext_ln498_2_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_488),3));
    zext_ln498_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_488),32));
    zext_ln499_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln490_fu_1076_p2),3));
    zext_ln503_1_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln503_1_fu_1143_p2),64));
    zext_ln503_2_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1154_p3),5));
    zext_ln503_3_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln503_2_fu_1166_p2),64));
    zext_ln503_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1131_p3),5));
    zext_ln516_1_fu_1240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln516_fu_1235_p2),64));
    zext_ln516_2_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln516_1_fu_1246_p2),64));
    zext_ln516_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_500),5));
    zext_ln519_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k13_0_reg_511),32));
    zext_ln521_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_477),5));
    zext_ln524_1_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln524_fu_1286_p2),64));
    zext_ln524_2_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln524_1_fu_1297_p2),64));
    zext_ln524_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k13_0_reg_511),5));
    zext_ln533_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1324_p3),6));
    zext_ln538_1_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1352_p3),6));
    zext_ln538_2_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln538_reg_1785),64));
    zext_ln538_3_fu_1374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln538_1_fu_1369_p2),64));
    zext_ln538_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c15_0_reg_534),6));
    zext_ln545_1_fu_1418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c16_0_reg_545),6));
    zext_ln545_2_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln545_fu_1422_p2),64));
    zext_ln545_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r14_0_reg_522),6));
end behav;
