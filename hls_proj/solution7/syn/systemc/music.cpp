// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "music.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic music::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic music::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> music::ap_ST_fsm_state1 = "1";
const sc_lv<26> music::ap_ST_fsm_state2 = "10";
const sc_lv<26> music::ap_ST_fsm_state3 = "100";
const sc_lv<26> music::ap_ST_fsm_state4 = "1000";
const sc_lv<26> music::ap_ST_fsm_state5 = "10000";
const sc_lv<26> music::ap_ST_fsm_state6 = "100000";
const sc_lv<26> music::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> music::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> music::ap_ST_fsm_state9 = "100000000";
const sc_lv<26> music::ap_ST_fsm_state10 = "1000000000";
const sc_lv<26> music::ap_ST_fsm_state11 = "10000000000";
const sc_lv<26> music::ap_ST_fsm_state12 = "100000000000";
const sc_lv<26> music::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<26> music::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<26> music::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<26> music::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<26> music::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<26> music::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<26> music::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<26> music::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<26> music::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<26> music::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<26> music::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<26> music::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<26> music::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<26> music::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<32> music::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> music::ap_const_lv1_0 = "0";
const sc_lv<1> music::ap_const_lv1_1 = "1";
const sc_lv<2> music::ap_const_lv2_0 = "00";
const sc_lv<2> music::ap_const_lv2_2 = "10";
const sc_lv<2> music::ap_const_lv2_3 = "11";
const sc_lv<2> music::ap_const_lv2_1 = "1";
const sc_lv<32> music::ap_const_lv32_4 = "100";
const sc_lv<32> music::ap_const_lv32_B = "1011";
const sc_lv<32> music::ap_const_lv32_F = "1111";
const sc_lv<32> music::ap_const_lv32_10 = "10000";
const sc_lv<32> music::ap_const_lv32_15 = "10101";
const sc_lv<32> music::ap_const_lv32_11 = "10001";
const sc_lv<32> music::ap_const_lv32_16 = "10110";
const sc_lv<32> music::ap_const_lv32_18 = "11000";
const sc_lv<32> music::ap_const_lv32_19 = "11001";
const int music::C_S_AXI_DATA_WIDTH = "100000";
const int music::C_M_AXI_DATA_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int music::C_M_AXI_DATA_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int music::C_M_AXI_DATA_CACHE_VALUE = "11";
const int music::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> music::ap_const_lv32_1 = "1";
const sc_lv<32> music::ap_const_lv32_2 = "10";
const sc_lv<32> music::ap_const_lv32_3 = "11";
const sc_lv<32> music::ap_const_lv32_E = "1110";
const bool music::ap_const_boolean_0 = false;
const sc_lv<32> music::ap_const_lv32_17 = "10111";
const sc_lv<4> music::ap_const_lv4_0 = "0000";
const sc_lv<3> music::ap_const_lv3_0 = "000";
const sc_lv<32> music::ap_const_lv32_C = "1100";
const sc_lv<11> music::ap_const_lv11_0 = "00000000000";
const sc_lv<32> music::ap_const_lv32_D = "1101";
const sc_lv<9> music::ap_const_lv9_0 = "000000000";
const sc_lv<4> music::ap_const_lv4_F = "1111";
const sc_lv<32> music::ap_const_lv32_1F = "11111";
const sc_lv<4> music::ap_const_lv4_A = "1010";
const sc_lv<4> music::ap_const_lv4_1 = "1";
const sc_lv<10> music::ap_const_lv10_0 = "0000000000";
const sc_lv<3> music::ap_const_lv3_4 = "100";
const sc_lv<3> music::ap_const_lv3_1 = "1";
const sc_lv<11> music::ap_const_lv11_400 = "10000000000";
const sc_lv<11> music::ap_const_lv11_1 = "1";
const sc_lv<9> music::ap_const_lv9_169 = "101101001";
const sc_lv<9> music::ap_const_lv9_1 = "1";
const sc_lv<9> music::ap_const_lv9_168 = "101101000";
const sc_lv<32> music::ap_const_lv32_B0 = "10110000";
const bool music::ap_const_boolean_1 = true;

music::music(sc_module_name name) : sc_module(name), mVcdFile(0) {
    temp_array_U = new music_temp_array("temp_array_U");
    temp_array_U->clk(ap_clk);
    temp_array_U->reset(ap_rst_n_inv);
    temp_array_U->address0(temp_array_address0);
    temp_array_U->ce0(temp_array_ce0);
    temp_array_U->q0(temp_array_q0);
    music_AXILiteS_s_axi_U = new music_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("music_AXILiteS_s_axi_U");
    music_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    music_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    music_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    music_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    music_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    music_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    music_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    music_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    music_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    music_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    music_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    music_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    music_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    music_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    music_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    music_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    music_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    music_AXILiteS_s_axi_U->ACLK(ap_clk);
    music_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    music_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    music_AXILiteS_s_axi_U->ap_start(ap_start);
    music_AXILiteS_s_axi_U->interrupt(interrupt);
    music_AXILiteS_s_axi_U->ap_ready(ap_ready);
    music_AXILiteS_s_axi_U->ap_done(ap_done);
    music_AXILiteS_s_axi_U->ap_idle(ap_idle);
    music_AXILiteS_s_axi_U->ap_return(ap_var_for_const1);
    music_AXILiteS_s_axi_U->data_re(data_re);
    music_AXILiteS_s_axi_U->data_im(data_im);
    music_data_m_axi_U = new music_data_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_DATA_ID_WIDTH,C_M_AXI_DATA_ADDR_WIDTH,C_M_AXI_DATA_DATA_WIDTH,C_M_AXI_DATA_AWUSER_WIDTH,C_M_AXI_DATA_ARUSER_WIDTH,C_M_AXI_DATA_WUSER_WIDTH,C_M_AXI_DATA_RUSER_WIDTH,C_M_AXI_DATA_BUSER_WIDTH,C_M_AXI_DATA_USER_VALUE,C_M_AXI_DATA_PROT_VALUE,C_M_AXI_DATA_CACHE_VALUE>("music_data_m_axi_U");
    music_data_m_axi_U->AWVALID(m_axi_data_AWVALID);
    music_data_m_axi_U->AWREADY(m_axi_data_AWREADY);
    music_data_m_axi_U->AWADDR(m_axi_data_AWADDR);
    music_data_m_axi_U->AWID(m_axi_data_AWID);
    music_data_m_axi_U->AWLEN(m_axi_data_AWLEN);
    music_data_m_axi_U->AWSIZE(m_axi_data_AWSIZE);
    music_data_m_axi_U->AWBURST(m_axi_data_AWBURST);
    music_data_m_axi_U->AWLOCK(m_axi_data_AWLOCK);
    music_data_m_axi_U->AWCACHE(m_axi_data_AWCACHE);
    music_data_m_axi_U->AWPROT(m_axi_data_AWPROT);
    music_data_m_axi_U->AWQOS(m_axi_data_AWQOS);
    music_data_m_axi_U->AWREGION(m_axi_data_AWREGION);
    music_data_m_axi_U->AWUSER(m_axi_data_AWUSER);
    music_data_m_axi_U->WVALID(m_axi_data_WVALID);
    music_data_m_axi_U->WREADY(m_axi_data_WREADY);
    music_data_m_axi_U->WDATA(m_axi_data_WDATA);
    music_data_m_axi_U->WSTRB(m_axi_data_WSTRB);
    music_data_m_axi_U->WLAST(m_axi_data_WLAST);
    music_data_m_axi_U->WID(m_axi_data_WID);
    music_data_m_axi_U->WUSER(m_axi_data_WUSER);
    music_data_m_axi_U->ARVALID(m_axi_data_ARVALID);
    music_data_m_axi_U->ARREADY(m_axi_data_ARREADY);
    music_data_m_axi_U->ARADDR(m_axi_data_ARADDR);
    music_data_m_axi_U->ARID(m_axi_data_ARID);
    music_data_m_axi_U->ARLEN(m_axi_data_ARLEN);
    music_data_m_axi_U->ARSIZE(m_axi_data_ARSIZE);
    music_data_m_axi_U->ARBURST(m_axi_data_ARBURST);
    music_data_m_axi_U->ARLOCK(m_axi_data_ARLOCK);
    music_data_m_axi_U->ARCACHE(m_axi_data_ARCACHE);
    music_data_m_axi_U->ARPROT(m_axi_data_ARPROT);
    music_data_m_axi_U->ARQOS(m_axi_data_ARQOS);
    music_data_m_axi_U->ARREGION(m_axi_data_ARREGION);
    music_data_m_axi_U->ARUSER(m_axi_data_ARUSER);
    music_data_m_axi_U->RVALID(m_axi_data_RVALID);
    music_data_m_axi_U->RREADY(m_axi_data_RREADY);
    music_data_m_axi_U->RDATA(m_axi_data_RDATA);
    music_data_m_axi_U->RLAST(m_axi_data_RLAST);
    music_data_m_axi_U->RID(m_axi_data_RID);
    music_data_m_axi_U->RUSER(m_axi_data_RUSER);
    music_data_m_axi_U->RRESP(m_axi_data_RRESP);
    music_data_m_axi_U->BVALID(m_axi_data_BVALID);
    music_data_m_axi_U->BREADY(m_axi_data_BREADY);
    music_data_m_axi_U->BRESP(m_axi_data_BRESP);
    music_data_m_axi_U->BID(m_axi_data_BID);
    music_data_m_axi_U->BUSER(m_axi_data_BUSER);
    music_data_m_axi_U->ACLK(ap_clk);
    music_data_m_axi_U->ARESET(ap_rst_n_inv);
    music_data_m_axi_U->ACLK_EN(ap_var_for_const0);
    music_data_m_axi_U->I_ARVALID(data_ARVALID);
    music_data_m_axi_U->I_ARREADY(data_ARREADY);
    music_data_m_axi_U->I_ARADDR(data_ARADDR);
    music_data_m_axi_U->I_ARID(ap_var_for_const2);
    music_data_m_axi_U->I_ARLEN(ap_var_for_const3);
    music_data_m_axi_U->I_ARSIZE(ap_var_for_const4);
    music_data_m_axi_U->I_ARLOCK(ap_var_for_const5);
    music_data_m_axi_U->I_ARCACHE(ap_var_for_const6);
    music_data_m_axi_U->I_ARQOS(ap_var_for_const6);
    music_data_m_axi_U->I_ARPROT(ap_var_for_const4);
    music_data_m_axi_U->I_ARUSER(ap_var_for_const2);
    music_data_m_axi_U->I_ARBURST(ap_var_for_const5);
    music_data_m_axi_U->I_ARREGION(ap_var_for_const6);
    music_data_m_axi_U->I_RVALID(data_RVALID);
    music_data_m_axi_U->I_RREADY(data_RREADY);
    music_data_m_axi_U->I_RDATA(data_RDATA);
    music_data_m_axi_U->I_RID(data_RID);
    music_data_m_axi_U->I_RUSER(data_RUSER);
    music_data_m_axi_U->I_RRESP(data_RRESP);
    music_data_m_axi_U->I_RLAST(data_RLAST);
    music_data_m_axi_U->I_AWVALID(data_AWVALID);
    music_data_m_axi_U->I_AWREADY(data_AWREADY);
    music_data_m_axi_U->I_AWADDR(data_AWADDR);
    music_data_m_axi_U->I_AWID(ap_var_for_const2);
    music_data_m_axi_U->I_AWLEN(ap_var_for_const3);
    music_data_m_axi_U->I_AWSIZE(ap_var_for_const4);
    music_data_m_axi_U->I_AWLOCK(ap_var_for_const5);
    music_data_m_axi_U->I_AWCACHE(ap_var_for_const6);
    music_data_m_axi_U->I_AWQOS(ap_var_for_const6);
    music_data_m_axi_U->I_AWPROT(ap_var_for_const4);
    music_data_m_axi_U->I_AWUSER(ap_var_for_const2);
    music_data_m_axi_U->I_AWBURST(ap_var_for_const5);
    music_data_m_axi_U->I_AWREGION(ap_var_for_const6);
    music_data_m_axi_U->I_WVALID(data_WVALID);
    music_data_m_axi_U->I_WREADY(data_WREADY);
    music_data_m_axi_U->I_WDATA(data_WDATA);
    music_data_m_axi_U->I_WID(ap_var_for_const2);
    music_data_m_axi_U->I_WUSER(ap_var_for_const2);
    music_data_m_axi_U->I_WLAST(ap_var_for_const7);
    music_data_m_axi_U->I_WSTRB(ap_var_for_const8);
    music_data_m_axi_U->I_BVALID(data_BVALID);
    music_data_m_axi_U->I_BREADY(data_BREADY);
    music_data_m_axi_U->I_BRESP(data_BRESP);
    music_data_m_axi_U->I_BID(data_BID);
    music_data_m_axi_U->I_BUSER(data_BUSER);
    FFT_Buffer_re_U = new music_FFT_Buffer_re("FFT_Buffer_re_U");
    FFT_Buffer_re_U->clk(ap_clk);
    FFT_Buffer_re_U->reset(ap_rst_n_inv);
    FFT_Buffer_re_U->address0(FFT_Buffer_re_address0);
    FFT_Buffer_re_U->ce0(FFT_Buffer_re_ce0);
    FFT_Buffer_re_U->we0(FFT_Buffer_re_we0);
    FFT_Buffer_re_U->d0(data_addr_read_reg_704);
    FFT_Buffer_re_U->q0(FFT_Buffer_re_q0);
    FFT_Buffer_im_U = new music_FFT_Buffer_re("FFT_Buffer_im_U");
    FFT_Buffer_im_U->clk(ap_clk);
    FFT_Buffer_im_U->reset(ap_rst_n_inv);
    FFT_Buffer_im_U->address0(FFT_Buffer_im_address0);
    FFT_Buffer_im_U->ce0(FFT_Buffer_im_ce0);
    FFT_Buffer_im_U->we0(FFT_Buffer_im_we0);
    FFT_Buffer_im_U->d0(ap_var_for_const9);
    FFT_Buffer_im_U->q0(FFT_Buffer_im_q0);
    FFT_out_re_U = new music_FFT_out_re("FFT_out_re_U");
    FFT_out_re_U->clk(ap_clk);
    FFT_out_re_U->reset(ap_rst_n_inv);
    FFT_out_re_U->address0(FFT_out_re_address0);
    FFT_out_re_U->ce0(FFT_out_re_ce0);
    FFT_out_re_U->we0(FFT_out_re_we0);
    FFT_out_re_U->d0(grp_fft_streaming_fu_368_OUT_R_d0);
    FFT_out_re_U->q0(FFT_out_re_q0);
    FFT_out_re_U->address1(grp_fft_streaming_fu_368_OUT_R_address1);
    FFT_out_re_U->ce1(FFT_out_re_ce1);
    FFT_out_re_U->we1(FFT_out_re_we1);
    FFT_out_re_U->d1(grp_fft_streaming_fu_368_OUT_R_d1);
    FFT_out_im_U = new music_FFT_out_re("FFT_out_im_U");
    FFT_out_im_U->clk(ap_clk);
    FFT_out_im_U->reset(ap_rst_n_inv);
    FFT_out_im_U->address0(FFT_out_im_address0);
    FFT_out_im_U->ce0(FFT_out_im_ce0);
    FFT_out_im_U->we0(FFT_out_im_we0);
    FFT_out_im_U->d0(grp_fft_streaming_fu_368_OUT_I_d0);
    FFT_out_im_U->q0(FFT_out_im_q0);
    FFT_out_im_U->address1(grp_fft_streaming_fu_368_OUT_I_address1);
    FFT_out_im_U->ce1(FFT_out_im_ce1);
    FFT_out_im_U->we1(FFT_out_im_we1);
    FFT_out_im_U->d1(grp_fft_streaming_fu_368_OUT_I_d1);
    grp_fft_streaming_fu_368 = new fft_streaming("grp_fft_streaming_fu_368");
    grp_fft_streaming_fu_368->ap_clk(ap_clk);
    grp_fft_streaming_fu_368->ap_rst(ap_rst_n_inv);
    grp_fft_streaming_fu_368->X_R_address0(grp_fft_streaming_fu_368_X_R_address0);
    grp_fft_streaming_fu_368->X_R_ce0(grp_fft_streaming_fu_368_X_R_ce0);
    grp_fft_streaming_fu_368->X_R_d0(grp_fft_streaming_fu_368_X_R_d0);
    grp_fft_streaming_fu_368->X_R_q0(FFT_Buffer_re_q0);
    grp_fft_streaming_fu_368->X_R_we0(grp_fft_streaming_fu_368_X_R_we0);
    grp_fft_streaming_fu_368->X_R_address1(grp_fft_streaming_fu_368_X_R_address1);
    grp_fft_streaming_fu_368->X_R_ce1(grp_fft_streaming_fu_368_X_R_ce1);
    grp_fft_streaming_fu_368->X_R_d1(grp_fft_streaming_fu_368_X_R_d1);
    grp_fft_streaming_fu_368->X_R_q1(ap_var_for_const9);
    grp_fft_streaming_fu_368->X_R_we1(grp_fft_streaming_fu_368_X_R_we1);
    grp_fft_streaming_fu_368->X_I_address0(grp_fft_streaming_fu_368_X_I_address0);
    grp_fft_streaming_fu_368->X_I_ce0(grp_fft_streaming_fu_368_X_I_ce0);
    grp_fft_streaming_fu_368->X_I_d0(grp_fft_streaming_fu_368_X_I_d0);
    grp_fft_streaming_fu_368->X_I_q0(FFT_Buffer_im_q0);
    grp_fft_streaming_fu_368->X_I_we0(grp_fft_streaming_fu_368_X_I_we0);
    grp_fft_streaming_fu_368->X_I_address1(grp_fft_streaming_fu_368_X_I_address1);
    grp_fft_streaming_fu_368->X_I_ce1(grp_fft_streaming_fu_368_X_I_ce1);
    grp_fft_streaming_fu_368->X_I_d1(grp_fft_streaming_fu_368_X_I_d1);
    grp_fft_streaming_fu_368->X_I_q1(ap_var_for_const9);
    grp_fft_streaming_fu_368->X_I_we1(grp_fft_streaming_fu_368_X_I_we1);
    grp_fft_streaming_fu_368->OUT_R_address0(grp_fft_streaming_fu_368_OUT_R_address0);
    grp_fft_streaming_fu_368->OUT_R_ce0(grp_fft_streaming_fu_368_OUT_R_ce0);
    grp_fft_streaming_fu_368->OUT_R_d0(grp_fft_streaming_fu_368_OUT_R_d0);
    grp_fft_streaming_fu_368->OUT_R_q0(ap_var_for_const9);
    grp_fft_streaming_fu_368->OUT_R_we0(grp_fft_streaming_fu_368_OUT_R_we0);
    grp_fft_streaming_fu_368->OUT_R_address1(grp_fft_streaming_fu_368_OUT_R_address1);
    grp_fft_streaming_fu_368->OUT_R_ce1(grp_fft_streaming_fu_368_OUT_R_ce1);
    grp_fft_streaming_fu_368->OUT_R_d1(grp_fft_streaming_fu_368_OUT_R_d1);
    grp_fft_streaming_fu_368->OUT_R_q1(ap_var_for_const9);
    grp_fft_streaming_fu_368->OUT_R_we1(grp_fft_streaming_fu_368_OUT_R_we1);
    grp_fft_streaming_fu_368->OUT_I_address0(grp_fft_streaming_fu_368_OUT_I_address0);
    grp_fft_streaming_fu_368->OUT_I_ce0(grp_fft_streaming_fu_368_OUT_I_ce0);
    grp_fft_streaming_fu_368->OUT_I_d0(grp_fft_streaming_fu_368_OUT_I_d0);
    grp_fft_streaming_fu_368->OUT_I_q0(ap_var_for_const9);
    grp_fft_streaming_fu_368->OUT_I_we0(grp_fft_streaming_fu_368_OUT_I_we0);
    grp_fft_streaming_fu_368->OUT_I_address1(grp_fft_streaming_fu_368_OUT_I_address1);
    grp_fft_streaming_fu_368->OUT_I_ce1(grp_fft_streaming_fu_368_OUT_I_ce1);
    grp_fft_streaming_fu_368->OUT_I_d1(grp_fft_streaming_fu_368_OUT_I_d1);
    grp_fft_streaming_fu_368->OUT_I_q1(ap_var_for_const9);
    grp_fft_streaming_fu_368->OUT_I_we1(grp_fft_streaming_fu_368_OUT_I_we1);
    grp_fft_streaming_fu_368->ap_start(grp_fft_streaming_fu_368_ap_start);
    grp_fft_streaming_fu_368->ap_done(grp_fft_streaming_fu_368_ap_done);
    grp_fft_streaming_fu_368->ap_ready(grp_fft_streaming_fu_368_ap_ready);
    grp_fft_streaming_fu_368->ap_idle(grp_fft_streaming_fu_368_ap_idle);
    grp_fft_streaming_fu_368->ap_continue(grp_fft_streaming_fu_368_ap_continue);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_FFT_Buffer_im_address0);
    sensitive << ( grp_fft_streaming_fu_368_X_I_address0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln306_2_fu_533_p1 );

    SC_METHOD(thread_FFT_Buffer_im_ce0);
    sensitive << ( grp_fft_streaming_fu_368_X_I_ce0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_Buffer_im_we0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_FFT_Buffer_re_address0);
    sensitive << ( grp_fft_streaming_fu_368_X_R_address0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln306_2_fu_533_p1 );

    SC_METHOD(thread_FFT_Buffer_re_ce0);
    sensitive << ( grp_fft_streaming_fu_368_X_R_ce0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_Buffer_re_we0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_FFT_out_im_address0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_fft_streaming_fu_368_OUT_I_address0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln311_fu_555_p1 );

    SC_METHOD(thread_FFT_out_im_ce0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_fft_streaming_fu_368_OUT_I_ce0 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_out_im_ce1);
    sensitive << ( grp_fft_streaming_fu_368_OUT_I_ce1 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_out_im_we0);
    sensitive << ( grp_fft_streaming_fu_368_OUT_I_we0 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_out_im_we1);
    sensitive << ( grp_fft_streaming_fu_368_OUT_I_we1 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_out_re_address0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_fft_streaming_fu_368_OUT_R_address0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln311_fu_555_p1 );

    SC_METHOD(thread_FFT_out_re_ce0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_fft_streaming_fu_368_OUT_R_ce0 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_out_re_ce1);
    sensitive << ( grp_fft_streaming_fu_368_OUT_R_ce1 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_out_re_we0);
    sensitive << ( grp_fft_streaming_fu_368_OUT_R_we0 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_FFT_out_re_we1);
    sensitive << ( grp_fft_streaming_fu_368_OUT_R_we1 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_P_sm_TDATA);
    sensitive << ( P_sm_data_1_data_out );

    SC_METHOD(thread_P_sm_TDATA_blk_n);
    sensitive << ( P_sm_data_1_state );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_P_sm_TLAST);
    sensitive << ( P_sm_last_V_1_data_out );

    SC_METHOD(thread_P_sm_TUSER);
    sensitive << ( P_sm_user_V_1_data_out );

    SC_METHOD(thread_P_sm_TVALID);
    sensitive << ( P_sm_last_V_1_state );

    SC_METHOD(thread_P_sm_data_1_ack_in);
    sensitive << ( P_sm_data_1_state );

    SC_METHOD(thread_P_sm_data_1_ack_out);
    sensitive << ( P_sm_TREADY );

    SC_METHOD(thread_P_sm_data_1_data_out);
    sensitive << ( P_sm_data_1_payload_A );
    sensitive << ( P_sm_data_1_payload_B );
    sensitive << ( P_sm_data_1_sel );

    SC_METHOD(thread_P_sm_data_1_load_A);
    sensitive << ( P_sm_data_1_sel_wr );
    sensitive << ( P_sm_data_1_state_cmp_full );

    SC_METHOD(thread_P_sm_data_1_load_B);
    sensitive << ( P_sm_data_1_sel_wr );
    sensitive << ( P_sm_data_1_state_cmp_full );

    SC_METHOD(thread_P_sm_data_1_sel);
    sensitive << ( P_sm_data_1_sel_rd );

    SC_METHOD(thread_P_sm_data_1_state_cmp_full);
    sensitive << ( P_sm_data_1_state );

    SC_METHOD(thread_P_sm_data_1_vld_in);
    sensitive << ( P_sm_data_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_P_sm_data_1_vld_out);
    sensitive << ( P_sm_data_1_state );

    SC_METHOD(thread_P_sm_last_V_1_ack_in);
    sensitive << ( P_sm_last_V_1_state );

    SC_METHOD(thread_P_sm_last_V_1_ack_out);
    sensitive << ( P_sm_TREADY );

    SC_METHOD(thread_P_sm_last_V_1_data_out);
    sensitive << ( P_sm_last_V_1_payload_A );
    sensitive << ( P_sm_last_V_1_payload_B );
    sensitive << ( P_sm_last_V_1_sel );

    SC_METHOD(thread_P_sm_last_V_1_load_A);
    sensitive << ( P_sm_last_V_1_sel_wr );
    sensitive << ( P_sm_last_V_1_state_cmp_full );

    SC_METHOD(thread_P_sm_last_V_1_load_B);
    sensitive << ( P_sm_last_V_1_sel_wr );
    sensitive << ( P_sm_last_V_1_state_cmp_full );

    SC_METHOD(thread_P_sm_last_V_1_sel);
    sensitive << ( P_sm_last_V_1_sel_rd );

    SC_METHOD(thread_P_sm_last_V_1_state_cmp_full);
    sensitive << ( P_sm_last_V_1_state );

    SC_METHOD(thread_P_sm_last_V_1_vld_in);
    sensitive << ( P_sm_data_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_P_sm_last_V_1_vld_out);
    sensitive << ( P_sm_last_V_1_state );

    SC_METHOD(thread_P_sm_user_V_1_ack_in);
    sensitive << ( P_sm_user_V_1_state );

    SC_METHOD(thread_P_sm_user_V_1_ack_out);
    sensitive << ( P_sm_TREADY );

    SC_METHOD(thread_P_sm_user_V_1_data_out);
    sensitive << ( P_sm_user_V_1_payload_A );
    sensitive << ( P_sm_user_V_1_payload_B );
    sensitive << ( P_sm_user_V_1_sel );

    SC_METHOD(thread_P_sm_user_V_1_load_A);
    sensitive << ( P_sm_user_V_1_sel_wr );
    sensitive << ( P_sm_user_V_1_state_cmp_full );

    SC_METHOD(thread_P_sm_user_V_1_load_B);
    sensitive << ( P_sm_user_V_1_sel_wr );
    sensitive << ( P_sm_user_V_1_state_cmp_full );

    SC_METHOD(thread_P_sm_user_V_1_sel);
    sensitive << ( P_sm_user_V_1_sel_rd );

    SC_METHOD(thread_P_sm_user_V_1_state_cmp_full);
    sensitive << ( P_sm_user_V_1_state );

    SC_METHOD(thread_P_sm_user_V_1_vld_in);
    sensitive << ( P_sm_data_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_P_sm_user_V_1_vld_out);
    sensitive << ( P_sm_user_V_1_state );

    SC_METHOD(thread_add_ln306_1_fu_509_p2);
    sensitive << ( zext_ln305_1_reg_679 );
    sensitive << ( zext_ln306_fu_505_p1 );

    SC_METHOD(thread_add_ln306_2_fu_518_p2);
    sensitive << ( p_cast_reg_651 );
    sensitive << ( zext_ln306_1_fu_514_p1 );

    SC_METHOD(thread_add_ln306_fu_492_p2);
    sensitive << ( shl_ln_reg_665 );
    sensitive << ( zext_ln305_fu_476_p1 );

    SC_METHOD(thread_add_ln311_1_fu_578_p2);
    sensitive << ( zext_ln305_1_reg_679 );
    sensitive << ( zext_ln311_1_fu_574_p1 );

    SC_METHOD(thread_add_ln311_2_fu_587_p2);
    sensitive << ( p_cast_reg_651 );
    sensitive << ( zext_ln311_2_fu_583_p1 );

    SC_METHOD(thread_add_ln311_fu_561_p2);
    sensitive << ( shl_ln_reg_665 );
    sensitive << ( zext_ln310_fu_539_p1 );

    SC_METHOD(thread_add_ln312_fu_592_p2);
    sensitive << ( p_cast6_reg_646 );
    sensitive << ( zext_ln311_2_fu_583_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state14_on_subcall_done);
    sensitive << ( ap_sync_grp_fft_streaming_fu_368_ap_ready );
    sensitive << ( ap_sync_grp_fft_streaming_fu_368_ap_done );

    SC_METHOD(thread_ap_block_state17_io);
    sensitive << ( data_AWREADY );
    sensitive << ( data_WREADY );

    SC_METHOD(thread_ap_block_state24);
    sensitive << ( P_sm_TREADY );
    sensitive << ( P_sm_data_1_state );
    sensitive << ( P_sm_user_V_1_state );
    sensitive << ( P_sm_last_V_1_state );

    SC_METHOD(thread_ap_done);
    sensitive << ( P_sm_TREADY );
    sensitive << ( P_sm_data_1_state );
    sensitive << ( P_sm_user_V_1_state );
    sensitive << ( P_sm_last_V_1_state );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln382_fu_617_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( P_sm_TREADY );
    sensitive << ( P_sm_data_1_state );
    sensitive << ( P_sm_user_V_1_state );
    sensitive << ( P_sm_last_V_1_state );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln382_fu_617_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_grp_fft_streaming_fu_368_ap_done);
    sensitive << ( grp_fft_streaming_fu_368_ap_done );
    sensitive << ( ap_sync_reg_grp_fft_streaming_fu_368_ap_done );

    SC_METHOD(thread_ap_sync_grp_fft_streaming_fu_368_ap_ready);
    sensitive << ( grp_fft_streaming_fu_368_ap_ready );
    sensitive << ( ap_sync_reg_grp_fft_streaming_fu_368_ap_ready );

    SC_METHOD(thread_data_ARADDR);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( data_ARREADY );
    sensitive << ( zext_ln306_3_fu_523_p1 );

    SC_METHOD(thread_data_ARVALID);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( data_ARREADY );

    SC_METHOD(thread_data_AWADDR);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( data_AWREADY );
    sensitive << ( ap_block_state17_io );
    sensitive << ( zext_ln311_3_fu_597_p1 );
    sensitive << ( zext_ln312_fu_607_p1 );

    SC_METHOD(thread_data_AWVALID);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( data_AWREADY );
    sensitive << ( ap_block_state17_io );

    SC_METHOD(thread_data_BREADY);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( data_BVALID );

    SC_METHOD(thread_data_RREADY);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( data_RVALID );

    SC_METHOD(thread_data_WDATA);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( FFT_out_re_load_reg_737 );
    sensitive << ( FFT_out_im_load_reg_748 );

    SC_METHOD(thread_data_WVALID);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( data_WREADY );
    sensitive << ( ap_block_state17_io );

    SC_METHOD(thread_data_blk_n_AR);
    sensitive << ( m_axi_data_ARREADY );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_data_blk_n_AW);
    sensitive << ( m_axi_data_AWREADY );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_data_blk_n_B);
    sensitive << ( m_axi_data_BVALID );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_data_blk_n_R);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_data_blk_n_W);
    sensitive << ( m_axi_data_WREADY );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_fft_streaming_fu_368_ap_continue);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_block_state14_on_subcall_done );

    SC_METHOD(thread_grp_fft_streaming_fu_368_ap_start);
    sensitive << ( grp_fft_streaming_fu_368_ap_start_reg );

    SC_METHOD(thread_i_fu_623_p2);
    sensitive << ( p_06_rec_reg_357 );

    SC_METHOD(thread_icmp_ln303_fu_440_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( l_0_reg_312 );

    SC_METHOD(thread_icmp_ln304_fu_460_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( n_0_reg_323 );

    SC_METHOD(thread_icmp_ln305_fu_480_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_0_reg_334 );

    SC_METHOD(thread_icmp_ln310_fu_543_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( j24_0_reg_346 );

    SC_METHOD(thread_icmp_ln382_fu_617_p2);
    sensitive << ( P_sm_TREADY );
    sensitive << ( P_sm_data_1_state );
    sensitive << ( P_sm_user_V_1_state );
    sensitive << ( P_sm_last_V_1_state );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( p_06_rec_reg_357 );

    SC_METHOD(thread_icmp_ln384_fu_634_p2);
    sensitive << ( P_sm_TREADY );
    sensitive << ( P_sm_data_1_state );
    sensitive << ( P_sm_user_V_1_state );
    sensitive << ( P_sm_last_V_1_state );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln382_fu_617_p2 );
    sensitive << ( p_06_rec_reg_357 );

    SC_METHOD(thread_icmp_ln385_fu_640_p2);
    sensitive << ( P_sm_TREADY );
    sensitive << ( P_sm_data_1_state );
    sensitive << ( P_sm_user_V_1_state );
    sensitive << ( P_sm_last_V_1_state );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln382_fu_617_p2 );
    sensitive << ( p_06_rec_reg_357 );

    SC_METHOD(thread_j_1_fu_549_p2);
    sensitive << ( j24_0_reg_346 );

    SC_METHOD(thread_j_fu_486_p2);
    sensitive << ( j_0_reg_334 );

    SC_METHOD(thread_l_fu_446_p2);
    sensitive << ( l_0_reg_312 );

    SC_METHOD(thread_n_fu_466_p2);
    sensitive << ( n_0_reg_323 );

    SC_METHOD(thread_p_cast6_fu_422_p1);
    sensitive << ( tmp_2_fu_412_p4 );

    SC_METHOD(thread_p_cast_fu_436_p1);
    sensitive << ( tmp_3_fu_426_p4 );

    SC_METHOD(thread_shl_ln_fu_452_p3);
    sensitive << ( l_0_reg_312 );

    SC_METHOD(thread_temp_array_address0);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( zext_ln383_fu_629_p1 );

    SC_METHOD(thread_temp_array_ce0);
    sensitive << ( P_sm_TREADY );
    sensitive << ( P_sm_data_1_state );
    sensitive << ( P_sm_user_V_1_state );
    sensitive << ( P_sm_last_V_1_state );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_tmp_1_fu_566_p3);
    sensitive << ( add_ln311_fu_561_p2 );

    SC_METHOD(thread_tmp_2_fu_412_p4);
    sensitive << ( data_im );

    SC_METHOD(thread_tmp_3_fu_426_p4);
    sensitive << ( data_re );

    SC_METHOD(thread_tmp_fu_497_p3);
    sensitive << ( add_ln306_fu_492_p2 );

    SC_METHOD(thread_zext_ln305_1_fu_472_p1);
    sensitive << ( n_0_reg_323 );

    SC_METHOD(thread_zext_ln305_fu_476_p1);
    sensitive << ( j_0_reg_334 );

    SC_METHOD(thread_zext_ln306_1_fu_514_p1);
    sensitive << ( add_ln306_1_fu_509_p2 );

    SC_METHOD(thread_zext_ln306_2_fu_533_p1);
    sensitive << ( j_0_reg_334 );

    SC_METHOD(thread_zext_ln306_3_fu_523_p1);
    sensitive << ( add_ln306_2_reg_693 );

    SC_METHOD(thread_zext_ln306_fu_505_p1);
    sensitive << ( tmp_fu_497_p3 );

    SC_METHOD(thread_zext_ln310_fu_539_p1);
    sensitive << ( j24_0_reg_346 );

    SC_METHOD(thread_zext_ln311_1_fu_574_p1);
    sensitive << ( tmp_1_fu_566_p3 );

    SC_METHOD(thread_zext_ln311_2_fu_583_p1);
    sensitive << ( add_ln311_1_fu_578_p2 );

    SC_METHOD(thread_zext_ln311_3_fu_597_p1);
    sensitive << ( add_ln311_2_reg_722 );

    SC_METHOD(thread_zext_ln311_fu_555_p1);
    sensitive << ( j24_0_reg_346 );

    SC_METHOD(thread_zext_ln312_fu_607_p1);
    sensitive << ( add_ln312_reg_727 );

    SC_METHOD(thread_zext_ln383_fu_629_p1);
    sensitive << ( p_06_rec_reg_357 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( P_sm_TREADY );
    sensitive << ( P_sm_data_1_ack_in );
    sensitive << ( P_sm_data_1_state );
    sensitive << ( P_sm_user_V_1_state );
    sensitive << ( P_sm_last_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( data_AWREADY );
    sensitive << ( data_WREADY );
    sensitive << ( data_ARREADY );
    sensitive << ( data_RVALID );
    sensitive << ( data_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln303_fu_440_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln304_fu_460_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln305_fu_480_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln310_fu_543_p2 );
    sensitive << ( ap_block_state17_io );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln382_fu_617_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_block_state14_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const9);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00000000000000000000000001";
    P_sm_data_1_sel_rd = SC_LOGIC_0;
    P_sm_data_1_sel_wr = SC_LOGIC_0;
    P_sm_data_1_state = "00";
    P_sm_user_V_1_sel_rd = SC_LOGIC_0;
    P_sm_user_V_1_sel_wr = SC_LOGIC_0;
    P_sm_user_V_1_state = "00";
    P_sm_last_V_1_sel_rd = SC_LOGIC_0;
    P_sm_last_V_1_sel_wr = SC_LOGIC_0;
    P_sm_last_V_1_state = "00";
    grp_fft_streaming_fu_368_ap_start_reg = SC_LOGIC_0;
    ap_sync_reg_grp_fft_streaming_fu_368_ap_ready = SC_LOGIC_0;
    ap_sync_reg_grp_fft_streaming_fu_368_ap_done = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "music_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_data_AWVALID, "(port)m_axi_data_AWVALID");
    sc_trace(mVcdFile, m_axi_data_AWREADY, "(port)m_axi_data_AWREADY");
    sc_trace(mVcdFile, m_axi_data_AWADDR, "(port)m_axi_data_AWADDR");
    sc_trace(mVcdFile, m_axi_data_AWID, "(port)m_axi_data_AWID");
    sc_trace(mVcdFile, m_axi_data_AWLEN, "(port)m_axi_data_AWLEN");
    sc_trace(mVcdFile, m_axi_data_AWSIZE, "(port)m_axi_data_AWSIZE");
    sc_trace(mVcdFile, m_axi_data_AWBURST, "(port)m_axi_data_AWBURST");
    sc_trace(mVcdFile, m_axi_data_AWLOCK, "(port)m_axi_data_AWLOCK");
    sc_trace(mVcdFile, m_axi_data_AWCACHE, "(port)m_axi_data_AWCACHE");
    sc_trace(mVcdFile, m_axi_data_AWPROT, "(port)m_axi_data_AWPROT");
    sc_trace(mVcdFile, m_axi_data_AWQOS, "(port)m_axi_data_AWQOS");
    sc_trace(mVcdFile, m_axi_data_AWREGION, "(port)m_axi_data_AWREGION");
    sc_trace(mVcdFile, m_axi_data_AWUSER, "(port)m_axi_data_AWUSER");
    sc_trace(mVcdFile, m_axi_data_WVALID, "(port)m_axi_data_WVALID");
    sc_trace(mVcdFile, m_axi_data_WREADY, "(port)m_axi_data_WREADY");
    sc_trace(mVcdFile, m_axi_data_WDATA, "(port)m_axi_data_WDATA");
    sc_trace(mVcdFile, m_axi_data_WSTRB, "(port)m_axi_data_WSTRB");
    sc_trace(mVcdFile, m_axi_data_WLAST, "(port)m_axi_data_WLAST");
    sc_trace(mVcdFile, m_axi_data_WID, "(port)m_axi_data_WID");
    sc_trace(mVcdFile, m_axi_data_WUSER, "(port)m_axi_data_WUSER");
    sc_trace(mVcdFile, m_axi_data_ARVALID, "(port)m_axi_data_ARVALID");
    sc_trace(mVcdFile, m_axi_data_ARREADY, "(port)m_axi_data_ARREADY");
    sc_trace(mVcdFile, m_axi_data_ARADDR, "(port)m_axi_data_ARADDR");
    sc_trace(mVcdFile, m_axi_data_ARID, "(port)m_axi_data_ARID");
    sc_trace(mVcdFile, m_axi_data_ARLEN, "(port)m_axi_data_ARLEN");
    sc_trace(mVcdFile, m_axi_data_ARSIZE, "(port)m_axi_data_ARSIZE");
    sc_trace(mVcdFile, m_axi_data_ARBURST, "(port)m_axi_data_ARBURST");
    sc_trace(mVcdFile, m_axi_data_ARLOCK, "(port)m_axi_data_ARLOCK");
    sc_trace(mVcdFile, m_axi_data_ARCACHE, "(port)m_axi_data_ARCACHE");
    sc_trace(mVcdFile, m_axi_data_ARPROT, "(port)m_axi_data_ARPROT");
    sc_trace(mVcdFile, m_axi_data_ARQOS, "(port)m_axi_data_ARQOS");
    sc_trace(mVcdFile, m_axi_data_ARREGION, "(port)m_axi_data_ARREGION");
    sc_trace(mVcdFile, m_axi_data_ARUSER, "(port)m_axi_data_ARUSER");
    sc_trace(mVcdFile, m_axi_data_RVALID, "(port)m_axi_data_RVALID");
    sc_trace(mVcdFile, m_axi_data_RREADY, "(port)m_axi_data_RREADY");
    sc_trace(mVcdFile, m_axi_data_RDATA, "(port)m_axi_data_RDATA");
    sc_trace(mVcdFile, m_axi_data_RLAST, "(port)m_axi_data_RLAST");
    sc_trace(mVcdFile, m_axi_data_RID, "(port)m_axi_data_RID");
    sc_trace(mVcdFile, m_axi_data_RUSER, "(port)m_axi_data_RUSER");
    sc_trace(mVcdFile, m_axi_data_RRESP, "(port)m_axi_data_RRESP");
    sc_trace(mVcdFile, m_axi_data_BVALID, "(port)m_axi_data_BVALID");
    sc_trace(mVcdFile, m_axi_data_BREADY, "(port)m_axi_data_BREADY");
    sc_trace(mVcdFile, m_axi_data_BRESP, "(port)m_axi_data_BRESP");
    sc_trace(mVcdFile, m_axi_data_BID, "(port)m_axi_data_BID");
    sc_trace(mVcdFile, m_axi_data_BUSER, "(port)m_axi_data_BUSER");
    sc_trace(mVcdFile, P_sm_TDATA, "(port)P_sm_TDATA");
    sc_trace(mVcdFile, P_sm_TVALID, "(port)P_sm_TVALID");
    sc_trace(mVcdFile, P_sm_TREADY, "(port)P_sm_TREADY");
    sc_trace(mVcdFile, P_sm_TUSER, "(port)P_sm_TUSER");
    sc_trace(mVcdFile, P_sm_TLAST, "(port)P_sm_TLAST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, data_re, "data_re");
    sc_trace(mVcdFile, data_im, "data_im");
    sc_trace(mVcdFile, P_sm_data_1_data_out, "P_sm_data_1_data_out");
    sc_trace(mVcdFile, P_sm_data_1_vld_in, "P_sm_data_1_vld_in");
    sc_trace(mVcdFile, P_sm_data_1_vld_out, "P_sm_data_1_vld_out");
    sc_trace(mVcdFile, P_sm_data_1_ack_in, "P_sm_data_1_ack_in");
    sc_trace(mVcdFile, P_sm_data_1_ack_out, "P_sm_data_1_ack_out");
    sc_trace(mVcdFile, P_sm_data_1_payload_A, "P_sm_data_1_payload_A");
    sc_trace(mVcdFile, P_sm_data_1_payload_B, "P_sm_data_1_payload_B");
    sc_trace(mVcdFile, P_sm_data_1_sel_rd, "P_sm_data_1_sel_rd");
    sc_trace(mVcdFile, P_sm_data_1_sel_wr, "P_sm_data_1_sel_wr");
    sc_trace(mVcdFile, P_sm_data_1_sel, "P_sm_data_1_sel");
    sc_trace(mVcdFile, P_sm_data_1_load_A, "P_sm_data_1_load_A");
    sc_trace(mVcdFile, P_sm_data_1_load_B, "P_sm_data_1_load_B");
    sc_trace(mVcdFile, P_sm_data_1_state, "P_sm_data_1_state");
    sc_trace(mVcdFile, P_sm_data_1_state_cmp_full, "P_sm_data_1_state_cmp_full");
    sc_trace(mVcdFile, P_sm_user_V_1_data_out, "P_sm_user_V_1_data_out");
    sc_trace(mVcdFile, P_sm_user_V_1_vld_in, "P_sm_user_V_1_vld_in");
    sc_trace(mVcdFile, P_sm_user_V_1_vld_out, "P_sm_user_V_1_vld_out");
    sc_trace(mVcdFile, P_sm_user_V_1_ack_in, "P_sm_user_V_1_ack_in");
    sc_trace(mVcdFile, P_sm_user_V_1_ack_out, "P_sm_user_V_1_ack_out");
    sc_trace(mVcdFile, P_sm_user_V_1_payload_A, "P_sm_user_V_1_payload_A");
    sc_trace(mVcdFile, P_sm_user_V_1_payload_B, "P_sm_user_V_1_payload_B");
    sc_trace(mVcdFile, P_sm_user_V_1_sel_rd, "P_sm_user_V_1_sel_rd");
    sc_trace(mVcdFile, P_sm_user_V_1_sel_wr, "P_sm_user_V_1_sel_wr");
    sc_trace(mVcdFile, P_sm_user_V_1_sel, "P_sm_user_V_1_sel");
    sc_trace(mVcdFile, P_sm_user_V_1_load_A, "P_sm_user_V_1_load_A");
    sc_trace(mVcdFile, P_sm_user_V_1_load_B, "P_sm_user_V_1_load_B");
    sc_trace(mVcdFile, P_sm_user_V_1_state, "P_sm_user_V_1_state");
    sc_trace(mVcdFile, P_sm_user_V_1_state_cmp_full, "P_sm_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, P_sm_last_V_1_data_out, "P_sm_last_V_1_data_out");
    sc_trace(mVcdFile, P_sm_last_V_1_vld_in, "P_sm_last_V_1_vld_in");
    sc_trace(mVcdFile, P_sm_last_V_1_vld_out, "P_sm_last_V_1_vld_out");
    sc_trace(mVcdFile, P_sm_last_V_1_ack_in, "P_sm_last_V_1_ack_in");
    sc_trace(mVcdFile, P_sm_last_V_1_ack_out, "P_sm_last_V_1_ack_out");
    sc_trace(mVcdFile, P_sm_last_V_1_payload_A, "P_sm_last_V_1_payload_A");
    sc_trace(mVcdFile, P_sm_last_V_1_payload_B, "P_sm_last_V_1_payload_B");
    sc_trace(mVcdFile, P_sm_last_V_1_sel_rd, "P_sm_last_V_1_sel_rd");
    sc_trace(mVcdFile, P_sm_last_V_1_sel_wr, "P_sm_last_V_1_sel_wr");
    sc_trace(mVcdFile, P_sm_last_V_1_sel, "P_sm_last_V_1_sel");
    sc_trace(mVcdFile, P_sm_last_V_1_load_A, "P_sm_last_V_1_load_A");
    sc_trace(mVcdFile, P_sm_last_V_1_load_B, "P_sm_last_V_1_load_B");
    sc_trace(mVcdFile, P_sm_last_V_1_state, "P_sm_last_V_1_state");
    sc_trace(mVcdFile, P_sm_last_V_1_state_cmp_full, "P_sm_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, temp_array_address0, "temp_array_address0");
    sc_trace(mVcdFile, temp_array_ce0, "temp_array_ce0");
    sc_trace(mVcdFile, temp_array_q0, "temp_array_q0");
    sc_trace(mVcdFile, data_blk_n_AR, "data_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, data_blk_n_R, "data_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, data_blk_n_AW, "data_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, data_blk_n_W, "data_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, data_blk_n_B, "data_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, P_sm_TDATA_blk_n, "P_sm_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, data_AWVALID, "data_AWVALID");
    sc_trace(mVcdFile, data_AWREADY, "data_AWREADY");
    sc_trace(mVcdFile, data_AWADDR, "data_AWADDR");
    sc_trace(mVcdFile, data_WVALID, "data_WVALID");
    sc_trace(mVcdFile, data_WREADY, "data_WREADY");
    sc_trace(mVcdFile, data_WDATA, "data_WDATA");
    sc_trace(mVcdFile, data_ARVALID, "data_ARVALID");
    sc_trace(mVcdFile, data_ARREADY, "data_ARREADY");
    sc_trace(mVcdFile, data_ARADDR, "data_ARADDR");
    sc_trace(mVcdFile, data_RVALID, "data_RVALID");
    sc_trace(mVcdFile, data_RREADY, "data_RREADY");
    sc_trace(mVcdFile, data_RDATA, "data_RDATA");
    sc_trace(mVcdFile, data_RLAST, "data_RLAST");
    sc_trace(mVcdFile, data_RID, "data_RID");
    sc_trace(mVcdFile, data_RUSER, "data_RUSER");
    sc_trace(mVcdFile, data_RRESP, "data_RRESP");
    sc_trace(mVcdFile, data_BVALID, "data_BVALID");
    sc_trace(mVcdFile, data_BREADY, "data_BREADY");
    sc_trace(mVcdFile, data_BRESP, "data_BRESP");
    sc_trace(mVcdFile, data_BID, "data_BID");
    sc_trace(mVcdFile, data_BUSER, "data_BUSER");
    sc_trace(mVcdFile, p_cast6_fu_422_p1, "p_cast6_fu_422_p1");
    sc_trace(mVcdFile, p_cast6_reg_646, "p_cast6_reg_646");
    sc_trace(mVcdFile, p_cast_fu_436_p1, "p_cast_fu_436_p1");
    sc_trace(mVcdFile, p_cast_reg_651, "p_cast_reg_651");
    sc_trace(mVcdFile, l_fu_446_p2, "l_fu_446_p2");
    sc_trace(mVcdFile, l_reg_660, "l_reg_660");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, shl_ln_fu_452_p3, "shl_ln_fu_452_p3");
    sc_trace(mVcdFile, shl_ln_reg_665, "shl_ln_reg_665");
    sc_trace(mVcdFile, icmp_ln303_fu_440_p2, "icmp_ln303_fu_440_p2");
    sc_trace(mVcdFile, n_fu_466_p2, "n_fu_466_p2");
    sc_trace(mVcdFile, n_reg_674, "n_reg_674");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln305_1_fu_472_p1, "zext_ln305_1_fu_472_p1");
    sc_trace(mVcdFile, zext_ln305_1_reg_679, "zext_ln305_1_reg_679");
    sc_trace(mVcdFile, icmp_ln304_fu_460_p2, "icmp_ln304_fu_460_p2");
    sc_trace(mVcdFile, j_fu_486_p2, "j_fu_486_p2");
    sc_trace(mVcdFile, j_reg_688, "j_reg_688");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, add_ln306_2_fu_518_p2, "add_ln306_2_fu_518_p2");
    sc_trace(mVcdFile, add_ln306_2_reg_693, "add_ln306_2_reg_693");
    sc_trace(mVcdFile, icmp_ln305_fu_480_p2, "icmp_ln305_fu_480_p2");
    sc_trace(mVcdFile, data_addr_read_reg_704, "data_addr_read_reg_704");
    sc_trace(mVcdFile, j_1_fu_549_p2, "j_1_fu_549_p2");
    sc_trace(mVcdFile, j_1_reg_712, "j_1_reg_712");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, icmp_ln310_fu_543_p2, "icmp_ln310_fu_543_p2");
    sc_trace(mVcdFile, add_ln311_2_fu_587_p2, "add_ln311_2_fu_587_p2");
    sc_trace(mVcdFile, add_ln311_2_reg_722, "add_ln311_2_reg_722");
    sc_trace(mVcdFile, add_ln312_fu_592_p2, "add_ln312_fu_592_p2");
    sc_trace(mVcdFile, add_ln312_reg_727, "add_ln312_reg_727");
    sc_trace(mVcdFile, FFT_out_re_q0, "FFT_out_re_q0");
    sc_trace(mVcdFile, FFT_out_re_load_reg_737, "FFT_out_re_load_reg_737");
    sc_trace(mVcdFile, FFT_out_im_q0, "FFT_out_im_q0");
    sc_trace(mVcdFile, FFT_out_im_load_reg_748, "FFT_out_im_load_reg_748");
    sc_trace(mVcdFile, ap_block_state17_io, "ap_block_state17_io");
    sc_trace(mVcdFile, i_fu_623_p2, "i_fu_623_p2");
    sc_trace(mVcdFile, i_reg_762, "i_reg_762");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_block_state24, "ap_block_state24");
    sc_trace(mVcdFile, icmp_ln382_fu_617_p2, "icmp_ln382_fu_617_p2");
    sc_trace(mVcdFile, icmp_ln384_fu_634_p2, "icmp_ln384_fu_634_p2");
    sc_trace(mVcdFile, icmp_ln384_reg_772, "icmp_ln384_reg_772");
    sc_trace(mVcdFile, icmp_ln385_fu_640_p2, "icmp_ln385_fu_640_p2");
    sc_trace(mVcdFile, icmp_ln385_reg_777, "icmp_ln385_reg_777");
    sc_trace(mVcdFile, FFT_Buffer_re_address0, "FFT_Buffer_re_address0");
    sc_trace(mVcdFile, FFT_Buffer_re_ce0, "FFT_Buffer_re_ce0");
    sc_trace(mVcdFile, FFT_Buffer_re_we0, "FFT_Buffer_re_we0");
    sc_trace(mVcdFile, FFT_Buffer_re_q0, "FFT_Buffer_re_q0");
    sc_trace(mVcdFile, FFT_Buffer_im_address0, "FFT_Buffer_im_address0");
    sc_trace(mVcdFile, FFT_Buffer_im_ce0, "FFT_Buffer_im_ce0");
    sc_trace(mVcdFile, FFT_Buffer_im_we0, "FFT_Buffer_im_we0");
    sc_trace(mVcdFile, FFT_Buffer_im_q0, "FFT_Buffer_im_q0");
    sc_trace(mVcdFile, FFT_out_re_address0, "FFT_out_re_address0");
    sc_trace(mVcdFile, FFT_out_re_ce0, "FFT_out_re_ce0");
    sc_trace(mVcdFile, FFT_out_re_we0, "FFT_out_re_we0");
    sc_trace(mVcdFile, FFT_out_re_ce1, "FFT_out_re_ce1");
    sc_trace(mVcdFile, FFT_out_re_we1, "FFT_out_re_we1");
    sc_trace(mVcdFile, FFT_out_im_address0, "FFT_out_im_address0");
    sc_trace(mVcdFile, FFT_out_im_ce0, "FFT_out_im_ce0");
    sc_trace(mVcdFile, FFT_out_im_we0, "FFT_out_im_we0");
    sc_trace(mVcdFile, FFT_out_im_ce1, "FFT_out_im_ce1");
    sc_trace(mVcdFile, FFT_out_im_we1, "FFT_out_im_we1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_R_address0, "grp_fft_streaming_fu_368_X_R_address0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_R_ce0, "grp_fft_streaming_fu_368_X_R_ce0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_R_d0, "grp_fft_streaming_fu_368_X_R_d0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_R_we0, "grp_fft_streaming_fu_368_X_R_we0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_R_address1, "grp_fft_streaming_fu_368_X_R_address1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_R_ce1, "grp_fft_streaming_fu_368_X_R_ce1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_R_d1, "grp_fft_streaming_fu_368_X_R_d1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_R_we1, "grp_fft_streaming_fu_368_X_R_we1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_I_address0, "grp_fft_streaming_fu_368_X_I_address0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_I_ce0, "grp_fft_streaming_fu_368_X_I_ce0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_I_d0, "grp_fft_streaming_fu_368_X_I_d0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_I_we0, "grp_fft_streaming_fu_368_X_I_we0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_I_address1, "grp_fft_streaming_fu_368_X_I_address1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_I_ce1, "grp_fft_streaming_fu_368_X_I_ce1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_I_d1, "grp_fft_streaming_fu_368_X_I_d1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_X_I_we1, "grp_fft_streaming_fu_368_X_I_we1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_R_address0, "grp_fft_streaming_fu_368_OUT_R_address0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_R_ce0, "grp_fft_streaming_fu_368_OUT_R_ce0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_R_d0, "grp_fft_streaming_fu_368_OUT_R_d0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_R_we0, "grp_fft_streaming_fu_368_OUT_R_we0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_R_address1, "grp_fft_streaming_fu_368_OUT_R_address1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_R_ce1, "grp_fft_streaming_fu_368_OUT_R_ce1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_R_d1, "grp_fft_streaming_fu_368_OUT_R_d1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_R_we1, "grp_fft_streaming_fu_368_OUT_R_we1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_I_address0, "grp_fft_streaming_fu_368_OUT_I_address0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_I_ce0, "grp_fft_streaming_fu_368_OUT_I_ce0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_I_d0, "grp_fft_streaming_fu_368_OUT_I_d0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_I_we0, "grp_fft_streaming_fu_368_OUT_I_we0");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_I_address1, "grp_fft_streaming_fu_368_OUT_I_address1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_I_ce1, "grp_fft_streaming_fu_368_OUT_I_ce1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_I_d1, "grp_fft_streaming_fu_368_OUT_I_d1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_OUT_I_we1, "grp_fft_streaming_fu_368_OUT_I_we1");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_ap_start, "grp_fft_streaming_fu_368_ap_start");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_ap_done, "grp_fft_streaming_fu_368_ap_done");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_ap_ready, "grp_fft_streaming_fu_368_ap_ready");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_ap_idle, "grp_fft_streaming_fu_368_ap_idle");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_ap_continue, "grp_fft_streaming_fu_368_ap_continue");
    sc_trace(mVcdFile, l_0_reg_312, "l_0_reg_312");
    sc_trace(mVcdFile, n_0_reg_323, "n_0_reg_323");
    sc_trace(mVcdFile, j_0_reg_334, "j_0_reg_334");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, j24_0_reg_346, "j24_0_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_sync_grp_fft_streaming_fu_368_ap_ready, "ap_sync_grp_fft_streaming_fu_368_ap_ready");
    sc_trace(mVcdFile, ap_sync_grp_fft_streaming_fu_368_ap_done, "ap_sync_grp_fft_streaming_fu_368_ap_done");
    sc_trace(mVcdFile, ap_block_state14_on_subcall_done, "ap_block_state14_on_subcall_done");
    sc_trace(mVcdFile, p_06_rec_reg_357, "p_06_rec_reg_357");
    sc_trace(mVcdFile, grp_fft_streaming_fu_368_ap_start_reg, "grp_fft_streaming_fu_368_ap_start_reg");
    sc_trace(mVcdFile, ap_sync_reg_grp_fft_streaming_fu_368_ap_ready, "ap_sync_reg_grp_fft_streaming_fu_368_ap_ready");
    sc_trace(mVcdFile, ap_sync_reg_grp_fft_streaming_fu_368_ap_done, "ap_sync_reg_grp_fft_streaming_fu_368_ap_done");
    sc_trace(mVcdFile, zext_ln306_2_fu_533_p1, "zext_ln306_2_fu_533_p1");
    sc_trace(mVcdFile, zext_ln311_fu_555_p1, "zext_ln311_fu_555_p1");
    sc_trace(mVcdFile, zext_ln383_fu_629_p1, "zext_ln383_fu_629_p1");
    sc_trace(mVcdFile, zext_ln306_3_fu_523_p1, "zext_ln306_3_fu_523_p1");
    sc_trace(mVcdFile, zext_ln311_3_fu_597_p1, "zext_ln311_3_fu_597_p1");
    sc_trace(mVcdFile, zext_ln312_fu_607_p1, "zext_ln312_fu_607_p1");
    sc_trace(mVcdFile, tmp_2_fu_412_p4, "tmp_2_fu_412_p4");
    sc_trace(mVcdFile, tmp_3_fu_426_p4, "tmp_3_fu_426_p4");
    sc_trace(mVcdFile, zext_ln305_fu_476_p1, "zext_ln305_fu_476_p1");
    sc_trace(mVcdFile, add_ln306_fu_492_p2, "add_ln306_fu_492_p2");
    sc_trace(mVcdFile, tmp_fu_497_p3, "tmp_fu_497_p3");
    sc_trace(mVcdFile, zext_ln306_fu_505_p1, "zext_ln306_fu_505_p1");
    sc_trace(mVcdFile, add_ln306_1_fu_509_p2, "add_ln306_1_fu_509_p2");
    sc_trace(mVcdFile, zext_ln306_1_fu_514_p1, "zext_ln306_1_fu_514_p1");
    sc_trace(mVcdFile, zext_ln310_fu_539_p1, "zext_ln310_fu_539_p1");
    sc_trace(mVcdFile, add_ln311_fu_561_p2, "add_ln311_fu_561_p2");
    sc_trace(mVcdFile, tmp_1_fu_566_p3, "tmp_1_fu_566_p3");
    sc_trace(mVcdFile, zext_ln311_1_fu_574_p1, "zext_ln311_1_fu_574_p1");
    sc_trace(mVcdFile, add_ln311_1_fu_578_p2, "add_ln311_1_fu_578_p2");
    sc_trace(mVcdFile, zext_ln311_2_fu_583_p1, "zext_ln311_2_fu_583_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_return, "ap_return");
#endif

    }
    mHdltvinHandle.open("music.hdltvin.dat");
    mHdltvoutHandle.open("music.hdltvout.dat");
}

music::~music() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete temp_array_U;
    delete music_AXILiteS_s_axi_U;
    delete music_data_m_axi_U;
    delete FFT_Buffer_re_U;
    delete FFT_Buffer_im_U;
    delete FFT_out_re_U;
    delete FFT_out_im_U;
    delete grp_fft_streaming_fu_368;
}

void music::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void music::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_logic_0;
}

void music::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv32_0;
}

void music::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv1_0;
}

void music::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void music::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv32_1;
}

void music::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void music::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void music::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv4_F;
}

void music::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_B0;
}

void music::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_data_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_vld_out.read()))) {
            P_sm_data_1_sel_rd =  (sc_logic) (~P_sm_data_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_data_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_ack_in.read()))) {
            P_sm_data_1_sel_wr =  (sc_logic) (~P_sm_data_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_data_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, P_sm_data_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_ack_out.read()) && 
              esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_data_1_vld_in.read()) && 
              esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_2)))) {
            P_sm_data_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
                     esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
                     esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1)))) {
            P_sm_data_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, P_sm_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_ack_out.read()))))) {
            P_sm_data_1_state = ap_const_lv2_3;
        } else {
            P_sm_data_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_vld_out.read()))) {
            P_sm_last_V_1_sel_rd =  (sc_logic) (~P_sm_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_ack_in.read()))) {
            P_sm_last_V_1_sel_wr =  (sc_logic) (~P_sm_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, P_sm_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, P_sm_last_V_1_state.read())))) {
            P_sm_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read())))) {
            P_sm_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, P_sm_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, P_sm_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_ack_out.read()))))) {
            P_sm_last_V_1_state = ap_const_lv2_3;
        } else {
            P_sm_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_vld_out.read()))) {
            P_sm_user_V_1_sel_rd =  (sc_logic) (~P_sm_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_ack_in.read()))) {
            P_sm_user_V_1_sel_wr =  (sc_logic) (~P_sm_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        P_sm_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, P_sm_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, P_sm_user_V_1_state.read())))) {
            P_sm_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read())))) {
            P_sm_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, P_sm_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, P_sm_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_ack_out.read()))))) {
            P_sm_user_V_1_state = ap_const_lv2_3;
        } else {
            P_sm_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_fft_streaming_fu_368_ap_done = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
             esl_seteq<1,1,1>(ap_block_state14_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_fft_streaming_fu_368_ap_done = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_fft_streaming_fu_368_ap_done.read())) {
            ap_sync_reg_grp_fft_streaming_fu_368_ap_done = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_fft_streaming_fu_368_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
             esl_seteq<1,1,1>(ap_block_state14_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_fft_streaming_fu_368_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_fft_streaming_fu_368_ap_ready.read())) {
            ap_sync_reg_grp_fft_streaming_fu_368_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_fft_streaming_fu_368_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln305_fu_480_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_grp_fft_streaming_fu_368_ap_ready.read())))) {
            grp_fft_streaming_fu_368_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_fft_streaming_fu_368_ap_ready.read())) {
            grp_fft_streaming_fu_368_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
         esl_seteq<1,1,1>(data_BVALID.read(), ap_const_logic_1))) {
        j24_0_reg_346 = j_1_reg_712.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_block_state14_on_subcall_done.read(), ap_const_boolean_0))) {
        j24_0_reg_346 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln304_fu_460_p2.read()))) {
        j_0_reg_334 = ap_const_lv11_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        j_0_reg_334 = j_reg_688.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln304_fu_460_p2.read()))) {
        l_0_reg_312 = l_reg_660.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        l_0_reg_312 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln310_fu_543_p2.read()))) {
        n_0_reg_323 = n_reg_674.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln303_fu_440_p2.read()))) {
        n_0_reg_323 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln303_fu_440_p2.read()))) {
        p_06_rec_reg_357 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
                esl_seteq<1,1,1>(P_sm_data_1_ack_in.read(), ap_const_logic_1))) {
        p_06_rec_reg_357 = i_reg_762.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(data_AWREADY.read(), ap_const_logic_1))) {
        FFT_out_im_load_reg_748 = FFT_out_im_q0.read();
        FFT_out_re_load_reg_737 = FFT_out_re_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_load_A.read())) {
        P_sm_data_1_payload_A = temp_array_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_load_B.read())) {
        P_sm_data_1_payload_B = temp_array_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_load_A.read())) {
        P_sm_last_V_1_payload_A = icmp_ln385_reg_777.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_load_B.read())) {
        P_sm_last_V_1_payload_B = icmp_ln385_reg_777.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_load_A.read())) {
        P_sm_user_V_1_payload_A = icmp_ln384_reg_772.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_load_B.read())) {
        P_sm_user_V_1_payload_B = icmp_ln384_reg_772.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln305_fu_480_p2.read()))) {
        add_ln306_2_reg_693 = add_ln306_2_fu_518_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln310_fu_543_p2.read()))) {
        add_ln311_2_reg_722 = add_ln311_2_fu_587_p2.read();
        add_ln312_reg_727 = add_ln312_fu_592_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(data_RVALID.read(), ap_const_logic_1))) {
        data_addr_read_reg_704 = data_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && !(esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read()))))) {
        i_reg_762 = i_fu_623_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && !(esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln382_fu_617_p2.read()))) {
        icmp_ln384_reg_772 = icmp_ln384_fu_634_p2.read();
        icmp_ln385_reg_777 = icmp_ln385_fu_640_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        j_1_reg_712 = j_1_fu_549_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_reg_688 = j_fu_486_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        l_reg_660 = l_fu_446_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        n_reg_674 = n_fu_466_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_cast6_reg_646 = p_cast6_fu_422_p1.read();
        p_cast_reg_651 = p_cast_fu_436_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln303_fu_440_p2.read()))) {
        shl_ln_reg_665 = shl_ln_fu_452_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln304_fu_460_p2.read()))) {
        zext_ln305_1_reg_679 = zext_ln305_1_fu_472_p1.read();
    }
}

void music::thread_FFT_Buffer_im_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        FFT_Buffer_im_address0 =  (sc_lv<10>) (zext_ln306_2_fu_533_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_Buffer_im_address0 = grp_fft_streaming_fu_368_X_I_address0.read();
    } else {
        FFT_Buffer_im_address0 = "XXXXXXXXXX";
    }
}

void music::thread_FFT_Buffer_im_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        FFT_Buffer_im_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_Buffer_im_ce0 = grp_fft_streaming_fu_368_X_I_ce0.read();
    } else {
        FFT_Buffer_im_ce0 = ap_const_logic_0;
    }
}

void music::thread_FFT_Buffer_im_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        FFT_Buffer_im_we0 = ap_const_logic_1;
    } else {
        FFT_Buffer_im_we0 = ap_const_logic_0;
    }
}

void music::thread_FFT_Buffer_re_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        FFT_Buffer_re_address0 =  (sc_lv<10>) (zext_ln306_2_fu_533_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_Buffer_re_address0 = grp_fft_streaming_fu_368_X_R_address0.read();
    } else {
        FFT_Buffer_re_address0 = "XXXXXXXXXX";
    }
}

void music::thread_FFT_Buffer_re_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        FFT_Buffer_re_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_Buffer_re_ce0 = grp_fft_streaming_fu_368_X_R_ce0.read();
    } else {
        FFT_Buffer_re_ce0 = ap_const_logic_0;
    }
}

void music::thread_FFT_Buffer_re_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        FFT_Buffer_re_we0 = ap_const_logic_1;
    } else {
        FFT_Buffer_re_we0 = ap_const_logic_0;
    }
}

void music::thread_FFT_out_im_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        FFT_out_im_address0 =  (sc_lv<10>) (zext_ln311_fu_555_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_im_address0 = grp_fft_streaming_fu_368_OUT_I_address0.read();
    } else {
        FFT_out_im_address0 = "XXXXXXXXXX";
    }
}

void music::thread_FFT_out_im_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        FFT_out_im_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_im_ce0 = grp_fft_streaming_fu_368_OUT_I_ce0.read();
    } else {
        FFT_out_im_ce0 = ap_const_logic_0;
    }
}

void music::thread_FFT_out_im_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_im_ce1 = grp_fft_streaming_fu_368_OUT_I_ce1.read();
    } else {
        FFT_out_im_ce1 = ap_const_logic_0;
    }
}

void music::thread_FFT_out_im_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_im_we0 = grp_fft_streaming_fu_368_OUT_I_we0.read();
    } else {
        FFT_out_im_we0 = ap_const_logic_0;
    }
}

void music::thread_FFT_out_im_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_im_we1 = grp_fft_streaming_fu_368_OUT_I_we1.read();
    } else {
        FFT_out_im_we1 = ap_const_logic_0;
    }
}

void music::thread_FFT_out_re_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        FFT_out_re_address0 =  (sc_lv<10>) (zext_ln311_fu_555_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_re_address0 = grp_fft_streaming_fu_368_OUT_R_address0.read();
    } else {
        FFT_out_re_address0 = "XXXXXXXXXX";
    }
}

void music::thread_FFT_out_re_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        FFT_out_re_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_re_ce0 = grp_fft_streaming_fu_368_OUT_R_ce0.read();
    } else {
        FFT_out_re_ce0 = ap_const_logic_0;
    }
}

void music::thread_FFT_out_re_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_re_ce1 = grp_fft_streaming_fu_368_OUT_R_ce1.read();
    } else {
        FFT_out_re_ce1 = ap_const_logic_0;
    }
}

void music::thread_FFT_out_re_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_re_we0 = grp_fft_streaming_fu_368_OUT_R_we0.read();
    } else {
        FFT_out_re_we0 = ap_const_logic_0;
    }
}

void music::thread_FFT_out_re_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        FFT_out_re_we1 = grp_fft_streaming_fu_368_OUT_R_we1.read();
    } else {
        FFT_out_re_we1 = ap_const_logic_0;
    }
}

void music::thread_P_sm_TDATA() {
    P_sm_TDATA = P_sm_data_1_data_out.read();
}

void music::thread_P_sm_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        P_sm_TDATA_blk_n = P_sm_data_1_state.read()[1];
    } else {
        P_sm_TDATA_blk_n = ap_const_logic_1;
    }
}

void music::thread_P_sm_TLAST() {
    P_sm_TLAST = P_sm_last_V_1_data_out.read();
}

void music::thread_P_sm_TUSER() {
    P_sm_TUSER = P_sm_user_V_1_data_out.read();
}

void music::thread_P_sm_TVALID() {
    P_sm_TVALID = P_sm_last_V_1_state.read()[0];
}

void music::thread_P_sm_data_1_ack_in() {
    P_sm_data_1_ack_in = P_sm_data_1_state.read()[1];
}

void music::thread_P_sm_data_1_ack_out() {
    P_sm_data_1_ack_out = P_sm_TREADY.read();
}

void music::thread_P_sm_data_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_data_1_sel.read())) {
        P_sm_data_1_data_out = P_sm_data_1_payload_B.read();
    } else {
        P_sm_data_1_data_out = P_sm_data_1_payload_A.read();
    }
}

void music::thread_P_sm_data_1_load_A() {
    P_sm_data_1_load_A = (P_sm_data_1_state_cmp_full.read() & ~P_sm_data_1_sel_wr.read());
}

void music::thread_P_sm_data_1_load_B() {
    P_sm_data_1_load_B = (P_sm_data_1_sel_wr.read() & P_sm_data_1_state_cmp_full.read());
}

void music::thread_P_sm_data_1_sel() {
    P_sm_data_1_sel = P_sm_data_1_sel_rd.read();
}

void music::thread_P_sm_data_1_state_cmp_full() {
    P_sm_data_1_state_cmp_full =  (sc_logic) ((!P_sm_data_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(P_sm_data_1_state.read() != ap_const_lv2_1))[0];
}

void music::thread_P_sm_data_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(P_sm_data_1_ack_in.read(), ap_const_logic_1))) {
        P_sm_data_1_vld_in = ap_const_logic_1;
    } else {
        P_sm_data_1_vld_in = ap_const_logic_0;
    }
}

void music::thread_P_sm_data_1_vld_out() {
    P_sm_data_1_vld_out = P_sm_data_1_state.read()[0];
}

void music::thread_P_sm_last_V_1_ack_in() {
    P_sm_last_V_1_ack_in = P_sm_last_V_1_state.read()[1];
}

void music::thread_P_sm_last_V_1_ack_out() {
    P_sm_last_V_1_ack_out = P_sm_TREADY.read();
}

void music::thread_P_sm_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_last_V_1_sel.read())) {
        P_sm_last_V_1_data_out = P_sm_last_V_1_payload_B.read();
    } else {
        P_sm_last_V_1_data_out = P_sm_last_V_1_payload_A.read();
    }
}

void music::thread_P_sm_last_V_1_load_A() {
    P_sm_last_V_1_load_A = (P_sm_last_V_1_state_cmp_full.read() & ~P_sm_last_V_1_sel_wr.read());
}

void music::thread_P_sm_last_V_1_load_B() {
    P_sm_last_V_1_load_B = (P_sm_last_V_1_sel_wr.read() & P_sm_last_V_1_state_cmp_full.read());
}

void music::thread_P_sm_last_V_1_sel() {
    P_sm_last_V_1_sel = P_sm_last_V_1_sel_rd.read();
}

void music::thread_P_sm_last_V_1_state_cmp_full() {
    P_sm_last_V_1_state_cmp_full =  (sc_logic) ((!P_sm_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(P_sm_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void music::thread_P_sm_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(P_sm_data_1_ack_in.read(), ap_const_logic_1))) {
        P_sm_last_V_1_vld_in = ap_const_logic_1;
    } else {
        P_sm_last_V_1_vld_in = ap_const_logic_0;
    }
}

void music::thread_P_sm_last_V_1_vld_out() {
    P_sm_last_V_1_vld_out = P_sm_last_V_1_state.read()[0];
}

void music::thread_P_sm_user_V_1_ack_in() {
    P_sm_user_V_1_ack_in = P_sm_user_V_1_state.read()[1];
}

void music::thread_P_sm_user_V_1_ack_out() {
    P_sm_user_V_1_ack_out = P_sm_TREADY.read();
}

void music::thread_P_sm_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, P_sm_user_V_1_sel.read())) {
        P_sm_user_V_1_data_out = P_sm_user_V_1_payload_B.read();
    } else {
        P_sm_user_V_1_data_out = P_sm_user_V_1_payload_A.read();
    }
}

void music::thread_P_sm_user_V_1_load_A() {
    P_sm_user_V_1_load_A = (P_sm_user_V_1_state_cmp_full.read() & ~P_sm_user_V_1_sel_wr.read());
}

void music::thread_P_sm_user_V_1_load_B() {
    P_sm_user_V_1_load_B = (P_sm_user_V_1_sel_wr.read() & P_sm_user_V_1_state_cmp_full.read());
}

void music::thread_P_sm_user_V_1_sel() {
    P_sm_user_V_1_sel = P_sm_user_V_1_sel_rd.read();
}

void music::thread_P_sm_user_V_1_state_cmp_full() {
    P_sm_user_V_1_state_cmp_full =  (sc_logic) ((!P_sm_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(P_sm_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void music::thread_P_sm_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(P_sm_data_1_ack_in.read(), ap_const_logic_1))) {
        P_sm_user_V_1_vld_in = ap_const_logic_1;
    } else {
        P_sm_user_V_1_vld_in = ap_const_logic_0;
    }
}

void music::thread_P_sm_user_V_1_vld_out() {
    P_sm_user_V_1_vld_out = P_sm_user_V_1_state.read()[0];
}

void music::thread_add_ln306_1_fu_509_p2() {
    add_ln306_1_fu_509_p2 = (!zext_ln305_1_reg_679.read().is_01() || !zext_ln306_fu_505_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln305_1_reg_679.read()) + sc_biguint<17>(zext_ln306_fu_505_p1.read()));
}

void music::thread_add_ln306_2_fu_518_p2() {
    add_ln306_2_fu_518_p2 = (!zext_ln306_1_fu_514_p1.read().is_01() || !p_cast_reg_651.read().is_01())? sc_lv<31>(): (sc_biguint<31>(zext_ln306_1_fu_514_p1.read()) + sc_biguint<31>(p_cast_reg_651.read()));
}

void music::thread_add_ln306_fu_492_p2() {
    add_ln306_fu_492_p2 = (!shl_ln_reg_665.read().is_01() || !zext_ln305_fu_476_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(shl_ln_reg_665.read()) + sc_biguint<14>(zext_ln305_fu_476_p1.read()));
}

void music::thread_add_ln311_1_fu_578_p2() {
    add_ln311_1_fu_578_p2 = (!zext_ln305_1_reg_679.read().is_01() || !zext_ln311_1_fu_574_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln305_1_reg_679.read()) + sc_biguint<17>(zext_ln311_1_fu_574_p1.read()));
}

void music::thread_add_ln311_2_fu_587_p2() {
    add_ln311_2_fu_587_p2 = (!zext_ln311_2_fu_583_p1.read().is_01() || !p_cast_reg_651.read().is_01())? sc_lv<31>(): (sc_biguint<31>(zext_ln311_2_fu_583_p1.read()) + sc_biguint<31>(p_cast_reg_651.read()));
}

void music::thread_add_ln311_fu_561_p2() {
    add_ln311_fu_561_p2 = (!shl_ln_reg_665.read().is_01() || !zext_ln310_fu_539_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(shl_ln_reg_665.read()) + sc_biguint<14>(zext_ln310_fu_539_p1.read()));
}

void music::thread_add_ln312_fu_592_p2() {
    add_ln312_fu_592_p2 = (!zext_ln311_2_fu_583_p1.read().is_01() || !p_cast6_reg_646.read().is_01())? sc_lv<31>(): (sc_biguint<31>(zext_ln311_2_fu_583_p1.read()) + sc_biguint<31>(p_cast6_reg_646.read()));
}

void music::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void music::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void music::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void music::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void music::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void music::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void music::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void music::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void music::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void music::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void music::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void music::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void music::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void music::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void music::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void music::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void music::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void music::thread_ap_block_state14_on_subcall_done() {
    ap_block_state14_on_subcall_done = esl_seteq<1,1,1>(ap_const_logic_0, (ap_sync_grp_fft_streaming_fu_368_ap_ready.read() & ap_sync_grp_fft_streaming_fu_368_ap_done.read()));
}

void music::thread_ap_block_state17_io() {
    ap_block_state17_io = (esl_seteq<1,1,1>(ap_const_logic_0, data_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_WREADY.read()));
}

void music::thread_ap_block_state24() {
    ap_block_state24 = (esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read())));
}

void music::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         !(esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln382_fu_617_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void music::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void music::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         !(esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln382_fu_617_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void music::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void music::thread_ap_sync_grp_fft_streaming_fu_368_ap_done() {
    ap_sync_grp_fft_streaming_fu_368_ap_done = (grp_fft_streaming_fu_368_ap_done.read() | ap_sync_reg_grp_fft_streaming_fu_368_ap_done.read());
}

void music::thread_ap_sync_grp_fft_streaming_fu_368_ap_ready() {
    ap_sync_grp_fft_streaming_fu_368_ap_ready = (grp_fft_streaming_fu_368_ap_ready.read() | ap_sync_reg_grp_fft_streaming_fu_368_ap_ready.read());
}

void music::thread_data_ARADDR() {
    data_ARADDR =  (sc_lv<32>) (zext_ln306_3_fu_523_p1.read());
}

void music::thread_data_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(data_ARREADY.read(), ap_const_logic_1))) {
        data_ARVALID = ap_const_logic_1;
    } else {
        data_ARVALID = ap_const_logic_0;
    }
}

void music::thread_data_AWADDR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(ap_block_state17_io.read(), ap_const_boolean_0))) {
        data_AWADDR =  (sc_lv<32>) (zext_ln312_fu_607_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                esl_seteq<1,1,1>(data_AWREADY.read(), ap_const_logic_1))) {
        data_AWADDR =  (sc_lv<32>) (zext_ln311_3_fu_597_p1.read());
    } else {
        data_AWADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void music::thread_data_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(data_AWREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          esl_seteq<1,1,1>(ap_block_state17_io.read(), ap_const_boolean_0)))) {
        data_AWVALID = ap_const_logic_1;
    } else {
        data_AWVALID = ap_const_logic_0;
    }
}

void music::thread_data_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(data_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(data_BVALID.read(), ap_const_logic_1)))) {
        data_BREADY = ap_const_logic_1;
    } else {
        data_BREADY = ap_const_logic_0;
    }
}

void music::thread_data_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(data_RVALID.read(), ap_const_logic_1))) {
        data_RREADY = ap_const_logic_1;
    } else {
        data_RREADY = ap_const_logic_0;
    }
}

void music::thread_data_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        data_WDATA = FFT_out_im_load_reg_748.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        data_WDATA = FFT_out_re_load_reg_737.read();
    } else {
        data_WDATA =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void music::thread_data_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          esl_seteq<1,1,1>(ap_block_state17_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(data_WREADY.read(), ap_const_logic_1)))) {
        data_WVALID = ap_const_logic_1;
    } else {
        data_WVALID = ap_const_logic_0;
    }
}

void music::thread_data_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data_blk_n_AR = m_axi_data_ARREADY.read();
    } else {
        data_blk_n_AR = ap_const_logic_1;
    }
}

void music::thread_data_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        data_blk_n_AW = m_axi_data_AWREADY.read();
    } else {
        data_blk_n_AW = ap_const_logic_1;
    }
}

void music::thread_data_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        data_blk_n_B = m_axi_data_BVALID.read();
    } else {
        data_blk_n_B = ap_const_logic_1;
    }
}

void music::thread_data_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        data_blk_n_R = m_axi_data_RVALID.read();
    } else {
        data_blk_n_R = ap_const_logic_1;
    }
}

void music::thread_data_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        data_blk_n_W = m_axi_data_WREADY.read();
    } else {
        data_blk_n_W = ap_const_logic_1;
    }
}

void music::thread_grp_fft_streaming_fu_368_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_block_state14_on_subcall_done.read(), ap_const_boolean_0))) {
        grp_fft_streaming_fu_368_ap_continue = ap_const_logic_1;
    } else {
        grp_fft_streaming_fu_368_ap_continue = ap_const_logic_0;
    }
}

void music::thread_grp_fft_streaming_fu_368_ap_start() {
    grp_fft_streaming_fu_368_ap_start = grp_fft_streaming_fu_368_ap_start_reg.read();
}

void music::thread_i_fu_623_p2() {
    i_fu_623_p2 = (!p_06_rec_reg_357.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(p_06_rec_reg_357.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void music::thread_icmp_ln303_fu_440_p2() {
    icmp_ln303_fu_440_p2 = (!l_0_reg_312.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(l_0_reg_312.read() == ap_const_lv4_A);
}

void music::thread_icmp_ln304_fu_460_p2() {
    icmp_ln304_fu_460_p2 = (!n_0_reg_323.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(n_0_reg_323.read() == ap_const_lv3_4);
}

void music::thread_icmp_ln305_fu_480_p2() {
    icmp_ln305_fu_480_p2 = (!j_0_reg_334.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_334.read() == ap_const_lv11_400);
}

void music::thread_icmp_ln310_fu_543_p2() {
    icmp_ln310_fu_543_p2 = (!j24_0_reg_346.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(j24_0_reg_346.read() == ap_const_lv11_400);
}

void music::thread_icmp_ln382_fu_617_p2() {
    icmp_ln382_fu_617_p2 = (!p_06_rec_reg_357.read().is_01() || !ap_const_lv9_169.is_01())? sc_lv<1>(): sc_lv<1>(p_06_rec_reg_357.read() == ap_const_lv9_169);
}

void music::thread_icmp_ln384_fu_634_p2() {
    icmp_ln384_fu_634_p2 = (!p_06_rec_reg_357.read().is_01() || !ap_const_lv9_0.is_01())? sc_lv<1>(): sc_lv<1>(p_06_rec_reg_357.read() == ap_const_lv9_0);
}

void music::thread_icmp_ln385_fu_640_p2() {
    icmp_ln385_fu_640_p2 = (!p_06_rec_reg_357.read().is_01() || !ap_const_lv9_168.is_01())? sc_lv<1>(): sc_lv<1>(p_06_rec_reg_357.read() == ap_const_lv9_168);
}

void music::thread_j_1_fu_549_p2() {
    j_1_fu_549_p2 = (!j24_0_reg_346.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(j24_0_reg_346.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void music::thread_j_fu_486_p2() {
    j_fu_486_p2 = (!j_0_reg_334.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(j_0_reg_334.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void music::thread_l_fu_446_p2() {
    l_fu_446_p2 = (!l_0_reg_312.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(l_0_reg_312.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void music::thread_n_fu_466_p2() {
    n_fu_466_p2 = (!n_0_reg_323.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(n_0_reg_323.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void music::thread_p_cast6_fu_422_p1() {
    p_cast6_fu_422_p1 = esl_zext<31,30>(tmp_2_fu_412_p4.read());
}

void music::thread_p_cast_fu_436_p1() {
    p_cast_fu_436_p1 = esl_zext<31,30>(tmp_3_fu_426_p4.read());
}

void music::thread_shl_ln_fu_452_p3() {
    shl_ln_fu_452_p3 = esl_concat<4,10>(l_0_reg_312.read(), ap_const_lv10_0);
}

void music::thread_temp_array_address0() {
    temp_array_address0 =  (sc_lv<9>) (zext_ln383_fu_629_p1.read());
}

void music::thread_temp_array_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         !(esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read()))))) {
        temp_array_ce0 = ap_const_logic_1;
    } else {
        temp_array_ce0 = ap_const_logic_0;
    }
}

void music::thread_tmp_1_fu_566_p3() {
    tmp_1_fu_566_p3 = esl_concat<14,2>(add_ln311_fu_561_p2.read(), ap_const_lv2_0);
}

void music::thread_tmp_2_fu_412_p4() {
    tmp_2_fu_412_p4 = data_im.read().range(31, 2);
}

void music::thread_tmp_3_fu_426_p4() {
    tmp_3_fu_426_p4 = data_re.read().range(31, 2);
}

void music::thread_tmp_fu_497_p3() {
    tmp_fu_497_p3 = esl_concat<14,2>(add_ln306_fu_492_p2.read(), ap_const_lv2_0);
}

void music::thread_zext_ln305_1_fu_472_p1() {
    zext_ln305_1_fu_472_p1 = esl_zext<17,3>(n_0_reg_323.read());
}

void music::thread_zext_ln305_fu_476_p1() {
    zext_ln305_fu_476_p1 = esl_zext<14,11>(j_0_reg_334.read());
}

void music::thread_zext_ln306_1_fu_514_p1() {
    zext_ln306_1_fu_514_p1 = esl_zext<31,17>(add_ln306_1_fu_509_p2.read());
}

void music::thread_zext_ln306_2_fu_533_p1() {
    zext_ln306_2_fu_533_p1 = esl_zext<64,11>(j_0_reg_334.read());
}

void music::thread_zext_ln306_3_fu_523_p1() {
    zext_ln306_3_fu_523_p1 = esl_zext<64,31>(add_ln306_2_reg_693.read());
}

void music::thread_zext_ln306_fu_505_p1() {
    zext_ln306_fu_505_p1 = esl_zext<17,16>(tmp_fu_497_p3.read());
}

void music::thread_zext_ln310_fu_539_p1() {
    zext_ln310_fu_539_p1 = esl_zext<14,11>(j24_0_reg_346.read());
}

void music::thread_zext_ln311_1_fu_574_p1() {
    zext_ln311_1_fu_574_p1 = esl_zext<17,16>(tmp_1_fu_566_p3.read());
}

void music::thread_zext_ln311_2_fu_583_p1() {
    zext_ln311_2_fu_583_p1 = esl_zext<31,17>(add_ln311_1_fu_578_p2.read());
}

void music::thread_zext_ln311_3_fu_597_p1() {
    zext_ln311_3_fu_597_p1 = esl_zext<64,31>(add_ln311_2_reg_722.read());
}

void music::thread_zext_ln311_fu_555_p1() {
    zext_ln311_fu_555_p1 = esl_zext<64,11>(j24_0_reg_346.read());
}

void music::thread_zext_ln312_fu_607_p1() {
    zext_ln312_fu_607_p1 = esl_zext<64,31>(add_ln312_reg_727.read());
}

void music::thread_zext_ln383_fu_629_p1() {
    zext_ln383_fu_629_p1 = esl_zext<64,9>(p_06_rec_reg_357.read());
}

void music::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln303_fu_440_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln304_fu_460_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln305_fu_480_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(data_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(data_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_block_state14_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln310_fu_543_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(data_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_block_state17_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(data_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(data_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(data_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && !(esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln382_fu_617_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && !(esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, P_sm_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(P_sm_data_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, P_sm_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, P_sm_last_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln382_fu_617_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(P_sm_data_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(P_sm_data_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void music::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_data_AWVALID\" :  \"" << m_axi_data_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_AWREADY\" :  \"" << m_axi_data_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWADDR\" :  \"" << m_axi_data_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWID\" :  \"" << m_axi_data_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWLEN\" :  \"" << m_axi_data_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWSIZE\" :  \"" << m_axi_data_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWBURST\" :  \"" << m_axi_data_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWLOCK\" :  \"" << m_axi_data_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWCACHE\" :  \"" << m_axi_data_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWPROT\" :  \"" << m_axi_data_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWQOS\" :  \"" << m_axi_data_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWREGION\" :  \"" << m_axi_data_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_AWUSER\" :  \"" << m_axi_data_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_WVALID\" :  \"" << m_axi_data_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_WREADY\" :  \"" << m_axi_data_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_WDATA\" :  \"" << m_axi_data_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_WSTRB\" :  \"" << m_axi_data_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_WLAST\" :  \"" << m_axi_data_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_WID\" :  \"" << m_axi_data_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_WUSER\" :  \"" << m_axi_data_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARVALID\" :  \"" << m_axi_data_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_ARREADY\" :  \"" << m_axi_data_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARADDR\" :  \"" << m_axi_data_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARID\" :  \"" << m_axi_data_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARLEN\" :  \"" << m_axi_data_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARSIZE\" :  \"" << m_axi_data_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARBURST\" :  \"" << m_axi_data_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARLOCK\" :  \"" << m_axi_data_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARCACHE\" :  \"" << m_axi_data_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARPROT\" :  \"" << m_axi_data_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARQOS\" :  \"" << m_axi_data_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARREGION\" :  \"" << m_axi_data_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_ARUSER\" :  \"" << m_axi_data_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_RVALID\" :  \"" << m_axi_data_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_RREADY\" :  \"" << m_axi_data_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_RDATA\" :  \"" << m_axi_data_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_RLAST\" :  \"" << m_axi_data_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_RID\" :  \"" << m_axi_data_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_RUSER\" :  \"" << m_axi_data_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_RRESP\" :  \"" << m_axi_data_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_BVALID\" :  \"" << m_axi_data_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_data_BREADY\" :  \"" << m_axi_data_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_BRESP\" :  \"" << m_axi_data_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_BID\" :  \"" << m_axi_data_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_data_BUSER\" :  \"" << m_axi_data_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"P_sm_TDATA\" :  \"" << P_sm_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"P_sm_TVALID\" :  \"" << P_sm_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"P_sm_TREADY\" :  \"" << P_sm_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"P_sm_TUSER\" :  \"" << P_sm_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"P_sm_TLAST\" :  \"" << P_sm_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

