// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="music,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=1769785,HLS_SYN_TPT=none,HLS_SYN_MEM=69,HLS_SYN_DSP=117,HLS_SYN_FF=17973,HLS_SYN_LUT=24605,HLS_VERSION=2019_1}" *)

module music (
        ap_clk,
        ap_rst_n,
        m_axi_data_AWVALID,
        m_axi_data_AWREADY,
        m_axi_data_AWADDR,
        m_axi_data_AWID,
        m_axi_data_AWLEN,
        m_axi_data_AWSIZE,
        m_axi_data_AWBURST,
        m_axi_data_AWLOCK,
        m_axi_data_AWCACHE,
        m_axi_data_AWPROT,
        m_axi_data_AWQOS,
        m_axi_data_AWREGION,
        m_axi_data_AWUSER,
        m_axi_data_WVALID,
        m_axi_data_WREADY,
        m_axi_data_WDATA,
        m_axi_data_WSTRB,
        m_axi_data_WLAST,
        m_axi_data_WID,
        m_axi_data_WUSER,
        m_axi_data_ARVALID,
        m_axi_data_ARREADY,
        m_axi_data_ARADDR,
        m_axi_data_ARID,
        m_axi_data_ARLEN,
        m_axi_data_ARSIZE,
        m_axi_data_ARBURST,
        m_axi_data_ARLOCK,
        m_axi_data_ARCACHE,
        m_axi_data_ARPROT,
        m_axi_data_ARQOS,
        m_axi_data_ARREGION,
        m_axi_data_ARUSER,
        m_axi_data_RVALID,
        m_axi_data_RREADY,
        m_axi_data_RDATA,
        m_axi_data_RLAST,
        m_axi_data_RID,
        m_axi_data_RUSER,
        m_axi_data_RRESP,
        m_axi_data_BVALID,
        m_axi_data_BREADY,
        m_axi_data_BRESP,
        m_axi_data_BID,
        m_axi_data_BUSER,
        P_sm_TDATA,
        P_sm_TVALID,
        P_sm_TREADY,
        P_sm_TUSER,
        P_sm_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_AWVALID;
input   m_axi_data_AWREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_AWADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_AWID;
output  [7:0] m_axi_data_AWLEN;
output  [2:0] m_axi_data_AWSIZE;
output  [1:0] m_axi_data_AWBURST;
output  [1:0] m_axi_data_AWLOCK;
output  [3:0] m_axi_data_AWCACHE;
output  [2:0] m_axi_data_AWPROT;
output  [3:0] m_axi_data_AWQOS;
output  [3:0] m_axi_data_AWREGION;
output  [C_M_AXI_DATA_AWUSER_WIDTH - 1:0] m_axi_data_AWUSER;
output   m_axi_data_WVALID;
input   m_axi_data_WREADY;
output  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_WDATA;
output  [C_M_AXI_DATA_WSTRB_WIDTH - 1:0] m_axi_data_WSTRB;
output   m_axi_data_WLAST;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_WID;
output  [C_M_AXI_DATA_WUSER_WIDTH - 1:0] m_axi_data_WUSER;
output   m_axi_data_ARVALID;
input   m_axi_data_ARREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_ARADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_ARID;
output  [7:0] m_axi_data_ARLEN;
output  [2:0] m_axi_data_ARSIZE;
output  [1:0] m_axi_data_ARBURST;
output  [1:0] m_axi_data_ARLOCK;
output  [3:0] m_axi_data_ARCACHE;
output  [2:0] m_axi_data_ARPROT;
output  [3:0] m_axi_data_ARQOS;
output  [3:0] m_axi_data_ARREGION;
output  [C_M_AXI_DATA_ARUSER_WIDTH - 1:0] m_axi_data_ARUSER;
input   m_axi_data_RVALID;
output   m_axi_data_RREADY;
input  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_RDATA;
input   m_axi_data_RLAST;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_RID;
input  [C_M_AXI_DATA_RUSER_WIDTH - 1:0] m_axi_data_RUSER;
input  [1:0] m_axi_data_RRESP;
input   m_axi_data_BVALID;
output   m_axi_data_BREADY;
input  [1:0] m_axi_data_BRESP;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_BID;
input  [C_M_AXI_DATA_BUSER_WIDTH - 1:0] m_axi_data_BUSER;
output  [31:0] P_sm_TDATA;
output   P_sm_TVALID;
input   P_sm_TREADY;
output  [0:0] P_sm_TUSER;
output  [0:0] P_sm_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] data_re;
wire   [31:0] data_im;
reg   [31:0] P_sm_data_1_data_out;
reg    P_sm_data_1_vld_in;
wire    P_sm_data_1_vld_out;
wire    P_sm_data_1_ack_in;
wire    P_sm_data_1_ack_out;
reg   [31:0] P_sm_data_1_payload_A;
reg   [31:0] P_sm_data_1_payload_B;
reg    P_sm_data_1_sel_rd;
reg    P_sm_data_1_sel_wr;
wire    P_sm_data_1_sel;
wire    P_sm_data_1_load_A;
wire    P_sm_data_1_load_B;
reg   [1:0] P_sm_data_1_state;
wire    P_sm_data_1_state_cmp_full;
reg   [0:0] P_sm_user_V_1_data_out;
reg    P_sm_user_V_1_vld_in;
wire    P_sm_user_V_1_vld_out;
wire    P_sm_user_V_1_ack_in;
wire    P_sm_user_V_1_ack_out;
reg   [0:0] P_sm_user_V_1_payload_A;
reg   [0:0] P_sm_user_V_1_payload_B;
reg    P_sm_user_V_1_sel_rd;
reg    P_sm_user_V_1_sel_wr;
wire    P_sm_user_V_1_sel;
wire    P_sm_user_V_1_load_A;
wire    P_sm_user_V_1_load_B;
reg   [1:0] P_sm_user_V_1_state;
wire    P_sm_user_V_1_state_cmp_full;
reg   [0:0] P_sm_last_V_1_data_out;
reg    P_sm_last_V_1_vld_in;
wire    P_sm_last_V_1_vld_out;
wire    P_sm_last_V_1_ack_in;
wire    P_sm_last_V_1_ack_out;
reg   [0:0] P_sm_last_V_1_payload_A;
reg   [0:0] P_sm_last_V_1_payload_B;
reg    P_sm_last_V_1_sel_rd;
reg    P_sm_last_V_1_sel_wr;
wire    P_sm_last_V_1_sel;
wire    P_sm_last_V_1_load_A;
wire    P_sm_last_V_1_load_B;
reg   [1:0] P_sm_last_V_1_state;
wire    P_sm_last_V_1_state_cmp_full;
wire   [8:0] temp_array_address0;
reg    temp_array_ce0;
wire   [31:0] temp_array_q0;
reg    data_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    data_blk_n_R;
wire    ap_CS_fsm_state12;
reg    data_blk_n_AW;
wire    ap_CS_fsm_state16;
reg    data_blk_n_W;
wire    ap_CS_fsm_state17;
reg    data_blk_n_B;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
reg    P_sm_TDATA_blk_n;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
reg    data_AWVALID;
wire    data_AWREADY;
reg   [31:0] data_AWADDR;
reg    data_WVALID;
wire    data_WREADY;
reg   [31:0] data_WDATA;
reg    data_ARVALID;
wire    data_ARREADY;
wire   [31:0] data_ARADDR;
wire    data_RVALID;
reg    data_RREADY;
wire   [31:0] data_RDATA;
wire    data_RLAST;
wire   [0:0] data_RID;
wire   [0:0] data_RUSER;
wire   [1:0] data_RRESP;
wire    data_BVALID;
reg    data_BREADY;
wire   [1:0] data_BRESP;
wire   [0:0] data_BID;
wire   [0:0] data_BUSER;
wire   [30:0] p_cast6_fu_422_p1;
reg   [30:0] p_cast6_reg_646;
wire   [30:0] p_cast_fu_436_p1;
reg   [30:0] p_cast_reg_651;
wire   [3:0] l_fu_446_p2;
reg   [3:0] l_reg_660;
wire    ap_CS_fsm_state2;
wire   [13:0] shl_ln_fu_452_p3;
reg   [13:0] shl_ln_reg_665;
wire   [0:0] icmp_ln303_fu_440_p2;
wire   [2:0] n_fu_466_p2;
reg   [2:0] n_reg_674;
wire    ap_CS_fsm_state3;
wire   [16:0] zext_ln305_1_fu_472_p1;
reg   [16:0] zext_ln305_1_reg_679;
wire   [0:0] icmp_ln304_fu_460_p2;
wire   [10:0] j_fu_486_p2;
reg   [10:0] j_reg_688;
wire    ap_CS_fsm_state4;
wire   [30:0] add_ln306_2_fu_518_p2;
reg   [30:0] add_ln306_2_reg_693;
wire   [0:0] icmp_ln305_fu_480_p2;
reg   [31:0] data_addr_read_reg_704;
wire   [10:0] j_1_fu_549_p2;
reg   [10:0] j_1_reg_712;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln310_fu_543_p2;
wire   [30:0] add_ln311_2_fu_587_p2;
reg   [30:0] add_ln311_2_reg_722;
wire   [30:0] add_ln312_fu_592_p2;
reg   [30:0] add_ln312_reg_727;
wire   [31:0] FFT_out_re_q0;
reg   [31:0] FFT_out_re_load_reg_737;
wire   [31:0] FFT_out_im_q0;
reg   [31:0] FFT_out_im_load_reg_748;
reg    ap_block_state17_io;
wire   [8:0] i_fu_623_p2;
reg   [8:0] i_reg_762;
wire    ap_CS_fsm_state24;
reg    ap_block_state24;
wire   [0:0] icmp_ln382_fu_617_p2;
wire   [0:0] icmp_ln384_fu_634_p2;
reg   [0:0] icmp_ln384_reg_772;
wire   [0:0] icmp_ln385_fu_640_p2;
reg   [0:0] icmp_ln385_reg_777;
reg   [9:0] FFT_Buffer_re_address0;
reg    FFT_Buffer_re_ce0;
reg    FFT_Buffer_re_we0;
wire   [31:0] FFT_Buffer_re_q0;
reg   [9:0] FFT_Buffer_im_address0;
reg    FFT_Buffer_im_ce0;
reg    FFT_Buffer_im_we0;
wire   [31:0] FFT_Buffer_im_q0;
reg   [9:0] FFT_out_re_address0;
reg    FFT_out_re_ce0;
reg    FFT_out_re_we0;
reg    FFT_out_re_ce1;
reg    FFT_out_re_we1;
reg   [9:0] FFT_out_im_address0;
reg    FFT_out_im_ce0;
reg    FFT_out_im_we0;
reg    FFT_out_im_ce1;
reg    FFT_out_im_we1;
wire   [9:0] grp_fft_streaming_fu_368_X_R_address0;
wire    grp_fft_streaming_fu_368_X_R_ce0;
wire   [31:0] grp_fft_streaming_fu_368_X_R_d0;
wire    grp_fft_streaming_fu_368_X_R_we0;
wire   [9:0] grp_fft_streaming_fu_368_X_R_address1;
wire    grp_fft_streaming_fu_368_X_R_ce1;
wire   [31:0] grp_fft_streaming_fu_368_X_R_d1;
wire    grp_fft_streaming_fu_368_X_R_we1;
wire   [9:0] grp_fft_streaming_fu_368_X_I_address0;
wire    grp_fft_streaming_fu_368_X_I_ce0;
wire   [31:0] grp_fft_streaming_fu_368_X_I_d0;
wire    grp_fft_streaming_fu_368_X_I_we0;
wire   [9:0] grp_fft_streaming_fu_368_X_I_address1;
wire    grp_fft_streaming_fu_368_X_I_ce1;
wire   [31:0] grp_fft_streaming_fu_368_X_I_d1;
wire    grp_fft_streaming_fu_368_X_I_we1;
wire   [9:0] grp_fft_streaming_fu_368_OUT_R_address0;
wire    grp_fft_streaming_fu_368_OUT_R_ce0;
wire   [31:0] grp_fft_streaming_fu_368_OUT_R_d0;
wire    grp_fft_streaming_fu_368_OUT_R_we0;
wire   [9:0] grp_fft_streaming_fu_368_OUT_R_address1;
wire    grp_fft_streaming_fu_368_OUT_R_ce1;
wire   [31:0] grp_fft_streaming_fu_368_OUT_R_d1;
wire    grp_fft_streaming_fu_368_OUT_R_we1;
wire   [9:0] grp_fft_streaming_fu_368_OUT_I_address0;
wire    grp_fft_streaming_fu_368_OUT_I_ce0;
wire   [31:0] grp_fft_streaming_fu_368_OUT_I_d0;
wire    grp_fft_streaming_fu_368_OUT_I_we0;
wire   [9:0] grp_fft_streaming_fu_368_OUT_I_address1;
wire    grp_fft_streaming_fu_368_OUT_I_ce1;
wire   [31:0] grp_fft_streaming_fu_368_OUT_I_d1;
wire    grp_fft_streaming_fu_368_OUT_I_we1;
wire    grp_fft_streaming_fu_368_ap_start;
wire    grp_fft_streaming_fu_368_ap_done;
wire    grp_fft_streaming_fu_368_ap_ready;
wire    grp_fft_streaming_fu_368_ap_idle;
reg    grp_fft_streaming_fu_368_ap_continue;
reg   [3:0] l_0_reg_312;
reg   [2:0] n_0_reg_323;
reg   [10:0] j_0_reg_334;
wire    ap_CS_fsm_state13;
reg   [10:0] j24_0_reg_346;
wire    ap_CS_fsm_state14;
wire    ap_sync_grp_fft_streaming_fu_368_ap_ready;
wire    ap_sync_grp_fft_streaming_fu_368_ap_done;
reg    ap_block_state14_on_subcall_done;
reg   [8:0] p_06_rec_reg_357;
reg    grp_fft_streaming_fu_368_ap_start_reg;
reg    ap_sync_reg_grp_fft_streaming_fu_368_ap_ready;
reg    ap_sync_reg_grp_fft_streaming_fu_368_ap_done;
wire   [63:0] zext_ln306_2_fu_533_p1;
wire   [63:0] zext_ln311_fu_555_p1;
wire   [63:0] zext_ln383_fu_629_p1;
wire   [63:0] zext_ln306_3_fu_523_p1;
wire   [63:0] zext_ln311_3_fu_597_p1;
wire   [63:0] zext_ln312_fu_607_p1;
wire   [29:0] tmp_2_fu_412_p4;
wire   [29:0] tmp_3_fu_426_p4;
wire   [13:0] zext_ln305_fu_476_p1;
wire   [13:0] add_ln306_fu_492_p2;
wire   [15:0] tmp_fu_497_p3;
wire   [16:0] zext_ln306_fu_505_p1;
wire   [16:0] add_ln306_1_fu_509_p2;
wire   [30:0] zext_ln306_1_fu_514_p1;
wire   [13:0] zext_ln310_fu_539_p1;
wire   [13:0] add_ln311_fu_561_p2;
wire   [15:0] tmp_1_fu_566_p3;
wire   [16:0] zext_ln311_1_fu_574_p1;
wire   [16:0] add_ln311_1_fu_578_p2;
wire   [30:0] zext_ln311_2_fu_583_p1;
reg   [25:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 P_sm_data_1_sel_rd = 1'b0;
#0 P_sm_data_1_sel_wr = 1'b0;
#0 P_sm_data_1_state = 2'd0;
#0 P_sm_user_V_1_sel_rd = 1'b0;
#0 P_sm_user_V_1_sel_wr = 1'b0;
#0 P_sm_user_V_1_state = 2'd0;
#0 P_sm_last_V_1_sel_rd = 1'b0;
#0 P_sm_last_V_1_sel_wr = 1'b0;
#0 P_sm_last_V_1_state = 2'd0;
#0 grp_fft_streaming_fu_368_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_fft_streaming_fu_368_ap_ready = 1'b0;
#0 ap_sync_reg_grp_fft_streaming_fu_368_ap_done = 1'b0;
end

music_temp_array #(
    .DataWidth( 32 ),
    .AddressRange( 361 ),
    .AddressWidth( 9 ))
temp_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_array_address0),
    .ce0(temp_array_ce0),
    .q0(temp_array_q0)
);

music_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
music_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd176),
    .data_re(data_re),
    .data_im(data_im)
);

music_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_CACHE_VALUE ))
music_data_m_axi_U(
    .AWVALID(m_axi_data_AWVALID),
    .AWREADY(m_axi_data_AWREADY),
    .AWADDR(m_axi_data_AWADDR),
    .AWID(m_axi_data_AWID),
    .AWLEN(m_axi_data_AWLEN),
    .AWSIZE(m_axi_data_AWSIZE),
    .AWBURST(m_axi_data_AWBURST),
    .AWLOCK(m_axi_data_AWLOCK),
    .AWCACHE(m_axi_data_AWCACHE),
    .AWPROT(m_axi_data_AWPROT),
    .AWQOS(m_axi_data_AWQOS),
    .AWREGION(m_axi_data_AWREGION),
    .AWUSER(m_axi_data_AWUSER),
    .WVALID(m_axi_data_WVALID),
    .WREADY(m_axi_data_WREADY),
    .WDATA(m_axi_data_WDATA),
    .WSTRB(m_axi_data_WSTRB),
    .WLAST(m_axi_data_WLAST),
    .WID(m_axi_data_WID),
    .WUSER(m_axi_data_WUSER),
    .ARVALID(m_axi_data_ARVALID),
    .ARREADY(m_axi_data_ARREADY),
    .ARADDR(m_axi_data_ARADDR),
    .ARID(m_axi_data_ARID),
    .ARLEN(m_axi_data_ARLEN),
    .ARSIZE(m_axi_data_ARSIZE),
    .ARBURST(m_axi_data_ARBURST),
    .ARLOCK(m_axi_data_ARLOCK),
    .ARCACHE(m_axi_data_ARCACHE),
    .ARPROT(m_axi_data_ARPROT),
    .ARQOS(m_axi_data_ARQOS),
    .ARREGION(m_axi_data_ARREGION),
    .ARUSER(m_axi_data_ARUSER),
    .RVALID(m_axi_data_RVALID),
    .RREADY(m_axi_data_RREADY),
    .RDATA(m_axi_data_RDATA),
    .RLAST(m_axi_data_RLAST),
    .RID(m_axi_data_RID),
    .RUSER(m_axi_data_RUSER),
    .RRESP(m_axi_data_RRESP),
    .BVALID(m_axi_data_BVALID),
    .BREADY(m_axi_data_BREADY),
    .BRESP(m_axi_data_BRESP),
    .BID(m_axi_data_BID),
    .BUSER(m_axi_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data_ARVALID),
    .I_ARREADY(data_ARREADY),
    .I_ARADDR(data_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_RVALID),
    .I_RREADY(data_RREADY),
    .I_RDATA(data_RDATA),
    .I_RID(data_RID),
    .I_RUSER(data_RUSER),
    .I_RRESP(data_RRESP),
    .I_RLAST(data_RLAST),
    .I_AWVALID(data_AWVALID),
    .I_AWREADY(data_AWREADY),
    .I_AWADDR(data_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(data_WVALID),
    .I_WREADY(data_WREADY),
    .I_WDATA(data_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(data_BVALID),
    .I_BREADY(data_BREADY),
    .I_BRESP(data_BRESP),
    .I_BID(data_BID),
    .I_BUSER(data_BUSER)
);

music_FFT_Buffer_re #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
FFT_Buffer_re_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FFT_Buffer_re_address0),
    .ce0(FFT_Buffer_re_ce0),
    .we0(FFT_Buffer_re_we0),
    .d0(data_addr_read_reg_704),
    .q0(FFT_Buffer_re_q0)
);

music_FFT_Buffer_re #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
FFT_Buffer_im_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FFT_Buffer_im_address0),
    .ce0(FFT_Buffer_im_ce0),
    .we0(FFT_Buffer_im_we0),
    .d0(32'd0),
    .q0(FFT_Buffer_im_q0)
);

music_FFT_out_re #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
FFT_out_re_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FFT_out_re_address0),
    .ce0(FFT_out_re_ce0),
    .we0(FFT_out_re_we0),
    .d0(grp_fft_streaming_fu_368_OUT_R_d0),
    .q0(FFT_out_re_q0),
    .address1(grp_fft_streaming_fu_368_OUT_R_address1),
    .ce1(FFT_out_re_ce1),
    .we1(FFT_out_re_we1),
    .d1(grp_fft_streaming_fu_368_OUT_R_d1)
);

music_FFT_out_re #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
FFT_out_im_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FFT_out_im_address0),
    .ce0(FFT_out_im_ce0),
    .we0(FFT_out_im_we0),
    .d0(grp_fft_streaming_fu_368_OUT_I_d0),
    .q0(FFT_out_im_q0),
    .address1(grp_fft_streaming_fu_368_OUT_I_address1),
    .ce1(FFT_out_im_ce1),
    .we1(FFT_out_im_we1),
    .d1(grp_fft_streaming_fu_368_OUT_I_d1)
);

fft_streaming grp_fft_streaming_fu_368(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .X_R_address0(grp_fft_streaming_fu_368_X_R_address0),
    .X_R_ce0(grp_fft_streaming_fu_368_X_R_ce0),
    .X_R_d0(grp_fft_streaming_fu_368_X_R_d0),
    .X_R_q0(FFT_Buffer_re_q0),
    .X_R_we0(grp_fft_streaming_fu_368_X_R_we0),
    .X_R_address1(grp_fft_streaming_fu_368_X_R_address1),
    .X_R_ce1(grp_fft_streaming_fu_368_X_R_ce1),
    .X_R_d1(grp_fft_streaming_fu_368_X_R_d1),
    .X_R_q1(32'd0),
    .X_R_we1(grp_fft_streaming_fu_368_X_R_we1),
    .X_I_address0(grp_fft_streaming_fu_368_X_I_address0),
    .X_I_ce0(grp_fft_streaming_fu_368_X_I_ce0),
    .X_I_d0(grp_fft_streaming_fu_368_X_I_d0),
    .X_I_q0(FFT_Buffer_im_q0),
    .X_I_we0(grp_fft_streaming_fu_368_X_I_we0),
    .X_I_address1(grp_fft_streaming_fu_368_X_I_address1),
    .X_I_ce1(grp_fft_streaming_fu_368_X_I_ce1),
    .X_I_d1(grp_fft_streaming_fu_368_X_I_d1),
    .X_I_q1(32'd0),
    .X_I_we1(grp_fft_streaming_fu_368_X_I_we1),
    .OUT_R_address0(grp_fft_streaming_fu_368_OUT_R_address0),
    .OUT_R_ce0(grp_fft_streaming_fu_368_OUT_R_ce0),
    .OUT_R_d0(grp_fft_streaming_fu_368_OUT_R_d0),
    .OUT_R_q0(32'd0),
    .OUT_R_we0(grp_fft_streaming_fu_368_OUT_R_we0),
    .OUT_R_address1(grp_fft_streaming_fu_368_OUT_R_address1),
    .OUT_R_ce1(grp_fft_streaming_fu_368_OUT_R_ce1),
    .OUT_R_d1(grp_fft_streaming_fu_368_OUT_R_d1),
    .OUT_R_q1(32'd0),
    .OUT_R_we1(grp_fft_streaming_fu_368_OUT_R_we1),
    .OUT_I_address0(grp_fft_streaming_fu_368_OUT_I_address0),
    .OUT_I_ce0(grp_fft_streaming_fu_368_OUT_I_ce0),
    .OUT_I_d0(grp_fft_streaming_fu_368_OUT_I_d0),
    .OUT_I_q0(32'd0),
    .OUT_I_we0(grp_fft_streaming_fu_368_OUT_I_we0),
    .OUT_I_address1(grp_fft_streaming_fu_368_OUT_I_address1),
    .OUT_I_ce1(grp_fft_streaming_fu_368_OUT_I_ce1),
    .OUT_I_d1(grp_fft_streaming_fu_368_OUT_I_d1),
    .OUT_I_q1(32'd0),
    .OUT_I_we1(grp_fft_streaming_fu_368_OUT_I_we1),
    .ap_start(grp_fft_streaming_fu_368_ap_start),
    .ap_done(grp_fft_streaming_fu_368_ap_done),
    .ap_ready(grp_fft_streaming_fu_368_ap_ready),
    .ap_idle(grp_fft_streaming_fu_368_ap_idle),
    .ap_continue(grp_fft_streaming_fu_368_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == P_sm_data_1_ack_out) & (1'b1 == P_sm_data_1_vld_out))) begin
            P_sm_data_1_sel_rd <= ~P_sm_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == P_sm_data_1_ack_in) & (1'b1 == P_sm_data_1_vld_in))) begin
            P_sm_data_1_sel_wr <= ~P_sm_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_data_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == P_sm_data_1_vld_in) & (2'd2 == P_sm_data_1_state)) | ((1'b0 == P_sm_data_1_vld_in) & (1'b1 == P_sm_data_1_ack_out) & (2'd3 == P_sm_data_1_state)))) begin
            P_sm_data_1_state <= 2'd2;
        end else if ((((1'b0 == P_sm_TREADY) & (2'd1 == P_sm_data_1_state)) | ((1'b0 == P_sm_TREADY) & (1'b1 == P_sm_data_1_vld_in) & (2'd3 == P_sm_data_1_state)))) begin
            P_sm_data_1_state <= 2'd1;
        end else if (((~((1'b0 == P_sm_data_1_vld_in) & (1'b1 == P_sm_data_1_ack_out)) & ~((1'b0 == P_sm_TREADY) & (1'b1 == P_sm_data_1_vld_in)) & (2'd3 == P_sm_data_1_state)) | ((1'b1 == P_sm_data_1_ack_out) & (2'd1 == P_sm_data_1_state)) | ((1'b1 == P_sm_data_1_vld_in) & (2'd2 == P_sm_data_1_state)))) begin
            P_sm_data_1_state <= 2'd3;
        end else begin
            P_sm_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == P_sm_last_V_1_ack_out) & (1'b1 == P_sm_last_V_1_vld_out))) begin
            P_sm_last_V_1_sel_rd <= ~P_sm_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == P_sm_last_V_1_ack_in) & (1'b1 == P_sm_last_V_1_vld_in))) begin
            P_sm_last_V_1_sel_wr <= ~P_sm_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == P_sm_last_V_1_vld_in) & (2'd2 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_last_V_1_vld_in) & (1'b1 == P_sm_last_V_1_ack_out) & (2'd3 == P_sm_last_V_1_state)))) begin
            P_sm_last_V_1_state <= 2'd2;
        end else if ((((1'b0 == P_sm_TREADY) & (2'd1 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (1'b1 == P_sm_last_V_1_vld_in) & (2'd3 == P_sm_last_V_1_state)))) begin
            P_sm_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == P_sm_last_V_1_vld_in) & (1'b1 == P_sm_last_V_1_ack_out)) & ~((1'b0 == P_sm_TREADY) & (1'b1 == P_sm_last_V_1_vld_in)) & (2'd3 == P_sm_last_V_1_state)) | ((1'b1 == P_sm_last_V_1_ack_out) & (2'd1 == P_sm_last_V_1_state)) | ((1'b1 == P_sm_last_V_1_vld_in) & (2'd2 == P_sm_last_V_1_state)))) begin
            P_sm_last_V_1_state <= 2'd3;
        end else begin
            P_sm_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == P_sm_user_V_1_ack_out) & (1'b1 == P_sm_user_V_1_vld_out))) begin
            P_sm_user_V_1_sel_rd <= ~P_sm_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == P_sm_user_V_1_ack_in) & (1'b1 == P_sm_user_V_1_vld_in))) begin
            P_sm_user_V_1_sel_wr <= ~P_sm_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        P_sm_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == P_sm_user_V_1_vld_in) & (2'd2 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_user_V_1_vld_in) & (1'b1 == P_sm_user_V_1_ack_out) & (2'd3 == P_sm_user_V_1_state)))) begin
            P_sm_user_V_1_state <= 2'd2;
        end else if ((((1'b0 == P_sm_TREADY) & (2'd1 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (1'b1 == P_sm_user_V_1_vld_in) & (2'd3 == P_sm_user_V_1_state)))) begin
            P_sm_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == P_sm_user_V_1_vld_in) & (1'b1 == P_sm_user_V_1_ack_out)) & ~((1'b0 == P_sm_TREADY) & (1'b1 == P_sm_user_V_1_vld_in)) & (2'd3 == P_sm_user_V_1_state)) | ((1'b1 == P_sm_user_V_1_ack_out) & (2'd1 == P_sm_user_V_1_state)) | ((1'b1 == P_sm_user_V_1_vld_in) & (2'd2 == P_sm_user_V_1_state)))) begin
            P_sm_user_V_1_state <= 2'd3;
        end else begin
            P_sm_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_fft_streaming_fu_368_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_sync_reg_grp_fft_streaming_fu_368_ap_done <= 1'b0;
        end else if ((grp_fft_streaming_fu_368_ap_done == 1'b1)) begin
            ap_sync_reg_grp_fft_streaming_fu_368_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_fft_streaming_fu_368_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_sync_reg_grp_fft_streaming_fu_368_ap_ready <= 1'b0;
        end else if ((grp_fft_streaming_fu_368_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_fft_streaming_fu_368_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fft_streaming_fu_368_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_fft_streaming_fu_368_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln305_fu_480_p2 == 1'd1)))) begin
            grp_fft_streaming_fu_368_ap_start_reg <= 1'b1;
        end else if ((grp_fft_streaming_fu_368_ap_ready == 1'b1)) begin
            grp_fft_streaming_fu_368_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        j24_0_reg_346 <= j_1_reg_712;
    end else if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
        j24_0_reg_346 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln304_fu_460_p2 == 1'd0))) begin
        j_0_reg_334 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_reg_334 <= j_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln304_fu_460_p2 == 1'd1))) begin
        l_0_reg_312 <= l_reg_660;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_0_reg_312 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln310_fu_543_p2 == 1'd1))) begin
        n_0_reg_323 <= n_reg_674;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln303_fu_440_p2 == 1'd0))) begin
        n_0_reg_323 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln303_fu_440_p2 == 1'd1))) begin
        p_06_rec_reg_357 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state26) & (1'b1 == P_sm_data_1_ack_in))) begin
        p_06_rec_reg_357 <= i_reg_762;
    end
end

always @ (posedge ap_clk) begin
    if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        FFT_out_im_load_reg_748 <= FFT_out_im_q0;
        FFT_out_re_load_reg_737 <= FFT_out_re_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == P_sm_data_1_load_A)) begin
        P_sm_data_1_payload_A <= temp_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == P_sm_data_1_load_B)) begin
        P_sm_data_1_payload_B <= temp_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == P_sm_last_V_1_load_A)) begin
        P_sm_last_V_1_payload_A <= icmp_ln385_reg_777;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == P_sm_last_V_1_load_B)) begin
        P_sm_last_V_1_payload_B <= icmp_ln385_reg_777;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == P_sm_user_V_1_load_A)) begin
        P_sm_user_V_1_payload_A <= icmp_ln384_reg_772;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == P_sm_user_V_1_load_B)) begin
        P_sm_user_V_1_payload_B <= icmp_ln384_reg_772;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln305_fu_480_p2 == 1'd0))) begin
        add_ln306_2_reg_693 <= add_ln306_2_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln310_fu_543_p2 == 1'd0))) begin
        add_ln311_2_reg_722 <= add_ln311_2_fu_587_p2;
        add_ln312_reg_727 <= add_ln312_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        data_addr_read_reg_704 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((2'd1 == P_sm_last_V_1_state) | (2'd1 == P_sm_user_V_1_state) | (2'd1 == P_sm_data_1_state) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_data_1_state))) & (1'b1 == ap_CS_fsm_state24))) begin
        i_reg_762 <= i_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((2'd1 == P_sm_last_V_1_state) | (2'd1 == P_sm_user_V_1_state) | (2'd1 == P_sm_data_1_state) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_data_1_state))) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln382_fu_617_p2 == 1'd0))) begin
        icmp_ln384_reg_772 <= icmp_ln384_fu_634_p2;
        icmp_ln385_reg_777 <= icmp_ln385_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_1_reg_712 <= j_1_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_688 <= j_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        l_reg_660 <= l_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_reg_674 <= n_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cast6_reg_646[29 : 0] <= p_cast6_fu_422_p1[29 : 0];
        p_cast_reg_651[29 : 0] <= p_cast_fu_436_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln303_fu_440_p2 == 1'd0))) begin
        shl_ln_reg_665[13 : 10] <= shl_ln_fu_452_p3[13 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln304_fu_460_p2 == 1'd0))) begin
        zext_ln305_1_reg_679[2 : 0] <= zext_ln305_1_fu_472_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FFT_Buffer_im_address0 = zext_ln306_2_fu_533_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_Buffer_im_address0 = grp_fft_streaming_fu_368_X_I_address0;
    end else begin
        FFT_Buffer_im_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FFT_Buffer_im_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_Buffer_im_ce0 = grp_fft_streaming_fu_368_X_I_ce0;
    end else begin
        FFT_Buffer_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FFT_Buffer_im_we0 = 1'b1;
    end else begin
        FFT_Buffer_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FFT_Buffer_re_address0 = zext_ln306_2_fu_533_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_Buffer_re_address0 = grp_fft_streaming_fu_368_X_R_address0;
    end else begin
        FFT_Buffer_re_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FFT_Buffer_re_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_Buffer_re_ce0 = grp_fft_streaming_fu_368_X_R_ce0;
    end else begin
        FFT_Buffer_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FFT_Buffer_re_we0 = 1'b1;
    end else begin
        FFT_Buffer_re_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FFT_out_im_address0 = zext_ln311_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_im_address0 = grp_fft_streaming_fu_368_OUT_I_address0;
    end else begin
        FFT_out_im_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FFT_out_im_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_im_ce0 = grp_fft_streaming_fu_368_OUT_I_ce0;
    end else begin
        FFT_out_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_im_ce1 = grp_fft_streaming_fu_368_OUT_I_ce1;
    end else begin
        FFT_out_im_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_im_we0 = grp_fft_streaming_fu_368_OUT_I_we0;
    end else begin
        FFT_out_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_im_we1 = grp_fft_streaming_fu_368_OUT_I_we1;
    end else begin
        FFT_out_im_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FFT_out_re_address0 = zext_ln311_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_re_address0 = grp_fft_streaming_fu_368_OUT_R_address0;
    end else begin
        FFT_out_re_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FFT_out_re_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_re_ce0 = grp_fft_streaming_fu_368_OUT_R_ce0;
    end else begin
        FFT_out_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_re_ce1 = grp_fft_streaming_fu_368_OUT_R_ce1;
    end else begin
        FFT_out_re_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_re_we0 = grp_fft_streaming_fu_368_OUT_R_we0;
    end else begin
        FFT_out_re_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        FFT_out_re_we1 = grp_fft_streaming_fu_368_OUT_R_we1;
    end else begin
        FFT_out_re_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        P_sm_TDATA_blk_n = P_sm_data_1_state[1'd1];
    end else begin
        P_sm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == P_sm_data_1_sel)) begin
        P_sm_data_1_data_out = P_sm_data_1_payload_B;
    end else begin
        P_sm_data_1_data_out = P_sm_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (1'b1 == P_sm_data_1_ack_in))) begin
        P_sm_data_1_vld_in = 1'b1;
    end else begin
        P_sm_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == P_sm_last_V_1_sel)) begin
        P_sm_last_V_1_data_out = P_sm_last_V_1_payload_B;
    end else begin
        P_sm_last_V_1_data_out = P_sm_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (1'b1 == P_sm_data_1_ack_in))) begin
        P_sm_last_V_1_vld_in = 1'b1;
    end else begin
        P_sm_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == P_sm_user_V_1_sel)) begin
        P_sm_user_V_1_data_out = P_sm_user_V_1_payload_B;
    end else begin
        P_sm_user_V_1_data_out = P_sm_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (1'b1 == P_sm_data_1_ack_in))) begin
        P_sm_user_V_1_vld_in = 1'b1;
    end else begin
        P_sm_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == P_sm_last_V_1_state) | (2'd1 == P_sm_user_V_1_state) | (2'd1 == P_sm_data_1_state) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_data_1_state))) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln382_fu_617_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == P_sm_last_V_1_state) | (2'd1 == P_sm_user_V_1_state) | (2'd1 == P_sm_data_1_state) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_data_1_state))) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln382_fu_617_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        data_ARVALID = 1'b1;
    end else begin
        data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
        data_AWADDR = zext_ln312_fu_607_p1;
    end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        data_AWADDR = zext_ln311_3_fu_597_p1;
    end else begin
        data_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17)) | ((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        data_AWVALID = 1'b1;
    end else begin
        data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        data_BREADY = 1'b1;
    end else begin
        data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        data_RREADY = 1'b1;
    end else begin
        data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        data_WDATA = FFT_out_im_load_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        data_WDATA = FFT_out_re_load_reg_737;
    end else begin
        data_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((data_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17)))) begin
        data_WVALID = 1'b1;
    end else begin
        data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_blk_n_AR = m_axi_data_ARREADY;
    end else begin
        data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        data_blk_n_AW = m_axi_data_AWREADY;
    end else begin
        data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        data_blk_n_B = m_axi_data_BVALID;
    end else begin
        data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_blk_n_R = m_axi_data_RVALID;
    end else begin
        data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        data_blk_n_W = m_axi_data_WREADY;
    end else begin
        data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
        grp_fft_streaming_fu_368_ap_continue = 1'b1;
    end else begin
        grp_fft_streaming_fu_368_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == P_sm_last_V_1_state) | (2'd1 == P_sm_user_V_1_state) | (2'd1 == P_sm_data_1_state) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_data_1_state))) & (1'b1 == ap_CS_fsm_state24))) begin
        temp_array_ce0 = 1'b1;
    end else begin
        temp_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln303_fu_440_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln304_fu_460_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln305_fu_480_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln310_fu_543_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((data_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((2'd1 == P_sm_last_V_1_state) | (2'd1 == P_sm_user_V_1_state) | (2'd1 == P_sm_data_1_state) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_data_1_state))) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln382_fu_617_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((2'd1 == P_sm_last_V_1_state) | (2'd1 == P_sm_user_V_1_state) | (2'd1 == P_sm_data_1_state) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_data_1_state))) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln382_fu_617_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (1'b1 == P_sm_data_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (1'b1 == P_sm_data_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_sm_TDATA = P_sm_data_1_data_out;

assign P_sm_TLAST = P_sm_last_V_1_data_out;

assign P_sm_TUSER = P_sm_user_V_1_data_out;

assign P_sm_TVALID = P_sm_last_V_1_state[1'd0];

assign P_sm_data_1_ack_in = P_sm_data_1_state[1'd1];

assign P_sm_data_1_ack_out = P_sm_TREADY;

assign P_sm_data_1_load_A = (~P_sm_data_1_sel_wr & P_sm_data_1_state_cmp_full);

assign P_sm_data_1_load_B = (P_sm_data_1_state_cmp_full & P_sm_data_1_sel_wr);

assign P_sm_data_1_sel = P_sm_data_1_sel_rd;

assign P_sm_data_1_state_cmp_full = ((P_sm_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign P_sm_data_1_vld_out = P_sm_data_1_state[1'd0];

assign P_sm_last_V_1_ack_in = P_sm_last_V_1_state[1'd1];

assign P_sm_last_V_1_ack_out = P_sm_TREADY;

assign P_sm_last_V_1_load_A = (~P_sm_last_V_1_sel_wr & P_sm_last_V_1_state_cmp_full);

assign P_sm_last_V_1_load_B = (P_sm_last_V_1_state_cmp_full & P_sm_last_V_1_sel_wr);

assign P_sm_last_V_1_sel = P_sm_last_V_1_sel_rd;

assign P_sm_last_V_1_state_cmp_full = ((P_sm_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign P_sm_last_V_1_vld_out = P_sm_last_V_1_state[1'd0];

assign P_sm_user_V_1_ack_in = P_sm_user_V_1_state[1'd1];

assign P_sm_user_V_1_ack_out = P_sm_TREADY;

assign P_sm_user_V_1_load_A = (~P_sm_user_V_1_sel_wr & P_sm_user_V_1_state_cmp_full);

assign P_sm_user_V_1_load_B = (P_sm_user_V_1_state_cmp_full & P_sm_user_V_1_sel_wr);

assign P_sm_user_V_1_sel = P_sm_user_V_1_sel_rd;

assign P_sm_user_V_1_state_cmp_full = ((P_sm_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign P_sm_user_V_1_vld_out = P_sm_user_V_1_state[1'd0];

assign add_ln306_1_fu_509_p2 = (zext_ln305_1_reg_679 + zext_ln306_fu_505_p1);

assign add_ln306_2_fu_518_p2 = (zext_ln306_1_fu_514_p1 + p_cast_reg_651);

assign add_ln306_fu_492_p2 = (shl_ln_reg_665 + zext_ln305_fu_476_p1);

assign add_ln311_1_fu_578_p2 = (zext_ln305_1_reg_679 + zext_ln311_1_fu_574_p1);

assign add_ln311_2_fu_587_p2 = (zext_ln311_2_fu_583_p1 + p_cast_reg_651);

assign add_ln311_fu_561_p2 = (shl_ln_reg_665 + zext_ln310_fu_539_p1);

assign add_ln312_fu_592_p2 = (zext_ln311_2_fu_583_p1 + p_cast6_reg_646);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state14_on_subcall_done = ((ap_sync_grp_fft_streaming_fu_368_ap_ready & ap_sync_grp_fft_streaming_fu_368_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state17_io = ((data_WREADY == 1'b0) | (data_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state24 = ((2'd1 == P_sm_last_V_1_state) | (2'd1 == P_sm_user_V_1_state) | (2'd1 == P_sm_data_1_state) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_last_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_user_V_1_state)) | ((1'b0 == P_sm_TREADY) & (2'd3 == P_sm_data_1_state)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_fft_streaming_fu_368_ap_done = (grp_fft_streaming_fu_368_ap_done | ap_sync_reg_grp_fft_streaming_fu_368_ap_done);

assign ap_sync_grp_fft_streaming_fu_368_ap_ready = (grp_fft_streaming_fu_368_ap_ready | ap_sync_reg_grp_fft_streaming_fu_368_ap_ready);

assign data_ARADDR = zext_ln306_3_fu_523_p1;

assign grp_fft_streaming_fu_368_ap_start = grp_fft_streaming_fu_368_ap_start_reg;

assign i_fu_623_p2 = (p_06_rec_reg_357 + 9'd1);

assign icmp_ln303_fu_440_p2 = ((l_0_reg_312 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln304_fu_460_p2 = ((n_0_reg_323 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_480_p2 = ((j_0_reg_334 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln310_fu_543_p2 = ((j24_0_reg_346 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln382_fu_617_p2 = ((p_06_rec_reg_357 == 9'd361) ? 1'b1 : 1'b0);

assign icmp_ln384_fu_634_p2 = ((p_06_rec_reg_357 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln385_fu_640_p2 = ((p_06_rec_reg_357 == 9'd360) ? 1'b1 : 1'b0);

assign j_1_fu_549_p2 = (j24_0_reg_346 + 11'd1);

assign j_fu_486_p2 = (j_0_reg_334 + 11'd1);

assign l_fu_446_p2 = (l_0_reg_312 + 4'd1);

assign n_fu_466_p2 = (n_0_reg_323 + 3'd1);

assign p_cast6_fu_422_p1 = tmp_2_fu_412_p4;

assign p_cast_fu_436_p1 = tmp_3_fu_426_p4;

assign shl_ln_fu_452_p3 = {{l_0_reg_312}, {10'd0}};

assign temp_array_address0 = zext_ln383_fu_629_p1;

assign tmp_1_fu_566_p3 = {{add_ln311_fu_561_p2}, {2'd0}};

assign tmp_2_fu_412_p4 = {{data_im[31:2]}};

assign tmp_3_fu_426_p4 = {{data_re[31:2]}};

assign tmp_fu_497_p3 = {{add_ln306_fu_492_p2}, {2'd0}};

assign zext_ln305_1_fu_472_p1 = n_0_reg_323;

assign zext_ln305_fu_476_p1 = j_0_reg_334;

assign zext_ln306_1_fu_514_p1 = add_ln306_1_fu_509_p2;

assign zext_ln306_2_fu_533_p1 = j_0_reg_334;

assign zext_ln306_3_fu_523_p1 = add_ln306_2_reg_693;

assign zext_ln306_fu_505_p1 = tmp_fu_497_p3;

assign zext_ln310_fu_539_p1 = j24_0_reg_346;

assign zext_ln311_1_fu_574_p1 = tmp_1_fu_566_p3;

assign zext_ln311_2_fu_583_p1 = add_ln311_1_fu_578_p2;

assign zext_ln311_3_fu_597_p1 = add_ln311_2_reg_722;

assign zext_ln311_fu_555_p1 = j24_0_reg_346;

assign zext_ln312_fu_607_p1 = add_ln312_reg_727;

assign zext_ln383_fu_629_p1 = p_06_rec_reg_357;

always @ (posedge ap_clk) begin
    p_cast6_reg_646[30] <= 1'b0;
    p_cast_reg_651[30] <= 1'b0;
    shl_ln_reg_665[9:0] <= 10'b0000000000;
    zext_ln305_1_reg_679[16:3] <= 14'b00000000000000;
end

endmodule //music
